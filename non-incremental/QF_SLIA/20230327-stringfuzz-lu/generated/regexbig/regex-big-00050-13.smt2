(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (str.to_re "000")) (re.* (str.to_re "111"))) (re.++ (re.+ (re.+ (str.to_re "2"))) (re.++ (re.+ (re.* (str.to_re "333"))) (re.++ (re.* (re.+ (str.to_re "4"))) (re.++ (re.+ (re.union (str.to_re "5") (str.to_re "66"))) (re.++ (re.union (re.union (str.to_re "777") (str.to_re "888")) (re.* (str.to_re "99"))) (re.++ (re.+ (re.union (str.to_re "a") (str.to_re "bb"))) (re.++ (re.+ (re.+ (str.to_re "cc"))) (re.++ (re.+ (re.* (str.to_re "ddd"))) (re.++ (re.+ (re.* (str.to_re "e"))) (re.++ (re.+ (re.* (str.to_re "ff"))) (re.++ (re.union (re.+ (str.to_re "gg")) (re.+ (str.to_re "hh"))) (re.++ (re.* (re.union (str.to_re "iii") (str.to_re "j"))) (re.++ (re.* (re.union (str.to_re "kkk") (str.to_re "lll"))) (re.++ (re.* (re.+ (str.to_re "mmm"))) (re.++ (re.+ (re.* (str.to_re "nn"))) (re.++ (re.+ (re.union (str.to_re "oo") (str.to_re "pp"))) (re.++ (re.* (re.* (str.to_re "qq"))) (re.++ (re.union (re.union (str.to_re "r") (str.to_re "s")) (re.union (str.to_re "tt") (str.to_re "uu"))) (re.++ (re.* (re.union (str.to_re "vvv") (str.to_re "ww"))) (re.++ (re.+ (re.union (str.to_re "xx") (str.to_re "yy"))) (re.++ (re.union (re.* (str.to_re "zzz")) (re.+ (str.to_re "A"))) (re.++ (re.union (re.+ (str.to_re "BBB")) (re.union (str.to_re "CC") (str.to_re "DD"))) (re.++ (re.union (re.+ (str.to_re "EE")) (re.* (str.to_re "F"))) (re.++ (re.+ (re.union (str.to_re "GG") (str.to_re "HHH"))) (re.++ (re.* (re.* (str.to_re "II"))) (re.++ (re.* (re.union (str.to_re "JJJ") (str.to_re "K"))) (re.++ (re.+ (re.union (str.to_re "LLL") (str.to_re "MMM"))) (re.++ (re.union (re.+ (str.to_re "NNN")) (re.+ (str.to_re "O"))) (re.++ (re.+ (re.+ (str.to_re "P"))) (re.++ (re.+ (re.+ (str.to_re "QQ"))) (re.++ (re.union (re.union (str.to_re "RR") (str.to_re "SSS")) (re.union (str.to_re "TTT") (str.to_re "UUU"))) (re.++ (re.+ (re.union (str.to_re "VV") (str.to_re "WW"))) (re.++ (re.+ (re.union (str.to_re "XX") (str.to_re "YY"))) (re.++ (re.* (re.+ (str.to_re "ZZ"))) (re.++ (re.union (re.+ (str.to_re "!!")) (re.* (str.to_re """"))) (re.++ (re.+ (re.union (str.to_re "#") (str.to_re "$$"))) (re.++ (re.union (re.+ (str.to_re "%")) (re.* (str.to_re "&&"))) (re.++ (re.union (re.+ (str.to_re "''")) (re.union (str.to_re "(((") (str.to_re "))"))) (re.++ (re.+ (re.* (str.to_re "***"))) (re.++ (re.union (re.* (str.to_re "+")) (re.+ (str.to_re ","))) (re.++ (re.union (re.* (str.to_re "--")) (re.union (str.to_re ".") (str.to_re "///"))) (re.++ (re.+ (re.+ (str.to_re ":"))) (re.++ (re.+ (re.* (str.to_re ";;"))) (re.++ (re.+ (re.* (str.to_re "<<"))) (re.++ (re.union (re.* (str.to_re "===")) (re.union (str.to_re ">") (str.to_re "??"))) (re.++ (re.+ (re.union (str.to_re "@@@") (str.to_re "[["))) (re.++ (re.union (re.union (str.to_re "\\") (str.to_re "]")) (re.+ (str.to_re "^^^"))) (re.++ (re.union (re.+ (str.to_re "_")) (re.* (str.to_re "``"))) (re.union (re.* (str.to_re "{{")) (re.+ (str.to_re "|||"))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
