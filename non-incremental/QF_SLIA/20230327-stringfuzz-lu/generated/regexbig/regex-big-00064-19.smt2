(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "000"))) (re.++ (re.* (re.union (str.to_re "111") (str.to_re "22"))) (re.++ (re.+ (re.+ (str.to_re "3"))) (re.++ (re.+ (re.* (str.to_re "444"))) (re.++ (re.union (re.+ (str.to_re "5")) (re.* (str.to_re "66"))) (re.++ (re.union (re.union (str.to_re "77") (str.to_re "8")) (re.* (str.to_re "999"))) (re.++ (re.+ (re.+ (str.to_re "a"))) (re.++ (re.+ (re.+ (str.to_re "bb"))) (re.++ (re.+ (re.* (str.to_re "cc"))) (re.++ (re.+ (re.+ (str.to_re "ddd"))) (re.++ (re.union (re.* (str.to_re "eee")) (re.* (str.to_re "f"))) (re.++ (re.* (re.* (str.to_re "gg"))) (re.++ (re.+ (re.* (str.to_re "h"))) (re.++ (re.union (re.+ (str.to_re "i")) (re.+ (str.to_re "jjj"))) (re.++ (re.* (re.* (str.to_re "k"))) (re.++ (re.* (re.+ (str.to_re "l"))) (re.++ (re.union (re.* (str.to_re "mm")) (re.+ (str.to_re "nnn"))) (re.++ (re.+ (re.+ (str.to_re "oo"))) (re.++ (re.* (re.* (str.to_re "pp"))) (re.++ (re.* (re.+ (str.to_re "qqq"))) (re.++ (re.union (re.union (str.to_re "rr") (str.to_re "ss")) (re.union (str.to_re "ttt") (str.to_re "u"))) (re.++ (re.union (re.+ (str.to_re "vv")) (re.union (str.to_re "w") (str.to_re "x"))) (re.++ (re.* (re.+ (str.to_re "yy"))) (re.++ (re.* (re.union (str.to_re "zzz") (str.to_re "AA"))) (re.++ (re.+ (re.+ (str.to_re "BBB"))) (re.++ (re.* (re.union (str.to_re "C") (str.to_re "D"))) (re.++ (re.+ (re.+ (str.to_re "EE"))) (re.++ (re.+ (re.* (str.to_re "F"))) (re.++ (re.+ (re.* (str.to_re "G"))) (re.++ (re.* (re.+ (str.to_re "HH"))) (re.++ (re.union (re.* (str.to_re "III")) (re.* (str.to_re "J"))) (re.++ (re.union (re.* (str.to_re "KK")) (re.+ (str.to_re "LLL"))) (re.++ (re.* (re.union (str.to_re "M") (str.to_re "N"))) (re.++ (re.* (re.union (str.to_re "OO") (str.to_re "PPP"))) (re.++ (re.+ (re.* (str.to_re "Q"))) (re.++ (re.+ (re.union (str.to_re "RRR") (str.to_re "S"))) (re.++ (re.* (re.* (str.to_re "TT"))) (re.++ (re.+ (re.* (str.to_re "U"))) (re.++ (re.+ (re.+ (str.to_re "V"))) (re.++ (re.+ (re.union (str.to_re "W") (str.to_re "X"))) (re.++ (re.union (re.union (str.to_re "YYY") (str.to_re "ZZZ")) (re.* (str.to_re "!!"))) (re.++ (re.* (re.union (str.to_re """""") (str.to_re "##"))) (re.++ (re.union (re.+ (str.to_re "$")) (re.* (str.to_re "%%"))) (re.++ (re.+ (re.* (str.to_re "&&"))) (re.++ (re.+ (re.+ (str.to_re "'"))) (re.++ (re.union (re.union (str.to_re "(((") (str.to_re ")")) (re.* (str.to_re "*"))) (re.++ (re.* (re.* (str.to_re "+++"))) (re.++ (re.union (re.+ (str.to_re ",,,")) (re.union (str.to_re "--") (str.to_re "."))) (re.++ (re.* (re.* (str.to_re "/"))) (re.++ (re.union (re.union (str.to_re "::") (str.to_re ";;;")) (re.* (str.to_re "<"))) (re.++ (re.union (re.+ (str.to_re "===")) (re.union (str.to_re ">") (str.to_re "?"))) (re.++ (re.* (re.* (str.to_re "@@"))) (re.++ (re.* (re.* (str.to_re "[["))) (re.++ (re.+ (re.union (str.to_re "\\\\") (str.to_re "]"))) (re.++ (re.union (re.* (str.to_re "^")) (re.union (str.to_re "_") (str.to_re "`"))) (re.++ (re.union (re.* (str.to_re "{")) (re.+ (str.to_re "|"))) (re.++ (re.* (re.union (str.to_re "}") (str.to_re "~~"))) (re.++ (re.+ (re.+ (str.to_re "000"))) (re.++ (re.+ (re.union (str.to_re "111") (str.to_re "222"))) (re.++ (re.* (re.union (str.to_re "33") (str.to_re "4"))) (re.++ (re.* (re.union (str.to_re "555") (str.to_re "6"))) (re.++ (re.* (re.* (str.to_re "77"))) (re.++ (re.+ (re.* (str.to_re "88"))) (re.+ (re.* (str.to_re "999"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
