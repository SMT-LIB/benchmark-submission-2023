(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "000"))) (re.++ (re.union (re.union (str.to_re "111") (str.to_re "22")) (re.+ (str.to_re "3"))) (re.++ (re.* (re.union (str.to_re "4") (str.to_re "5"))) (re.++ (re.* (re.+ (str.to_re "666"))) (re.++ (re.+ (re.+ (str.to_re "77"))) (re.++ (re.+ (re.union (str.to_re "888") (str.to_re "9"))) (re.++ (re.* (re.+ (str.to_re "aa"))) (re.++ (re.+ (re.+ (str.to_re "bbb"))) (re.++ (re.union (re.+ (str.to_re "c")) (re.* (str.to_re "d"))) (re.++ (re.union (re.union (str.to_re "ee") (str.to_re "ff")) (re.* (str.to_re "gg"))) (re.++ (re.+ (re.union (str.to_re "hh") (str.to_re "iii"))) (re.++ (re.union (re.+ (str.to_re "j")) (re.* (str.to_re "kk"))) (re.++ (re.* (re.union (str.to_re "ll") (str.to_re "mm"))) (re.++ (re.+ (re.+ (str.to_re "nn"))) (re.++ (re.* (re.union (str.to_re "oo") (str.to_re "ppp"))) (re.++ (re.* (re.union (str.to_re "qqq") (str.to_re "rrr"))) (re.++ (re.union (re.union (str.to_re "sss") (str.to_re "t")) (re.union (str.to_re "uu") (str.to_re "v"))) (re.++ (re.union (re.* (str.to_re "ww")) (re.+ (str.to_re "xxx"))) (re.++ (re.+ (re.+ (str.to_re "yy"))) (re.++ (re.union (re.+ (str.to_re "zzz")) (re.* (str.to_re "A"))) (re.++ (re.* (re.union (str.to_re "BBB") (str.to_re "C"))) (re.++ (re.union (re.* (str.to_re "DD")) (re.* (str.to_re "EEE"))) (re.++ (re.union (re.+ (str.to_re "FF")) (re.union (str.to_re "G") (str.to_re "HH"))) (re.++ (re.* (re.union (str.to_re "II") (str.to_re "J"))) (re.++ (re.+ (re.* (str.to_re "K"))) (re.++ (re.+ (re.* (str.to_re "LLL"))) (re.++ (re.+ (re.union (str.to_re "MM") (str.to_re "NNN"))) (re.++ (re.* (re.* (str.to_re "O"))) (re.* (re.+ (str.to_re "P")))))))))))))))))))))))))))))))))
(check-sat)
(exit)
