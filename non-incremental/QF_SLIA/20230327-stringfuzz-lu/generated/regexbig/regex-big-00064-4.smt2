(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.union (str.to_re "0") (str.to_re "11")) (re.union (str.to_re "2") (str.to_re "33"))) (re.++ (re.* (re.union (str.to_re "4") (str.to_re "555"))) (re.++ (re.union (re.* (str.to_re "66")) (re.+ (str.to_re "77"))) (re.++ (re.union (re.+ (str.to_re "8")) (re.union (str.to_re "9") (str.to_re "a"))) (re.++ (re.* (re.* (str.to_re "b"))) (re.++ (re.+ (re.* (str.to_re "ccc"))) (re.++ (re.union (re.union (str.to_re "dd") (str.to_re "e")) (re.+ (str.to_re "ff"))) (re.++ (re.* (re.* (str.to_re "ggg"))) (re.++ (re.+ (re.+ (str.to_re "hhh"))) (re.++ (re.+ (re.union (str.to_re "ii") (str.to_re "jjj"))) (re.++ (re.+ (re.+ (str.to_re "k"))) (re.++ (re.* (re.union (str.to_re "l") (str.to_re "mm"))) (re.++ (re.* (re.union (str.to_re "nnn") (str.to_re "ooo"))) (re.++ (re.union (re.+ (str.to_re "p")) (re.* (str.to_re "q"))) (re.++ (re.union (re.+ (str.to_re "rr")) (re.union (str.to_re "ss") (str.to_re "ttt"))) (re.++ (re.* (re.union (str.to_re "uu") (str.to_re "v"))) (re.++ (re.union (re.* (str.to_re "www")) (re.* (str.to_re "x"))) (re.++ (re.union (re.* (str.to_re "y")) (re.+ (str.to_re "z"))) (re.++ (re.+ (re.* (str.to_re "A"))) (re.++ (re.* (re.union (str.to_re "B") (str.to_re "CCC"))) (re.++ (re.union (re.* (str.to_re "DD")) (re.* (str.to_re "EEE"))) (re.++ (re.union (re.+ (str.to_re "F")) (re.+ (str.to_re "G"))) (re.++ (re.union (re.union (str.to_re "H") (str.to_re "III")) (re.+ (str.to_re "J"))) (re.++ (re.* (re.+ (str.to_re "KK"))) (re.++ (re.* (re.+ (str.to_re "LLL"))) (re.++ (re.union (re.* (str.to_re "MMM")) (re.union (str.to_re "NNN") (str.to_re "OO"))) (re.++ (re.union (re.+ (str.to_re "PP")) (re.+ (str.to_re "QQ"))) (re.++ (re.union (re.union (str.to_re "RR") (str.to_re "SS")) (re.* (str.to_re "T"))) (re.++ (re.+ (re.+ (str.to_re "UU"))) (re.++ (re.* (re.+ (str.to_re "VVV"))) (re.++ (re.* (re.+ (str.to_re "W"))) (re.++ (re.union (re.+ (str.to_re "XXX")) (re.union (str.to_re "YY") (str.to_re "Z"))) (re.++ (re.union (re.* (str.to_re "!!!")) (re.union (str.to_re """") (str.to_re "##"))) (re.++ (re.* (re.+ (str.to_re "$$$"))) (re.++ (re.union (re.+ (str.to_re "%%")) (re.+ (str.to_re "&&&"))) (re.++ (re.+ (re.* (str.to_re "''"))) (re.++ (re.+ (re.+ (str.to_re "(("))) (re.++ (re.union (re.+ (str.to_re ")")) (re.+ (str.to_re "***"))) (re.++ (re.+ (re.* (str.to_re "++"))) (re.++ (re.+ (re.+ (str.to_re ",,"))) (re.++ (re.* (re.* (str.to_re "--"))) (re.++ (re.+ (re.+ (str.to_re "."))) (re.++ (re.+ (re.* (str.to_re "//"))) (re.++ (re.* (re.+ (str.to_re ":::"))) (re.++ (re.+ (re.* (str.to_re ";"))) (re.++ (re.+ (re.union (str.to_re "<<<") (str.to_re "==="))) (re.++ (re.union (re.+ (str.to_re ">>")) (re.+ (str.to_re "?"))) (re.++ (re.+ (re.* (str.to_re "@"))) (re.++ (re.* (re.* (str.to_re "[[["))) (re.++ (re.union (re.union (str.to_re "\\\\") (str.to_re "]")) (re.union (str.to_re "^^") (str.to_re "__"))) (re.++ (re.* (re.union (str.to_re "``") (str.to_re "{{{"))) (re.++ (re.union (re.* (str.to_re "|||")) (re.union (str.to_re "}}") (str.to_re "~~"))) (re.++ (re.* (re.+ (str.to_re "0"))) (re.++ (re.* (re.+ (str.to_re "111"))) (re.++ (re.union (re.union (str.to_re "22") (str.to_re "33")) (re.union (str.to_re "4") (str.to_re "5"))) (re.++ (re.union (re.* (str.to_re "66")) (re.union (str.to_re "777") (str.to_re "8"))) (re.++ (re.+ (re.union (str.to_re "999") (str.to_re "aa"))) (re.++ (re.* (re.+ (str.to_re "bbb"))) (re.++ (re.union (re.* (str.to_re "cc")) (re.* (str.to_re "d"))) (re.++ (re.* (re.* (str.to_re "eee"))) (re.++ (re.+ (re.union (str.to_re "ff") (str.to_re "g"))) (re.++ (re.+ (re.+ (str.to_re "h"))) (re.++ (re.* (re.union (str.to_re "ii") (str.to_re "jj"))) (re.+ (re.union (str.to_re "k") (str.to_re "lll"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
