(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "0"))) (re.++ (re.union (re.+ (str.to_re "11")) (re.* (str.to_re "2"))) (re.++ (re.* (re.+ (str.to_re "33"))) (re.++ (re.union (re.union (str.to_re "444") (str.to_re "5")) (re.+ (str.to_re "666"))) (re.++ (re.+ (re.union (str.to_re "777") (str.to_re "88"))) (re.++ (re.+ (re.* (str.to_re "999"))) (re.++ (re.* (re.* (str.to_re "aaa"))) (re.++ (re.union (re.union (str.to_re "bbb") (str.to_re "cc")) (re.union (str.to_re "ddd") (str.to_re "ee"))) (re.++ (re.+ (re.union (str.to_re "fff") (str.to_re "gg"))) (re.++ (re.union (re.+ (str.to_re "hhh")) (re.+ (str.to_re "i"))) (re.++ (re.* (re.* (str.to_re "jjj"))) (re.++ (re.+ (re.* (str.to_re "kkk"))) (re.++ (re.union (re.+ (str.to_re "l")) (re.* (str.to_re "mmm"))) (re.++ (re.+ (re.* (str.to_re "nnn"))) (re.++ (re.union (re.union (str.to_re "oo") (str.to_re "ppp")) (re.+ (str.to_re "q"))) (re.++ (re.+ (re.+ (str.to_re "rrr"))) (re.++ (re.* (re.+ (str.to_re "sss"))) (re.++ (re.+ (re.* (str.to_re "ttt"))) (re.++ (re.* (re.+ (str.to_re "u"))) (re.++ (re.+ (re.* (str.to_re "vv"))) (re.++ (re.union (re.+ (str.to_re "www")) (re.+ (str.to_re "x"))) (re.++ (re.* (re.* (str.to_re "yyy"))) (re.++ (re.union (re.union (str.to_re "zzz") (str.to_re "AA")) (re.* (str.to_re "B"))) (re.++ (re.union (re.union (str.to_re "CC") (str.to_re "DD")) (re.* (str.to_re "E"))) (re.++ (re.* (re.union (str.to_re "FF") (str.to_re "G"))) (re.++ (re.+ (re.* (str.to_re "H"))) (re.++ (re.* (re.* (str.to_re "I"))) (re.++ (re.union (re.* (str.to_re "JJJ")) (re.+ (str.to_re "KK"))) (re.++ (re.union (re.union (str.to_re "LL") (str.to_re "MM")) (re.union (str.to_re "NN") (str.to_re "OOO"))) (re.++ (re.* (re.union (str.to_re "P") (str.to_re "QQ"))) (re.++ (re.* (re.+ (str.to_re "R"))) (re.++ (re.union (re.* (str.to_re "SSS")) (re.+ (str.to_re "TTT"))) (re.++ (re.union (re.+ (str.to_re "U")) (re.+ (str.to_re "VV"))) (re.++ (re.union (re.* (str.to_re "WW")) (re.union (str.to_re "XXX") (str.to_re "Y"))) (re.++ (re.* (re.* (str.to_re "ZZ"))) (re.++ (re.+ (re.+ (str.to_re "!"))) (re.++ (re.* (re.union (str.to_re """") (str.to_re "#"))) (re.++ (re.union (re.union (str.to_re "$") (str.to_re "%%%")) (re.+ (str.to_re "&&"))) (re.++ (re.union (re.union (str.to_re "''") (str.to_re "((")) (re.* (str.to_re ")))"))) (re.++ (re.* (re.* (str.to_re "**"))) (re.++ (re.* (re.union (str.to_re "+") (str.to_re ",,,"))) (re.++ (re.* (re.+ (str.to_re "---"))) (re.* (re.+ (str.to_re ".")))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
