(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "000"))) (re.++ (re.* (re.+ (str.to_re "111"))) (re.++ (re.* (re.* (str.to_re "2"))) (re.++ (re.* (re.union (str.to_re "333") (str.to_re "444"))) (re.++ (re.* (re.union (str.to_re "555") (str.to_re "666"))) (re.++ (re.* (re.* (str.to_re "77"))) (re.++ (re.+ (re.+ (str.to_re "8"))) (re.++ (re.+ (re.+ (str.to_re "9"))) (re.++ (re.+ (re.+ (str.to_re "aa"))) (re.++ (re.union (re.+ (str.to_re "bb")) (re.* (str.to_re "cc"))) (re.++ (re.* (re.union (str.to_re "ddd") (str.to_re "e"))) (re.++ (re.union (re.union (str.to_re "ff") (str.to_re "gg")) (re.* (str.to_re "hh"))) (re.++ (re.union (re.union (str.to_re "ii") (str.to_re "j")) (re.+ (str.to_re "k"))) (re.++ (re.+ (re.+ (str.to_re "ll"))) (re.++ (re.union (re.* (str.to_re "mm")) (re.union (str.to_re "nnn") (str.to_re "o"))) (re.++ (re.union (re.+ (str.to_re "ppp")) (re.* (str.to_re "qq"))) (re.++ (re.* (re.union (str.to_re "rrr") (str.to_re "s"))) (re.++ (re.+ (re.union (str.to_re "t") (str.to_re "uu"))) (re.++ (re.+ (re.union (str.to_re "v") (str.to_re "w"))) (re.++ (re.union (re.+ (str.to_re "xx")) (re.union (str.to_re "y") (str.to_re "zz"))) (re.++ (re.* (re.union (str.to_re "AA") (str.to_re "BBB"))) (re.++ (re.union (re.union (str.to_re "CCC") (str.to_re "D")) (re.union (str.to_re "EEE") (str.to_re "F"))) (re.++ (re.+ (re.* (str.to_re "G"))) (re.++ (re.union (re.* (str.to_re "H")) (re.* (str.to_re "II"))) (re.++ (re.union (re.* (str.to_re "JJ")) (re.* (str.to_re "KKK"))) (re.++ (re.union (re.union (str.to_re "L") (str.to_re "MM")) (re.+ (str.to_re "N"))) (re.++ (re.+ (re.+ (str.to_re "OOO"))) (re.++ (re.+ (re.+ (str.to_re "PPP"))) (re.++ (re.* (re.+ (str.to_re "QQ"))) (re.++ (re.union (re.* (str.to_re "RRR")) (re.* (str.to_re "S"))) (re.++ (re.+ (re.union (str.to_re "TT") (str.to_re "UUU"))) (re.++ (re.union (re.union (str.to_re "VV") (str.to_re "W")) (re.union (str.to_re "XXX") (str.to_re "Y"))) (re.++ (re.* (re.* (str.to_re "ZZZ"))) (re.++ (re.union (re.union (str.to_re "!") (str.to_re """")) (re.+ (str.to_re "#"))) (re.++ (re.* (re.+ (str.to_re "$"))) (re.++ (re.+ (re.* (str.to_re "%"))) (re.++ (re.* (re.union (str.to_re "&&") (str.to_re "'"))) (re.++ (re.+ (re.union (str.to_re "(((") (str.to_re "))"))) (re.++ (re.* (re.* (str.to_re "***"))) (re.++ (re.union (re.* (str.to_re "++")) (re.* (str.to_re ",,,"))) (re.++ (re.* (re.union (str.to_re "---") (str.to_re ".."))) (re.++ (re.+ (re.* (str.to_re "///"))) (re.++ (re.+ (re.union (str.to_re "::") (str.to_re ";"))) (re.++ (re.union (re.+ (str.to_re "<<<")) (re.union (str.to_re "==") (str.to_re ">"))) (re.++ (re.+ (re.union (str.to_re "???") (str.to_re "@"))) (re.++ (re.union (re.+ (str.to_re "[")) (re.* (str.to_re "\\\\"))) (re.++ (re.union (re.union (str.to_re "]") (str.to_re "^^")) (re.* (str.to_re "___"))) (re.++ (re.* (re.union (str.to_re "```") (str.to_re "{{{"))) (re.++ (re.* (re.* (str.to_re "|"))) (re.++ (re.union (re.+ (str.to_re "}")) (re.+ (str.to_re "~~"))) (re.++ (re.* (re.union (str.to_re "000") (str.to_re "1"))) (re.++ (re.* (re.+ (str.to_re "22"))) (re.++ (re.+ (re.* (str.to_re "333"))) (re.++ (re.+ (re.+ (str.to_re "4"))) (re.++ (re.+ (re.* (str.to_re "55"))) (re.++ (re.+ (re.+ (str.to_re "6"))) (re.+ (re.union (str.to_re "7") (str.to_re "8")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
