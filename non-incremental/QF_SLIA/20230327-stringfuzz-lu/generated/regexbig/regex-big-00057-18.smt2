(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "0"))) (re.++ (re.* (re.+ (str.to_re "111"))) (re.++ (re.* (re.+ (str.to_re "222"))) (re.++ (re.* (re.+ (str.to_re "33"))) (re.++ (re.union (re.* (str.to_re "4")) (re.* (str.to_re "55"))) (re.++ (re.+ (re.union (str.to_re "666") (str.to_re "77"))) (re.++ (re.union (re.union (str.to_re "8") (str.to_re "999")) (re.+ (str.to_re "aaa"))) (re.++ (re.* (re.+ (str.to_re "bbb"))) (re.++ (re.+ (re.* (str.to_re "c"))) (re.++ (re.union (re.union (str.to_re "dd") (str.to_re "e")) (re.* (str.to_re "f"))) (re.++ (re.* (re.* (str.to_re "g"))) (re.++ (re.* (re.union (str.to_re "hh") (str.to_re "ii"))) (re.++ (re.* (re.union (str.to_re "j") (str.to_re "k"))) (re.++ (re.union (re.* (str.to_re "l")) (re.+ (str.to_re "m"))) (re.++ (re.+ (re.* (str.to_re "nnn"))) (re.++ (re.* (re.* (str.to_re "o"))) (re.++ (re.+ (re.* (str.to_re "ppp"))) (re.++ (re.* (re.union (str.to_re "q") (str.to_re "rrr"))) (re.++ (re.* (re.union (str.to_re "s") (str.to_re "t"))) (re.++ (re.* (re.* (str.to_re "uu"))) (re.++ (re.+ (re.+ (str.to_re "vvv"))) (re.++ (re.* (re.union (str.to_re "www") (str.to_re "xxx"))) (re.++ (re.union (re.* (str.to_re "y")) (re.* (str.to_re "zzz"))) (re.++ (re.* (re.* (str.to_re "A"))) (re.++ (re.union (re.+ (str.to_re "BB")) (re.+ (str.to_re "CCC"))) (re.++ (re.+ (re.union (str.to_re "D") (str.to_re "E"))) (re.++ (re.* (re.+ (str.to_re "F"))) (re.++ (re.* (re.* (str.to_re "GG"))) (re.++ (re.* (re.* (str.to_re "H"))) (re.++ (re.union (re.* (str.to_re "I")) (re.+ (str.to_re "J"))) (re.++ (re.union (re.union (str.to_re "KK") (str.to_re "LL")) (re.* (str.to_re "MM"))) (re.++ (re.+ (re.* (str.to_re "NNN"))) (re.++ (re.union (re.* (str.to_re "OOO")) (re.* (str.to_re "P"))) (re.++ (re.+ (re.* (str.to_re "QQ"))) (re.++ (re.union (re.* (str.to_re "RRR")) (re.union (str.to_re "SSS") (str.to_re "TTT"))) (re.++ (re.union (re.+ (str.to_re "UU")) (re.+ (str.to_re "VV"))) (re.++ (re.+ (re.+ (str.to_re "W"))) (re.++ (re.+ (re.* (str.to_re "X"))) (re.++ (re.+ (re.+ (str.to_re "YY"))) (re.++ (re.union (re.union (str.to_re "Z") (str.to_re "!")) (re.* (str.to_re """"))) (re.++ (re.union (re.* (str.to_re "###")) (re.* (str.to_re "$$$"))) (re.++ (re.union (re.union (str.to_re "%%") (str.to_re "&&&")) (re.+ (str.to_re "'"))) (re.++ (re.* (re.* (str.to_re "(("))) (re.++ (re.union (re.union (str.to_re ")))") (str.to_re "*")) (re.union (str.to_re "++") (str.to_re ",,"))) (re.++ (re.* (re.union (str.to_re "-") (str.to_re "..."))) (re.++ (re.union (re.union (str.to_re "//") (str.to_re ":")) (re.union (str.to_re ";") (str.to_re "<<<"))) (re.++ (re.+ (re.union (str.to_re "==") (str.to_re ">>>"))) (re.++ (re.* (re.+ (str.to_re "??"))) (re.++ (re.+ (re.+ (str.to_re "@@@"))) (re.++ (re.* (re.* (str.to_re "[["))) (re.++ (re.+ (re.union (str.to_re "\\\\\\") (str.to_re "]]"))) (re.++ (re.* (re.* (str.to_re "^"))) (re.++ (re.+ (re.union (str.to_re "___") (str.to_re "`"))) (re.++ (re.* (re.* (str.to_re "{{{"))) (re.++ (re.* (re.+ (str.to_re "|||"))) (re.++ (re.+ (re.* (str.to_re "}}}"))) (re.+ (re.* (str.to_re "~~~")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
