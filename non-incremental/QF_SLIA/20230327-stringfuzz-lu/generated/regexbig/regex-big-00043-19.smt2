(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (str.to_re "00")) (re.+ (str.to_re "11"))) (re.++ (re.+ (re.+ (str.to_re "222"))) (re.++ (re.+ (re.union (str.to_re "33") (str.to_re "44"))) (re.++ (re.+ (re.* (str.to_re "55"))) (re.++ (re.+ (re.union (str.to_re "66") (str.to_re "77"))) (re.++ (re.* (re.union (str.to_re "8") (str.to_re "9"))) (re.++ (re.union (re.* (str.to_re "a")) (re.+ (str.to_re "bb"))) (re.++ (re.* (re.+ (str.to_re "cc"))) (re.++ (re.union (re.union (str.to_re "dd") (str.to_re "eee")) (re.* (str.to_re "f"))) (re.++ (re.* (re.+ (str.to_re "g"))) (re.++ (re.* (re.+ (str.to_re "hh"))) (re.++ (re.union (re.union (str.to_re "i") (str.to_re "j")) (re.+ (str.to_re "kk"))) (re.++ (re.+ (re.+ (str.to_re "l"))) (re.++ (re.+ (re.+ (str.to_re "mm"))) (re.++ (re.* (re.* (str.to_re "nnn"))) (re.++ (re.* (re.+ (str.to_re "oo"))) (re.++ (re.union (re.+ (str.to_re "p")) (re.union (str.to_re "qq") (str.to_re "rr"))) (re.++ (re.union (re.* (str.to_re "s")) (re.* (str.to_re "tt"))) (re.++ (re.union (re.+ (str.to_re "u")) (re.+ (str.to_re "v"))) (re.++ (re.union (re.union (str.to_re "w") (str.to_re "xx")) (re.+ (str.to_re "yyy"))) (re.++ (re.* (re.+ (str.to_re "zzz"))) (re.++ (re.* (re.union (str.to_re "AAA") (str.to_re "BBB"))) (re.++ (re.+ (re.* (str.to_re "CCC"))) (re.++ (re.union (re.+ (str.to_re "DDD")) (re.+ (str.to_re "EEE"))) (re.++ (re.* (re.+ (str.to_re "F"))) (re.++ (re.* (re.* (str.to_re "GG"))) (re.++ (re.* (re.union (str.to_re "H") (str.to_re "I"))) (re.++ (re.+ (re.union (str.to_re "JJ") (str.to_re "K"))) (re.++ (re.* (re.union (str.to_re "LL") (str.to_re "M"))) (re.++ (re.+ (re.union (str.to_re "N") (str.to_re "OO"))) (re.++ (re.* (re.+ (str.to_re "PP"))) (re.++ (re.union (re.union (str.to_re "QQ") (str.to_re "RRR")) (re.+ (str.to_re "S"))) (re.++ (re.union (re.* (str.to_re "TTT")) (re.union (str.to_re "U") (str.to_re "V"))) (re.++ (re.+ (re.+ (str.to_re "W"))) (re.++ (re.union (re.* (str.to_re "XX")) (re.* (str.to_re "YYY"))) (re.++ (re.union (re.* (str.to_re "Z")) (re.+ (str.to_re "!!!"))) (re.++ (re.+ (re.union (str.to_re """") (str.to_re "##"))) (re.++ (re.+ (re.union (str.to_re "$$$") (str.to_re "%%"))) (re.++ (re.+ (re.+ (str.to_re "&&"))) (re.++ (re.* (re.* (str.to_re "'''"))) (re.++ (re.* (re.* (str.to_re "("))) (re.++ (re.union (re.* (str.to_re ")")) (re.union (str.to_re "*") (str.to_re "++"))) (re.* (re.* (str.to_re ",,")))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
