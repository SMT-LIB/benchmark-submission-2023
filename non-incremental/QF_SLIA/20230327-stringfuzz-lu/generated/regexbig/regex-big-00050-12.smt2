(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "0"))) (re.++ (re.+ (re.* (str.to_re "1"))) (re.++ (re.+ (re.* (str.to_re "2"))) (re.++ (re.* (re.union (str.to_re "333") (str.to_re "4"))) (re.++ (re.* (re.union (str.to_re "55") (str.to_re "666"))) (re.++ (re.* (re.+ (str.to_re "7"))) (re.++ (re.* (re.union (str.to_re "8") (str.to_re "9"))) (re.++ (re.union (re.* (str.to_re "a")) (re.+ (str.to_re "bb"))) (re.++ (re.* (re.union (str.to_re "c") (str.to_re "d"))) (re.++ (re.union (re.* (str.to_re "eee")) (re.* (str.to_re "f"))) (re.++ (re.* (re.* (str.to_re "g"))) (re.++ (re.* (re.* (str.to_re "h"))) (re.++ (re.+ (re.+ (str.to_re "i"))) (re.++ (re.+ (re.* (str.to_re "jj"))) (re.++ (re.union (re.* (str.to_re "kkk")) (re.union (str.to_re "ll") (str.to_re "mmm"))) (re.++ (re.union (re.union (str.to_re "n") (str.to_re "ooo")) (re.* (str.to_re "ppp"))) (re.++ (re.union (re.union (str.to_re "q") (str.to_re "rr")) (re.union (str.to_re "sss") (str.to_re "t"))) (re.++ (re.+ (re.+ (str.to_re "uuu"))) (re.++ (re.+ (re.union (str.to_re "vv") (str.to_re "www"))) (re.++ (re.* (re.+ (str.to_re "xxx"))) (re.++ (re.union (re.* (str.to_re "yyy")) (re.+ (str.to_re "zz"))) (re.++ (re.union (re.union (str.to_re "AAA") (str.to_re "B")) (re.+ (str.to_re "C"))) (re.++ (re.+ (re.* (str.to_re "D"))) (re.++ (re.union (re.* (str.to_re "EEE")) (re.union (str.to_re "FF") (str.to_re "GGG"))) (re.++ (re.* (re.+ (str.to_re "HH"))) (re.++ (re.+ (re.union (str.to_re "III") (str.to_re "JJ"))) (re.++ (re.* (re.* (str.to_re "KK"))) (re.++ (re.* (re.union (str.to_re "LLL") (str.to_re "MM"))) (re.++ (re.* (re.union (str.to_re "NNN") (str.to_re "OO"))) (re.++ (re.union (re.union (str.to_re "PP") (str.to_re "QQ")) (re.+ (str.to_re "R"))) (re.++ (re.* (re.union (str.to_re "S") (str.to_re "T"))) (re.++ (re.union (re.union (str.to_re "UUU") (str.to_re "VVV")) (re.+ (str.to_re "WWW"))) (re.++ (re.+ (re.union (str.to_re "XX") (str.to_re "YYY"))) (re.++ (re.* (re.* (str.to_re "ZZ"))) (re.++ (re.union (re.union (str.to_re "!") (str.to_re """""""")) (re.union (str.to_re "###") (str.to_re "$$$"))) (re.++ (re.union (re.* (str.to_re "%%%")) (re.+ (str.to_re "&&"))) (re.++ (re.union (re.+ (str.to_re "'")) (re.* (str.to_re "("))) (re.++ (re.union (re.* (str.to_re ")")) (re.* (str.to_re "*"))) (re.++ (re.union (re.* (str.to_re "+++")) (re.+ (str.to_re ",,"))) (re.++ (re.union (re.* (str.to_re "-")) (re.+ (str.to_re "..."))) (re.++ (re.* (re.+ (str.to_re "/"))) (re.++ (re.union (re.* (str.to_re ":::")) (re.* (str.to_re ";"))) (re.++ (re.* (re.* (str.to_re "<"))) (re.++ (re.union (re.* (str.to_re "=")) (re.union (str.to_re ">>>") (str.to_re "?"))) (re.++ (re.+ (re.+ (str.to_re "@"))) (re.++ (re.union (re.* (str.to_re "[[[")) (re.* (str.to_re "\\\\\\"))) (re.++ (re.union (re.+ (str.to_re "]")) (re.* (str.to_re "^^"))) (re.++ (re.+ (re.* (str.to_re "__"))) (re.++ (re.union (re.* (str.to_re "``")) (re.* (str.to_re "{{"))) (re.+ (re.union (str.to_re "|") (str.to_re "}}"))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
