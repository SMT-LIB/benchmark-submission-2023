(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "0"))) (re.++ (re.union (re.* (str.to_re "111")) (re.* (str.to_re "222"))) (re.++ (re.+ (re.+ (str.to_re "33"))) (re.++ (re.union (re.union (str.to_re "444") (str.to_re "5")) (re.+ (str.to_re "6"))) (re.++ (re.+ (re.* (str.to_re "777"))) (re.++ (re.union (re.union (str.to_re "88") (str.to_re "99")) (re.+ (str.to_re "aa"))) (re.++ (re.union (re.* (str.to_re "bbb")) (re.* (str.to_re "c"))) (re.++ (re.* (re.+ (str.to_re "d"))) (re.++ (re.* (re.* (str.to_re "ee"))) (re.++ (re.union (re.* (str.to_re "fff")) (re.union (str.to_re "ggg") (str.to_re "hh"))) (re.++ (re.+ (re.union (str.to_re "i") (str.to_re "jj"))) (re.++ (re.* (re.union (str.to_re "kkk") (str.to_re "l"))) (re.++ (re.+ (re.* (str.to_re "m"))) (re.++ (re.+ (re.+ (str.to_re "nnn"))) (re.++ (re.* (re.* (str.to_re "o"))) (re.++ (re.+ (re.+ (str.to_re "p"))) (re.++ (re.* (re.union (str.to_re "qqq") (str.to_re "rrr"))) (re.++ (re.* (re.* (str.to_re "s"))) (re.++ (re.+ (re.+ (str.to_re "ttt"))) (re.++ (re.+ (re.union (str.to_re "uuu") (str.to_re "v"))) (re.++ (re.+ (re.union (str.to_re "ww") (str.to_re "x"))) (re.++ (re.+ (re.* (str.to_re "y"))) (re.++ (re.* (re.+ (str.to_re "zzz"))) (re.++ (re.union (re.union (str.to_re "AAA") (str.to_re "BB")) (re.* (str.to_re "CCC"))) (re.++ (re.union (re.* (str.to_re "DD")) (re.+ (str.to_re "EEE"))) (re.++ (re.+ (re.* (str.to_re "FF"))) (re.++ (re.union (re.union (str.to_re "GG") (str.to_re "HHH")) (re.* (str.to_re "I"))) (re.++ (re.+ (re.* (str.to_re "J"))) (re.++ (re.union (re.+ (str.to_re "KKK")) (re.+ (str.to_re "LLL"))) (re.++ (re.union (re.* (str.to_re "MM")) (re.* (str.to_re "N"))) (re.++ (re.union (re.* (str.to_re "O")) (re.+ (str.to_re "PPP"))) (re.++ (re.* (re.+ (str.to_re "QQ"))) (re.++ (re.union (re.* (str.to_re "RRR")) (re.union (str.to_re "SSS") (str.to_re "T"))) (re.++ (re.+ (re.+ (str.to_re "UU"))) (re.++ (re.* (re.union (str.to_re "VV") (str.to_re "W"))) (re.++ (re.+ (re.* (str.to_re "XXX"))) (re.++ (re.+ (re.union (str.to_re "Y") (str.to_re "ZZZ"))) (re.++ (re.+ (re.* (str.to_re "!!"))) (re.++ (re.union (re.+ (str.to_re """""""")) (re.+ (str.to_re "##"))) (re.++ (re.+ (re.* (str.to_re "$$"))) (re.++ (re.* (re.* (str.to_re "%%"))) (re.++ (re.+ (re.+ (str.to_re "&&"))) (re.++ (re.+ (re.+ (str.to_re "'''"))) (re.++ (re.* (re.+ (str.to_re "((("))) (re.++ (re.* (re.* (str.to_re ")"))) (re.++ (re.* (re.+ (str.to_re "*"))) (re.++ (re.+ (re.+ (str.to_re "+++"))) (re.++ (re.union (re.union (str.to_re ",,") (str.to_re "-")) (re.union (str.to_re ".") (str.to_re "/"))) (re.++ (re.union (re.* (str.to_re "::")) (re.+ (str.to_re ";"))) (re.++ (re.union (re.+ (str.to_re "<")) (re.+ (str.to_re "=="))) (re.++ (re.* (re.union (str.to_re ">>") (str.to_re "??"))) (re.++ (re.union (re.+ (str.to_re "@")) (re.* (str.to_re "[[["))) (re.++ (re.union (re.* (str.to_re "\\")) (re.union (str.to_re "]") (str.to_re "^^"))) (re.++ (re.union (re.union (str.to_re "_") (str.to_re "`")) (re.union (str.to_re "{") (str.to_re "|"))) (re.++ (re.union (re.+ (str.to_re "}}")) (re.union (str.to_re "~~~") (str.to_re "00"))) (re.++ (re.union (re.* (str.to_re "111")) (re.+ (str.to_re "222"))) (re.++ (re.* (re.* (str.to_re "3"))) (re.++ (re.* (re.+ (str.to_re "4"))) (re.++ (re.* (re.union (str.to_re "5") (str.to_re "6"))) (re.++ (re.union (re.+ (str.to_re "77")) (re.+ (str.to_re "888"))) (re.++ (re.* (re.union (str.to_re "9") (str.to_re "a"))) (re.++ (re.* (re.* (str.to_re "bbb"))) (re.++ (re.* (re.+ (str.to_re "ccc"))) (re.* (re.* (str.to_re "ddd"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
