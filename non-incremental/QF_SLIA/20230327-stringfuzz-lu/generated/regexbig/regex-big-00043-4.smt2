(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "000"))) (re.++ (re.union (re.+ (str.to_re "111")) (re.union (str.to_re "222") (str.to_re "3"))) (re.++ (re.union (re.+ (str.to_re "44")) (re.* (str.to_re "5"))) (re.++ (re.* (re.+ (str.to_re "66"))) (re.++ (re.+ (re.+ (str.to_re "77"))) (re.++ (re.* (re.+ (str.to_re "8"))) (re.++ (re.* (re.+ (str.to_re "999"))) (re.++ (re.+ (re.* (str.to_re "aaa"))) (re.++ (re.union (re.union (str.to_re "bbb") (str.to_re "c")) (re.* (str.to_re "d"))) (re.++ (re.+ (re.+ (str.to_re "eee"))) (re.++ (re.* (re.* (str.to_re "fff"))) (re.++ (re.+ (re.union (str.to_re "gg") (str.to_re "hh"))) (re.++ (re.* (re.* (str.to_re "i"))) (re.++ (re.+ (re.union (str.to_re "jjj") (str.to_re "k"))) (re.++ (re.* (re.+ (str.to_re "l"))) (re.++ (re.* (re.* (str.to_re "mm"))) (re.++ (re.union (re.+ (str.to_re "n")) (re.union (str.to_re "o") (str.to_re "ppp"))) (re.++ (re.* (re.+ (str.to_re "qqq"))) (re.++ (re.* (re.* (str.to_re "r"))) (re.++ (re.+ (re.+ (str.to_re "ss"))) (re.++ (re.union (re.union (str.to_re "tt") (str.to_re "u")) (re.union (str.to_re "vv") (str.to_re "ww"))) (re.++ (re.union (re.+ (str.to_re "xxx")) (re.* (str.to_re "y"))) (re.++ (re.* (re.* (str.to_re "zz"))) (re.++ (re.union (re.* (str.to_re "AAA")) (re.* (str.to_re "BBB"))) (re.++ (re.+ (re.+ (str.to_re "C"))) (re.++ (re.* (re.+ (str.to_re "DDD"))) (re.++ (re.+ (re.union (str.to_re "EEE") (str.to_re "F"))) (re.++ (re.+ (re.union (str.to_re "GGG") (str.to_re "HH"))) (re.++ (re.* (re.union (str.to_re "I") (str.to_re "JJ"))) (re.++ (re.* (re.union (str.to_re "KK") (str.to_re "L"))) (re.++ (re.* (re.union (str.to_re "M") (str.to_re "N"))) (re.++ (re.union (re.* (str.to_re "OOO")) (re.* (str.to_re "PP"))) (re.++ (re.+ (re.* (str.to_re "QQQ"))) (re.++ (re.union (re.union (str.to_re "RRR") (str.to_re "SS")) (re.+ (str.to_re "T"))) (re.++ (re.+ (re.union (str.to_re "U") (str.to_re "VVV"))) (re.++ (re.+ (re.+ (str.to_re "W"))) (re.++ (re.union (re.union (str.to_re "X") (str.to_re "YY")) (re.union (str.to_re "ZZZ") (str.to_re "!!"))) (re.++ (re.* (re.* (str.to_re """"""""))) (re.++ (re.union (re.union (str.to_re "##") (str.to_re "$")) (re.* (str.to_re "%"))) (re.++ (re.* (re.* (str.to_re "&&&"))) (re.++ (re.+ (re.+ (str.to_re "'"))) (re.++ (re.* (re.* (str.to_re "("))) (re.* (re.union (str.to_re ")") (str.to_re "**")))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
