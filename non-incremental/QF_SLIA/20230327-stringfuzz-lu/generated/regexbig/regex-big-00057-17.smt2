(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "000"))) (re.++ (re.+ (re.* (str.to_re "111"))) (re.++ (re.+ (re.union (str.to_re "22") (str.to_re "3"))) (re.++ (re.union (re.+ (str.to_re "444")) (re.+ (str.to_re "55"))) (re.++ (re.* (re.+ (str.to_re "66"))) (re.++ (re.* (re.+ (str.to_re "77"))) (re.++ (re.* (re.* (str.to_re "88"))) (re.++ (re.union (re.union (str.to_re "999") (str.to_re "a")) (re.* (str.to_re "b"))) (re.++ (re.* (re.union (str.to_re "ccc") (str.to_re "d"))) (re.++ (re.+ (re.union (str.to_re "eee") (str.to_re "f"))) (re.++ (re.* (re.union (str.to_re "g") (str.to_re "hh"))) (re.++ (re.union (re.+ (str.to_re "i")) (re.* (str.to_re "j"))) (re.++ (re.+ (re.union (str.to_re "kkk") (str.to_re "ll"))) (re.++ (re.+ (re.* (str.to_re "m"))) (re.++ (re.union (re.* (str.to_re "n")) (re.union (str.to_re "o") (str.to_re "ppp"))) (re.++ (re.+ (re.* (str.to_re "qqq"))) (re.++ (re.union (re.+ (str.to_re "rrr")) (re.+ (str.to_re "ss"))) (re.++ (re.+ (re.* (str.to_re "t"))) (re.++ (re.union (re.union (str.to_re "uu") (str.to_re "vv")) (re.union (str.to_re "ww") (str.to_re "xx"))) (re.++ (re.* (re.union (str.to_re "y") (str.to_re "zz"))) (re.++ (re.* (re.* (str.to_re "A"))) (re.++ (re.union (re.* (str.to_re "BBB")) (re.+ (str.to_re "CC"))) (re.++ (re.+ (re.+ (str.to_re "DD"))) (re.++ (re.+ (re.+ (str.to_re "EE"))) (re.++ (re.union (re.union (str.to_re "F") (str.to_re "GG")) (re.union (str.to_re "HHH") (str.to_re "III"))) (re.++ (re.+ (re.+ (str.to_re "J"))) (re.++ (re.* (re.* (str.to_re "K"))) (re.++ (re.union (re.union (str.to_re "L") (str.to_re "MM")) (re.* (str.to_re "NNN"))) (re.++ (re.* (re.union (str.to_re "O") (str.to_re "PP"))) (re.++ (re.* (re.* (str.to_re "QQQ"))) (re.++ (re.* (re.* (str.to_re "R"))) (re.++ (re.union (re.union (str.to_re "SS") (str.to_re "T")) (re.* (str.to_re "UU"))) (re.++ (re.+ (re.union (str.to_re "V") (str.to_re "WW"))) (re.++ (re.union (re.union (str.to_re "X") (str.to_re "YY")) (re.* (str.to_re "ZZ"))) (re.++ (re.union (re.* (str.to_re "!!")) (re.+ (str.to_re """"""))) (re.++ (re.union (re.union (str.to_re "#") (str.to_re "$$")) (re.union (str.to_re "%%%") (str.to_re "&&&"))) (re.++ (re.* (re.+ (str.to_re "''"))) (re.++ (re.union (re.* (str.to_re "(((")) (re.+ (str.to_re "))"))) (re.++ (re.+ (re.union (str.to_re "*") (str.to_re "+"))) (re.++ (re.union (re.* (str.to_re ",,")) (re.* (str.to_re "--"))) (re.++ (re.* (re.* (str.to_re "."))) (re.++ (re.+ (re.+ (str.to_re "/"))) (re.++ (re.+ (re.union (str.to_re ":") (str.to_re ";"))) (re.++ (re.union (re.* (str.to_re "<<")) (re.* (str.to_re "=="))) (re.++ (re.union (re.* (str.to_re ">")) (re.* (str.to_re "??"))) (re.++ (re.union (re.* (str.to_re "@@@")) (re.* (str.to_re "["))) (re.++ (re.union (re.+ (str.to_re "\\\\\\")) (re.+ (str.to_re "]]]"))) (re.++ (re.union (re.union (str.to_re "^") (str.to_re "_")) (re.union (str.to_re "```") (str.to_re "{{"))) (re.++ (re.+ (re.+ (str.to_re "||"))) (re.++ (re.union (re.union (str.to_re "}}}") (str.to_re "~~~")) (re.+ (str.to_re "0"))) (re.++ (re.union (re.* (str.to_re "11")) (re.* (str.to_re "2"))) (re.++ (re.+ (re.union (str.to_re "33") (str.to_re "444"))) (re.++ (re.* (re.+ (str.to_re "555"))) (re.++ (re.* (re.+ (str.to_re "6"))) (re.++ (re.* (re.+ (str.to_re "77"))) (re.++ (re.* (re.* (str.to_re "88"))) (re.union (re.union (str.to_re "999") (str.to_re "aa")) (re.* (str.to_re "bb")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
