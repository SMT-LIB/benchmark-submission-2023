(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (str.to_re "000")) (re.union (str.to_re "11") (str.to_re "2"))) (re.++ (re.union (re.union (str.to_re "333") (str.to_re "444")) (re.* (str.to_re "5"))) (re.++ (re.* (re.+ (str.to_re "66"))) (re.++ (re.* (re.union (str.to_re "777") (str.to_re "88"))) (re.++ (re.+ (re.union (str.to_re "999") (str.to_re "a"))) (re.++ (re.* (re.union (str.to_re "b") (str.to_re "cc"))) (re.++ (re.+ (re.union (str.to_re "ddd") (str.to_re "eee"))) (re.++ (re.+ (re.union (str.to_re "f") (str.to_re "g"))) (re.++ (re.+ (re.union (str.to_re "h") (str.to_re "ii"))) (re.++ (re.+ (re.* (str.to_re "jj"))) (re.++ (re.+ (re.+ (str.to_re "kk"))) (re.++ (re.union (re.* (str.to_re "lll")) (re.+ (str.to_re "mm"))) (re.++ (re.* (re.union (str.to_re "n") (str.to_re "ooo"))) (re.++ (re.union (re.* (str.to_re "ppp")) (re.* (str.to_re "qqq"))) (re.++ (re.+ (re.+ (str.to_re "r"))) (re.++ (re.+ (re.+ (str.to_re "ss"))) (re.++ (re.+ (re.* (str.to_re "t"))) (re.++ (re.union (re.union (str.to_re "u") (str.to_re "vv")) (re.union (str.to_re "w") (str.to_re "x"))) (re.++ (re.* (re.union (str.to_re "y") (str.to_re "z"))) (re.++ (re.+ (re.union (str.to_re "A") (str.to_re "BB"))) (re.++ (re.+ (re.+ (str.to_re "CCC"))) (re.++ (re.* (re.+ (str.to_re "DDD"))) (re.++ (re.* (re.+ (str.to_re "E"))) (re.++ (re.union (re.* (str.to_re "F")) (re.union (str.to_re "G") (str.to_re "HHH"))) (re.++ (re.* (re.* (str.to_re "III"))) (re.++ (re.* (re.* (str.to_re "JJ"))) (re.++ (re.* (re.+ (str.to_re "K"))) (re.++ (re.* (re.+ (str.to_re "LL"))) (re.++ (re.+ (re.+ (str.to_re "MM"))) (re.++ (re.* (re.* (str.to_re "NNN"))) (re.++ (re.+ (re.* (str.to_re "OO"))) (re.++ (re.* (re.* (str.to_re "PPP"))) (re.++ (re.union (re.union (str.to_re "QQQ") (str.to_re "RRR")) (re.+ (str.to_re "SS"))) (re.++ (re.+ (re.+ (str.to_re "TTT"))) (re.++ (re.union (re.* (str.to_re "UU")) (re.* (str.to_re "VV"))) (re.++ (re.* (re.union (str.to_re "W") (str.to_re "XXX"))) (re.++ (re.* (re.* (str.to_re "Y"))) (re.++ (re.union (re.union (str.to_re "ZZ") (str.to_re "!")) (re.* (str.to_re """"""))) (re.++ (re.union (re.+ (str.to_re "#")) (re.+ (str.to_re "$"))) (re.++ (re.union (re.* (str.to_re "%%%")) (re.* (str.to_re "&&&"))) (re.++ (re.+ (re.+ (str.to_re "''"))) (re.++ (re.* (re.* (str.to_re "("))) (re.++ (re.union (re.+ (str.to_re ")))")) (re.* (str.to_re "**"))) (re.++ (re.+ (re.* (str.to_re "++"))) (re.++ (re.* (re.+ (str.to_re ","))) (re.++ (re.* (re.union (str.to_re "---") (str.to_re ".."))) (re.++ (re.+ (re.* (str.to_re "/"))) (re.++ (re.union (re.+ (str.to_re ":")) (re.+ (str.to_re ";;;"))) (re.++ (re.* (re.union (str.to_re "<<") (str.to_re "="))) (re.++ (re.* (re.union (str.to_re ">>") (str.to_re "??"))) (re.++ (re.union (re.union (str.to_re "@@@") (str.to_re "[[[")) (re.union (str.to_re "\\\\\\") (str.to_re "]]"))) (re.++ (re.union (re.union (str.to_re "^^^") (str.to_re "__")) (re.* (str.to_re "```"))) (re.++ (re.+ (re.* (str.to_re "{"))) (re.++ (re.* (re.* (str.to_re "|"))) (re.++ (re.+ (re.union (str.to_re "}}}") (str.to_re "~~"))) (re.++ (re.* (re.union (str.to_re "0") (str.to_re "11"))) (re.* (re.+ (str.to_re "222")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
