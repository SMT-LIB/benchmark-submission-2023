(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "1"))) (re.++ (re.+ (re.+ (str.to_re "22"))) (re.++ (re.* (re.* (str.to_re "33"))) (re.++ (re.* (re.+ (str.to_re "44"))) (re.++ (re.union (re.* (str.to_re "55")) (re.* (str.to_re "66"))) (re.++ (re.union (re.+ (str.to_re "7")) (re.union (str.to_re "8") (str.to_re "999"))) (re.++ (re.+ (re.* (str.to_re "a"))) (re.++ (re.+ (re.union (str.to_re "bb") (str.to_re "c"))) (re.++ (re.* (re.* (str.to_re "ddd"))) (re.++ (re.+ (re.* (str.to_re "eee"))) (re.++ (re.union (re.+ (str.to_re "fff")) (re.+ (str.to_re "g"))) (re.++ (re.union (re.* (str.to_re "h")) (re.union (str.to_re "ii") (str.to_re "j"))) (re.++ (re.+ (re.union (str.to_re "kk") (str.to_re "lll"))) (re.++ (re.+ (re.union (str.to_re "m") (str.to_re "nn"))) (re.++ (re.union (re.+ (str.to_re "oo")) (re.+ (str.to_re "pp"))) (re.++ (re.+ (re.union (str.to_re "q") (str.to_re "rrr"))) (re.++ (re.+ (re.union (str.to_re "sss") (str.to_re "tt"))) (re.++ (re.union (re.union (str.to_re "u") (str.to_re "v")) (re.* (str.to_re "www"))) (re.++ (re.* (re.union (str.to_re "xx") (str.to_re "yyy"))) (re.++ (re.union (re.* (str.to_re "z")) (re.union (str.to_re "A") (str.to_re "B"))) (re.++ (re.+ (re.* (str.to_re "CC"))) (re.++ (re.* (re.* (str.to_re "DDD"))) (re.++ (re.* (re.union (str.to_re "EEE") (str.to_re "FFF"))) (re.++ (re.+ (re.* (str.to_re "GG"))) (re.++ (re.+ (re.union (str.to_re "HH") (str.to_re "I"))) (re.++ (re.union (re.union (str.to_re "JJJ") (str.to_re "K")) (re.+ (str.to_re "L"))) (re.++ (re.+ (re.+ (str.to_re "MMM"))) (re.++ (re.union (re.+ (str.to_re "NN")) (re.+ (str.to_re "O"))) (re.++ (re.+ (re.+ (str.to_re "PPP"))) (re.++ (re.union (re.* (str.to_re "Q")) (re.* (str.to_re "RR"))) (re.++ (re.union (re.* (str.to_re "SS")) (re.+ (str.to_re "TT"))) (re.++ (re.+ (re.+ (str.to_re "UU"))) (re.++ (re.* (re.+ (str.to_re "VV"))) (re.++ (re.* (re.+ (str.to_re "WWW"))) (re.++ (re.union (re.+ (str.to_re "X")) (re.+ (str.to_re "YYY"))) (re.++ (re.* (re.* (str.to_re "ZZ"))) (re.++ (re.union (re.* (str.to_re "!")) (re.* (str.to_re """"))) (re.++ (re.union (re.* (str.to_re "##")) (re.+ (str.to_re "$$$"))) (re.++ (re.* (re.union (str.to_re "%%") (str.to_re "&&&"))) (re.++ (re.* (re.union (str.to_re "'''") (str.to_re "(("))) (re.++ (re.union (re.union (str.to_re "))") (str.to_re "*")) (re.* (str.to_re "+"))) (re.++ (re.union (re.+ (str.to_re ",,")) (re.union (str.to_re "---") (str.to_re ".."))) (re.++ (re.union (re.union (str.to_re "///") (str.to_re "::")) (re.+ (str.to_re ";;;"))) (re.++ (re.+ (re.* (str.to_re "<"))) (re.++ (re.union (re.* (str.to_re "===")) (re.+ (str.to_re ">>>"))) (re.++ (re.+ (re.union (str.to_re "??") (str.to_re "@@@"))) (re.++ (re.* (re.+ (str.to_re "[["))) (re.++ (re.* (re.* (str.to_re "\\"))) (re.++ (re.union (re.+ (str.to_re "]]")) (re.* (str.to_re "^"))) (re.* (re.union (str.to_re "_") (str.to_re "```"))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
