(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "0"))) (re.++ (re.+ (re.* (str.to_re "1"))) (re.++ (re.+ (re.* (str.to_re "222"))) (re.++ (re.* (re.union (str.to_re "3") (str.to_re "44"))) (re.++ (re.+ (re.union (str.to_re "55") (str.to_re "66"))) (re.++ (re.union (re.union (str.to_re "7") (str.to_re "88")) (re.union (str.to_re "9") (str.to_re "aaa"))) (re.++ (re.union (re.* (str.to_re "bbb")) (re.union (str.to_re "ccc") (str.to_re "dd"))) (re.++ (re.* (re.* (str.to_re "eee"))) (re.++ (re.+ (re.* (str.to_re "ff"))) (re.++ (re.+ (re.* (str.to_re "g"))) (re.++ (re.union (re.+ (str.to_re "hh")) (re.* (str.to_re "iii"))) (re.++ (re.+ (re.union (str.to_re "jj") (str.to_re "kk"))) (re.++ (re.+ (re.+ (str.to_re "l"))) (re.++ (re.union (re.* (str.to_re "mmm")) (re.union (str.to_re "n") (str.to_re "ooo"))) (re.++ (re.union (re.* (str.to_re "ppp")) (re.+ (str.to_re "qq"))) (re.++ (re.+ (re.* (str.to_re "rrr"))) (re.++ (re.* (re.+ (str.to_re "ss"))) (re.++ (re.union (re.+ (str.to_re "tt")) (re.* (str.to_re "uuu"))) (re.++ (re.* (re.+ (str.to_re "v"))) (re.++ (re.* (re.union (str.to_re "ww") (str.to_re "xx"))) (re.++ (re.* (re.+ (str.to_re "yy"))) (re.++ (re.union (re.+ (str.to_re "zz")) (re.* (str.to_re "AA"))) (re.++ (re.union (re.* (str.to_re "BBB")) (re.* (str.to_re "CC"))) (re.++ (re.union (re.* (str.to_re "DD")) (re.+ (str.to_re "EE"))) (re.++ (re.union (re.union (str.to_re "F") (str.to_re "G")) (re.union (str.to_re "HH") (str.to_re "II"))) (re.++ (re.* (re.union (str.to_re "JJ") (str.to_re "K"))) (re.++ (re.+ (re.union (str.to_re "LLL") (str.to_re "MMM"))) (re.++ (re.+ (re.+ (str.to_re "N"))) (re.++ (re.* (re.union (str.to_re "O") (str.to_re "PPP"))) (re.++ (re.* (re.union (str.to_re "Q") (str.to_re "RR"))) (re.++ (re.+ (re.union (str.to_re "SS") (str.to_re "TT"))) (re.++ (re.* (re.union (str.to_re "UU") (str.to_re "VVV"))) (re.++ (re.+ (re.* (str.to_re "W"))) (re.++ (re.* (re.* (str.to_re "XX"))) (re.++ (re.* (re.+ (str.to_re "Y"))) (re.++ (re.union (re.union (str.to_re "Z") (str.to_re "!!!")) (re.+ (str.to_re """"))) (re.++ (re.+ (re.union (str.to_re "##") (str.to_re "$$$"))) (re.++ (re.+ (re.* (str.to_re "%"))) (re.++ (re.* (re.union (str.to_re "&&") (str.to_re "''"))) (re.++ (re.* (re.union (str.to_re "((") (str.to_re ")"))) (re.++ (re.+ (re.* (str.to_re "**"))) (re.++ (re.+ (re.* (str.to_re "++"))) (re.* (re.* (str.to_re ",")))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
