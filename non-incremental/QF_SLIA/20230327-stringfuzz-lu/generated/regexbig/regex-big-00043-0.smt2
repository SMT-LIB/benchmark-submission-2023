(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "000"))) (re.++ (re.union (re.union (str.to_re "1") (str.to_re "2")) (re.* (str.to_re "3"))) (re.++ (re.* (re.union (str.to_re "444") (str.to_re "5"))) (re.++ (re.+ (re.+ (str.to_re "666"))) (re.++ (re.union (re.+ (str.to_re "77")) (re.union (str.to_re "8") (str.to_re "99"))) (re.++ (re.+ (re.union (str.to_re "aa") (str.to_re "bbb"))) (re.++ (re.+ (re.* (str.to_re "ccc"))) (re.++ (re.* (re.+ (str.to_re "d"))) (re.++ (re.* (re.+ (str.to_re "eee"))) (re.++ (re.+ (re.union (str.to_re "f") (str.to_re "gg"))) (re.++ (re.* (re.+ (str.to_re "hhh"))) (re.++ (re.union (re.+ (str.to_re "i")) (re.* (str.to_re "jj"))) (re.++ (re.union (re.union (str.to_re "kkk") (str.to_re "ll")) (re.* (str.to_re "mm"))) (re.++ (re.+ (re.* (str.to_re "nnn"))) (re.++ (re.+ (re.+ (str.to_re "oo"))) (re.++ (re.+ (re.* (str.to_re "p"))) (re.++ (re.+ (re.+ (str.to_re "qq"))) (re.++ (re.union (re.* (str.to_re "rr")) (re.union (str.to_re "s") (str.to_re "t"))) (re.++ (re.+ (re.* (str.to_re "u"))) (re.++ (re.* (re.+ (str.to_re "vv"))) (re.++ (re.+ (re.* (str.to_re "w"))) (re.++ (re.+ (re.+ (str.to_re "xx"))) (re.++ (re.* (re.union (str.to_re "yyy") (str.to_re "z"))) (re.++ (re.+ (re.* (str.to_re "AA"))) (re.++ (re.union (re.* (str.to_re "BB")) (re.* (str.to_re "C"))) (re.++ (re.union (re.* (str.to_re "D")) (re.+ (str.to_re "E"))) (re.++ (re.union (re.* (str.to_re "F")) (re.* (str.to_re "GG"))) (re.++ (re.+ (re.* (str.to_re "H"))) (re.++ (re.* (re.* (str.to_re "III"))) (re.++ (re.+ (re.* (str.to_re "JJ"))) (re.++ (re.+ (re.* (str.to_re "KK"))) (re.++ (re.+ (re.* (str.to_re "LLL"))) (re.++ (re.* (re.+ (str.to_re "M"))) (re.++ (re.* (re.union (str.to_re "NN") (str.to_re "OO"))) (re.++ (re.* (re.+ (str.to_re "PP"))) (re.++ (re.union (re.+ (str.to_re "QQQ")) (re.union (str.to_re "R") (str.to_re "SS"))) (re.++ (re.+ (re.+ (str.to_re "TTT"))) (re.++ (re.* (re.* (str.to_re "UUU"))) (re.++ (re.* (re.+ (str.to_re "VV"))) (re.++ (re.union (re.union (str.to_re "WWW") (str.to_re "XX")) (re.+ (str.to_re "YY"))) (re.++ (re.+ (re.+ (str.to_re "ZZ"))) (re.++ (re.union (re.* (str.to_re "!")) (re.* (str.to_re """"))) (re.+ (re.union (str.to_re "#") (str.to_re "$")))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
