(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (str.to_re "000")) (re.+ (str.to_re "11"))) (re.++ (re.union (re.* (str.to_re "222")) (re.union (str.to_re "3") (str.to_re "4"))) (re.++ (re.+ (re.+ (str.to_re "555"))) (re.++ (re.union (re.union (str.to_re "66") (str.to_re "777")) (re.union (str.to_re "888") (str.to_re "99"))) (re.++ (re.+ (re.union (str.to_re "a") (str.to_re "bb"))) (re.++ (re.+ (re.* (str.to_re "ccc"))) (re.++ (re.union (re.union (str.to_re "dd") (str.to_re "e")) (re.* (str.to_re "fff"))) (re.++ (re.* (re.* (str.to_re "gg"))) (re.++ (re.* (re.union (str.to_re "hhh") (str.to_re "i"))) (re.++ (re.+ (re.* (str.to_re "jjj"))) (re.++ (re.+ (re.union (str.to_re "kk") (str.to_re "l"))) (re.++ (re.+ (re.* (str.to_re "m"))) (re.++ (re.+ (re.+ (str.to_re "nnn"))) (re.++ (re.union (re.+ (str.to_re "ooo")) (re.* (str.to_re "ppp"))) (re.++ (re.union (re.* (str.to_re "q")) (re.* (str.to_re "rrr"))) (re.++ (re.union (re.union (str.to_re "s") (str.to_re "ttt")) (re.* (str.to_re "u"))) (re.++ (re.* (re.union (str.to_re "v") (str.to_re "ww"))) (re.++ (re.* (re.* (str.to_re "x"))) (re.++ (re.* (re.* (str.to_re "yy"))) (re.++ (re.* (re.+ (str.to_re "z"))) (re.++ (re.* (re.union (str.to_re "AA") (str.to_re "B"))) (re.++ (re.* (re.+ (str.to_re "CC"))) (re.++ (re.* (re.+ (str.to_re "DDD"))) (re.++ (re.union (re.+ (str.to_re "EEE")) (re.union (str.to_re "FFF") (str.to_re "GG"))) (re.++ (re.* (re.union (str.to_re "HHH") (str.to_re "I"))) (re.++ (re.union (re.+ (str.to_re "J")) (re.* (str.to_re "K"))) (re.++ (re.+ (re.+ (str.to_re "L"))) (re.++ (re.union (re.* (str.to_re "MMM")) (re.+ (str.to_re "NNN"))) (re.++ (re.* (re.union (str.to_re "OOO") (str.to_re "PPP"))) (re.++ (re.union (re.+ (str.to_re "Q")) (re.* (str.to_re "RR"))) (re.++ (re.union (re.* (str.to_re "SS")) (re.+ (str.to_re "TT"))) (re.++ (re.* (re.* (str.to_re "UU"))) (re.++ (re.union (re.* (str.to_re "VV")) (re.* (str.to_re "WWW"))) (re.++ (re.union (re.+ (str.to_re "XXX")) (re.+ (str.to_re "YY"))) (re.++ (re.* (re.* (str.to_re "Z"))) (re.++ (re.+ (re.* (str.to_re "!!!"))) (re.++ (re.+ (re.union (str.to_re """""") (str.to_re "#"))) (re.++ (re.* (re.+ (str.to_re "$"))) (re.++ (re.* (re.union (str.to_re "%") (str.to_re "&&"))) (re.++ (re.* (re.union (str.to_re "''") (str.to_re "((("))) (re.++ (re.+ (re.union (str.to_re "))") (str.to_re "***"))) (re.++ (re.union (re.union (str.to_re "+") (str.to_re ",,")) (re.+ (str.to_re "---"))) (re.++ (re.* (re.* (str.to_re "."))) (re.++ (re.* (re.+ (str.to_re "///"))) (re.++ (re.+ (re.+ (str.to_re "::"))) (re.++ (re.* (re.union (str.to_re ";;") (str.to_re "<<"))) (re.++ (re.+ (re.* (str.to_re "=="))) (re.++ (re.union (re.union (str.to_re ">") (str.to_re "??")) (re.* (str.to_re "@@@"))) (re.++ (re.union (re.* (str.to_re "[[[")) (re.union (str.to_re "\\") (str.to_re "]]"))) (re.++ (re.union (re.+ (str.to_re "^^^")) (re.* (str.to_re "___"))) (re.++ (re.union (re.+ (str.to_re "```")) (re.union (str.to_re "{{") (str.to_re "|||"))) (re.++ (re.+ (re.union (str.to_re "}") (str.to_re "~~~"))) (re.++ (re.+ (re.* (str.to_re "0"))) (re.++ (re.union (re.union (str.to_re "111") (str.to_re "22")) (re.union (str.to_re "333") (str.to_re "4"))) (re.++ (re.union (re.+ (str.to_re "55")) (re.* (str.to_re "6"))) (re.++ (re.+ (re.+ (str.to_re "77"))) (re.union (re.+ (str.to_re "8")) (re.+ (str.to_re "999")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
