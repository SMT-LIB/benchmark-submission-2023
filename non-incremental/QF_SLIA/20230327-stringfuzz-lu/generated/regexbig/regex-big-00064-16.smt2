(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "0"))) (re.++ (re.* (re.union (str.to_re "111") (str.to_re "222"))) (re.++ (re.union (re.* (str.to_re "3")) (re.* (str.to_re "4"))) (re.++ (re.* (re.+ (str.to_re "5"))) (re.++ (re.union (re.union (str.to_re "66") (str.to_re "77")) (re.+ (str.to_re "88"))) (re.++ (re.+ (re.+ (str.to_re "999"))) (re.++ (re.+ (re.union (str.to_re "aa") (str.to_re "b"))) (re.++ (re.* (re.union (str.to_re "cc") (str.to_re "d"))) (re.++ (re.* (re.union (str.to_re "ee") (str.to_re "ff"))) (re.++ (re.* (re.union (str.to_re "gg") (str.to_re "hhh"))) (re.++ (re.+ (re.* (str.to_re "ii"))) (re.++ (re.* (re.union (str.to_re "j") (str.to_re "k"))) (re.++ (re.+ (re.union (str.to_re "ll") (str.to_re "m"))) (re.++ (re.* (re.union (str.to_re "n") (str.to_re "oo"))) (re.++ (re.* (re.+ (str.to_re "p"))) (re.++ (re.* (re.+ (str.to_re "qqq"))) (re.++ (re.union (re.* (str.to_re "r")) (re.union (str.to_re "ss") (str.to_re "t"))) (re.++ (re.union (re.union (str.to_re "uuu") (str.to_re "vv")) (re.+ (str.to_re "www"))) (re.++ (re.+ (re.+ (str.to_re "xx"))) (re.++ (re.+ (re.+ (str.to_re "yyy"))) (re.++ (re.+ (re.union (str.to_re "z") (str.to_re "AA"))) (re.++ (re.* (re.* (str.to_re "B"))) (re.++ (re.* (re.union (str.to_re "C") (str.to_re "DD"))) (re.++ (re.+ (re.* (str.to_re "EEE"))) (re.++ (re.union (re.* (str.to_re "FF")) (re.* (str.to_re "GGG"))) (re.++ (re.union (re.* (str.to_re "H")) (re.union (str.to_re "III") (str.to_re "JJ"))) (re.++ (re.+ (re.union (str.to_re "KK") (str.to_re "LLL"))) (re.++ (re.union (re.+ (str.to_re "M")) (re.union (str.to_re "NN") (str.to_re "OOO"))) (re.++ (re.union (re.union (str.to_re "P") (str.to_re "QQ")) (re.+ (str.to_re "R"))) (re.++ (re.+ (re.+ (str.to_re "SS"))) (re.++ (re.+ (re.* (str.to_re "TTT"))) (re.++ (re.union (re.* (str.to_re "UU")) (re.* (str.to_re "VV"))) (re.++ (re.* (re.union (str.to_re "WWW") (str.to_re "X"))) (re.++ (re.* (re.* (str.to_re "YYY"))) (re.++ (re.+ (re.+ (str.to_re "Z"))) (re.++ (re.union (re.union (str.to_re "!!!") (str.to_re """""")) (re.* (str.to_re "##"))) (re.++ (re.* (re.+ (str.to_re "$"))) (re.++ (re.* (re.+ (str.to_re "%%%"))) (re.++ (re.+ (re.* (str.to_re "&&&"))) (re.++ (re.* (re.* (str.to_re "''"))) (re.++ (re.+ (re.union (str.to_re "((") (str.to_re ")))"))) (re.++ (re.+ (re.+ (str.to_re "**"))) (re.++ (re.+ (re.+ (str.to_re "+++"))) (re.++ (re.* (re.+ (str.to_re ",,,"))) (re.++ (re.+ (re.+ (str.to_re "-"))) (re.++ (re.union (re.union (str.to_re "...") (str.to_re "///")) (re.+ (str.to_re "::"))) (re.++ (re.* (re.+ (str.to_re ";;;"))) (re.++ (re.+ (re.union (str.to_re "<<") (str.to_re "=="))) (re.++ (re.+ (re.union (str.to_re ">>") (str.to_re "???"))) (re.++ (re.* (re.union (str.to_re "@@@") (str.to_re "[["))) (re.++ (re.+ (re.+ (str.to_re "\\\\"))) (re.++ (re.union (re.union (str.to_re "]") (str.to_re "^^")) (re.+ (str.to_re "___"))) (re.++ (re.* (re.* (str.to_re "`"))) (re.++ (re.union (re.* (str.to_re "{{{")) (re.+ (str.to_re "||"))) (re.++ (re.* (re.union (str.to_re "}}") (str.to_re "~~"))) (re.++ (re.+ (re.union (str.to_re "000") (str.to_re "111"))) (re.++ (re.union (re.* (str.to_re "22")) (re.union (str.to_re "333") (str.to_re "44"))) (re.++ (re.* (re.union (str.to_re "555") (str.to_re "6"))) (re.++ (re.union (re.* (str.to_re "7")) (re.+ (str.to_re "88"))) (re.++ (re.union (re.union (str.to_re "9") (str.to_re "aa")) (re.union (str.to_re "bbb") (str.to_re "c"))) (re.++ (re.union (re.+ (str.to_re "ddd")) (re.+ (str.to_re "e"))) (re.++ (re.+ (re.union (str.to_re "ff") (str.to_re "ggg"))) (re.++ (re.+ (re.+ (str.to_re "h"))) (re.+ (re.union (str.to_re "i") (str.to_re "jj"))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
