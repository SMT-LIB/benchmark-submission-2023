(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "1"))) (re.++ (re.+ (re.* (str.to_re "22"))) (re.++ (re.+ (re.+ (str.to_re "33"))) (re.++ (re.* (re.+ (str.to_re "4"))) (re.++ (re.union (re.union (str.to_re "55") (str.to_re "666")) (re.union (str.to_re "7") (str.to_re "8"))) (re.++ (re.union (re.* (str.to_re "999")) (re.* (str.to_re "aaa"))) (re.++ (re.union (re.+ (str.to_re "bb")) (re.union (str.to_re "cc") (str.to_re "d"))) (re.++ (re.+ (re.union (str.to_re "ee") (str.to_re "fff"))) (re.++ (re.+ (re.+ (str.to_re "ggg"))) (re.++ (re.union (re.* (str.to_re "hh")) (re.union (str.to_re "ii") (str.to_re "jj"))) (re.++ (re.union (re.* (str.to_re "kkk")) (re.* (str.to_re "l"))) (re.++ (re.union (re.+ (str.to_re "m")) (re.union (str.to_re "nnn") (str.to_re "oo"))) (re.++ (re.+ (re.* (str.to_re "ppp"))) (re.++ (re.+ (re.+ (str.to_re "q"))) (re.++ (re.union (re.+ (str.to_re "rrr")) (re.union (str.to_re "ss") (str.to_re "t"))) (re.++ (re.* (re.* (str.to_re "u"))) (re.++ (re.union (re.* (str.to_re "vvv")) (re.+ (str.to_re "www"))) (re.++ (re.union (re.+ (str.to_re "x")) (re.+ (str.to_re "yyy"))) (re.++ (re.+ (re.+ (str.to_re "z"))) (re.++ (re.+ (re.* (str.to_re "A"))) (re.++ (re.* (re.union (str.to_re "BBB") (str.to_re "CC"))) (re.++ (re.+ (re.* (str.to_re "D"))) (re.++ (re.* (re.+ (str.to_re "E"))) (re.++ (re.+ (re.union (str.to_re "F") (str.to_re "GG"))) (re.++ (re.+ (re.* (str.to_re "H"))) (re.++ (re.union (re.+ (str.to_re "I")) (re.* (str.to_re "JJ"))) (re.++ (re.union (re.* (str.to_re "KK")) (re.+ (str.to_re "LLL"))) (re.++ (re.+ (re.+ (str.to_re "MMM"))) (re.++ (re.+ (re.* (str.to_re "NN"))) (re.++ (re.* (re.* (str.to_re "OOO"))) (re.++ (re.union (re.* (str.to_re "PP")) (re.+ (str.to_re "QQ"))) (re.++ (re.* (re.* (str.to_re "R"))) (re.++ (re.union (re.+ (str.to_re "S")) (re.+ (str.to_re "TTT"))) (re.++ (re.union (re.* (str.to_re "UU")) (re.+ (str.to_re "VV"))) (re.++ (re.+ (re.* (str.to_re "WWW"))) (re.++ (re.+ (re.* (str.to_re "XXX"))) (re.++ (re.union (re.union (str.to_re "YY") (str.to_re "ZZ")) (re.* (str.to_re "!"))) (re.++ (re.* (re.+ (str.to_re """"))) (re.++ (re.+ (re.union (str.to_re "##") (str.to_re "$$$"))) (re.++ (re.* (re.+ (str.to_re "%%"))) (re.++ (re.+ (re.+ (str.to_re "&"))) (re.++ (re.+ (re.union (str.to_re "'''") (str.to_re "(("))) (re.* (re.* (str.to_re ")")))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
