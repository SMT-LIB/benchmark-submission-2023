(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "00"))) (re.++ (re.union (re.+ (str.to_re "1")) (re.* (str.to_re "2"))) (re.++ (re.+ (re.* (str.to_re "33"))) (re.++ (re.+ (re.* (str.to_re "44"))) (re.++ (re.+ (re.+ (str.to_re "5"))) (re.++ (re.union (re.+ (str.to_re "666")) (re.+ (str.to_re "7"))) (re.++ (re.* (re.union (str.to_re "888") (str.to_re "9"))) (re.++ (re.* (re.+ (str.to_re "aaa"))) (re.++ (re.+ (re.union (str.to_re "bbb") (str.to_re "ccc"))) (re.++ (re.+ (re.union (str.to_re "ddd") (str.to_re "ee"))) (re.++ (re.+ (re.* (str.to_re "ff"))) (re.++ (re.* (re.+ (str.to_re "gg"))) (re.++ (re.union (re.+ (str.to_re "h")) (re.* (str.to_re "iii"))) (re.++ (re.union (re.union (str.to_re "j") (str.to_re "k")) (re.* (str.to_re "ll"))) (re.++ (re.+ (re.+ (str.to_re "mm"))) (re.++ (re.union (re.union (str.to_re "nn") (str.to_re "oo")) (re.+ (str.to_re "pp"))) (re.++ (re.union (re.union (str.to_re "qqq") (str.to_re "rrr")) (re.+ (str.to_re "ss"))) (re.++ (re.* (re.union (str.to_re "tt") (str.to_re "uuu"))) (re.++ (re.+ (re.union (str.to_re "v") (str.to_re "www"))) (re.++ (re.union (re.+ (str.to_re "xx")) (re.+ (str.to_re "y"))) (re.++ (re.union (re.* (str.to_re "zz")) (re.+ (str.to_re "A"))) (re.++ (re.* (re.+ (str.to_re "BB"))) (re.++ (re.union (re.union (str.to_re "C") (str.to_re "D")) (re.union (str.to_re "EEE") (str.to_re "F"))) (re.++ (re.+ (re.union (str.to_re "G") (str.to_re "HH"))) (re.++ (re.union (re.* (str.to_re "I")) (re.union (str.to_re "JJJ") (str.to_re "KKK"))) (re.++ (re.* (re.+ (str.to_re "L"))) (re.++ (re.+ (re.union (str.to_re "MMM") (str.to_re "NN"))) (re.++ (re.+ (re.union (str.to_re "OOO") (str.to_re "P"))) (re.++ (re.+ (re.+ (str.to_re "Q"))) (re.++ (re.union (re.* (str.to_re "RR")) (re.* (str.to_re "S"))) (re.++ (re.union (re.union (str.to_re "TT") (str.to_re "U")) (re.+ (str.to_re "VVV"))) (re.++ (re.union (re.* (str.to_re "W")) (re.union (str.to_re "XX") (str.to_re "Y"))) (re.++ (re.union (re.+ (str.to_re "ZZZ")) (re.union (str.to_re "!!!") (str.to_re """"""))) (re.++ (re.+ (re.+ (str.to_re "##"))) (re.++ (re.* (re.* (str.to_re "$$$"))) (re.++ (re.* (re.union (str.to_re "%") (str.to_re "&&"))) (re.++ (re.* (re.union (str.to_re "''") (str.to_re "((("))) (re.++ (re.* (re.+ (str.to_re ")"))) (re.++ (re.union (re.* (str.to_re "**")) (re.+ (str.to_re "+++"))) (re.++ (re.union (re.+ (str.to_re ",,,")) (re.union (str.to_re "-") (str.to_re "."))) (re.++ (re.union (re.* (str.to_re "/")) (re.* (str.to_re ":::"))) (re.++ (re.* (re.union (str.to_re ";;;") (str.to_re "<<<"))) (re.++ (re.union (re.union (str.to_re "===") (str.to_re ">")) (re.union (str.to_re "???") (str.to_re "@"))) (re.++ (re.union (re.* (str.to_re "[")) (re.* (str.to_re "\\\\"))) (re.++ (re.+ (re.+ (str.to_re "]"))) (re.++ (re.* (re.+ (str.to_re "^^^"))) (re.++ (re.union (re.+ (str.to_re "___")) (re.+ (str.to_re "```"))) (re.++ (re.+ (re.+ (str.to_re "{{"))) (re.++ (re.* (re.* (str.to_re "||"))) (re.++ (re.union (re.+ (str.to_re "}}}")) (re.union (str.to_re "~") (str.to_re "00"))) (re.++ (re.* (re.union (str.to_re "111") (str.to_re "222"))) (re.++ (re.union (re.+ (str.to_re "3")) (re.* (str.to_re "4"))) (re.++ (re.* (re.+ (str.to_re "555"))) (re.++ (re.+ (re.+ (str.to_re "6"))) (re.++ (re.* (re.union (str.to_re "77") (str.to_re "88"))) (re.++ (re.* (re.+ (str.to_re "9"))) (re.+ (re.+ (str.to_re "aa")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
