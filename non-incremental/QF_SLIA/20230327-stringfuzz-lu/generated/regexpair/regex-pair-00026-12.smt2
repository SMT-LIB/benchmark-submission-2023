(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "0"))) (re.++ (re.* (re.+ (str.to_re "111"))) (re.++ (re.* (re.union (str.to_re "2") (str.to_re "333"))) (re.++ (re.* (re.* (str.to_re "4"))) (re.++ (re.union (re.union (str.to_re "5") (str.to_re "6")) (re.union (str.to_re "7") (str.to_re "8"))) (re.++ (re.union (re.* (str.to_re "999")) (re.* (str.to_re "aaa"))) (re.++ (re.union (re.* (str.to_re "b")) (re.* (str.to_re "c"))) (re.++ (re.* (re.union (str.to_re "d") (str.to_re "e"))) (re.++ (re.+ (re.* (str.to_re "fff"))) (re.++ (re.union (re.* (str.to_re "g")) (re.union (str.to_re "hh") (str.to_re "ii"))) (re.++ (re.+ (re.+ (str.to_re "j"))) (re.++ (re.+ (re.union (str.to_re "k") (str.to_re "l"))) (re.++ (re.+ (re.union (str.to_re "mm") (str.to_re "nnn"))) (re.++ (re.union (re.* (str.to_re "ooo")) (re.union (str.to_re "ppp") (str.to_re "qqq"))) (re.++ (re.+ (re.union (str.to_re "rr") (str.to_re "ss"))) (re.++ (re.+ (re.* (str.to_re "tt"))) (re.++ (re.* (re.union (str.to_re "uuu") (str.to_re "v"))) (re.++ (re.union (re.+ (str.to_re "ww")) (re.* (str.to_re "x"))) (re.++ (re.* (re.* (str.to_re "y"))) (re.++ (re.+ (re.+ (str.to_re "zz"))) (re.++ (re.union (re.* (str.to_re "AAA")) (re.+ (str.to_re "BB"))) (re.++ (re.* (re.* (str.to_re "CCC"))) (re.++ (re.* (re.+ (str.to_re "D"))) (re.++ (re.union (re.* (str.to_re "EEE")) (re.union (str.to_re "FFF") (str.to_re "GG"))) (re.++ (re.* (re.+ (str.to_re "HH"))) (re.* (re.+ (str.to_re "III"))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.* (re.union (str.to_re "000") (str.to_re "111"))) (re.++ (re.* (re.+ (str.to_re "22"))) (re.++ (re.union (re.+ (str.to_re "333")) (re.* (str.to_re "444"))) (re.++ (re.* (re.+ (str.to_re "55"))) (re.++ (re.+ (re.+ (str.to_re "666"))) (re.++ (re.union (re.union (str.to_re "777") (str.to_re "8")) (re.+ (str.to_re "999"))) (re.++ (re.+ (re.+ (str.to_re "aa"))) (re.++ (re.* (re.union (str.to_re "b") (str.to_re "ccc"))) (re.++ (re.+ (re.* (str.to_re "ddd"))) (re.++ (re.+ (re.* (str.to_re "ee"))) (re.++ (re.* (re.+ (str.to_re "f"))) (re.++ (re.+ (re.* (str.to_re "g"))) (re.++ (re.* (re.* (str.to_re "hh"))) (re.++ (re.* (re.* (str.to_re "iii"))) (re.++ (re.+ (re.+ (str.to_re "j"))) (re.++ (re.+ (re.union (str.to_re "kkk") (str.to_re "lll"))) (re.++ (re.+ (re.* (str.to_re "mmm"))) (re.++ (re.union (re.union (str.to_re "nnn") (str.to_re "oo")) (re.union (str.to_re "p") (str.to_re "qqq"))) (re.++ (re.union (re.union (str.to_re "rr") (str.to_re "sss")) (re.union (str.to_re "t") (str.to_re "u"))) (re.++ (re.union (re.+ (str.to_re "vvv")) (re.union (str.to_re "www") (str.to_re "xx"))) (re.++ (re.+ (re.+ (str.to_re "y"))) (re.++ (re.union (re.union (str.to_re "zz") (str.to_re "AA")) (re.union (str.to_re "BBB") (str.to_re "CC"))) (re.++ (re.+ (re.+ (str.to_re "D"))) (re.++ (re.* (re.union (str.to_re "E") (str.to_re "F"))) (re.++ (re.* (re.union (str.to_re "GG") (str.to_re "HHH"))) (re.+ (re.* (str.to_re "II")))))))))))))))))))))))))))))))
(check-sat)
(exit)
