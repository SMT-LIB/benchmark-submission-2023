(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.union (str.to_re "0") (str.to_re "11")) (re.union (str.to_re "22") (str.to_re "333"))) (re.++ (re.* (re.union (str.to_re "444") (str.to_re "555"))) (re.++ (re.* (re.+ (str.to_re "666"))) (re.++ (re.union (re.union (str.to_re "77") (str.to_re "888")) (re.+ (str.to_re "9"))) (re.++ (re.* (re.* (str.to_re "aaa"))) (re.++ (re.* (re.+ (str.to_re "b"))) (re.++ (re.union (re.union (str.to_re "ccc") (str.to_re "ddd")) (re.* (str.to_re "e"))) (re.++ (re.* (re.union (str.to_re "fff") (str.to_re "g"))) (re.++ (re.* (re.+ (str.to_re "h"))) (re.++ (re.+ (re.+ (str.to_re "i"))) (re.++ (re.+ (re.* (str.to_re "jj"))) (re.++ (re.* (re.union (str.to_re "k") (str.to_re "l"))) (re.++ (re.+ (re.* (str.to_re "m"))) (re.++ (re.* (re.* (str.to_re "n"))) (re.++ (re.* (re.* (str.to_re "ooo"))) (re.++ (re.* (re.union (str.to_re "ppp") (str.to_re "qqq"))) (re.++ (re.+ (re.union (str.to_re "rrr") (str.to_re "ss"))) (re.++ (re.+ (re.+ (str.to_re "ttt"))) (re.++ (re.union (re.* (str.to_re "uu")) (re.+ (str.to_re "vvv"))) (re.++ (re.union (re.* (str.to_re "ww")) (re.* (str.to_re "xx"))) (re.++ (re.+ (re.union (str.to_re "y") (str.to_re "z"))) (re.++ (re.+ (re.+ (str.to_re "AA"))) (re.++ (re.union (re.* (str.to_re "BB")) (re.union (str.to_re "CCC") (str.to_re "DDD"))) (re.++ (re.* (re.union (str.to_re "EEE") (str.to_re "FF"))) (re.++ (re.+ (re.* (str.to_re "G"))) (re.++ (re.* (re.* (str.to_re "H"))) (re.++ (re.* (re.union (str.to_re "I") (str.to_re "JJJ"))) (re.++ (re.* (re.+ (str.to_re "KKK"))) (re.++ (re.union (re.union (str.to_re "L") (str.to_re "MM")) (re.* (str.to_re "NNN"))) (re.++ (re.union (re.+ (str.to_re "OO")) (re.* (str.to_re "P"))) (re.++ (re.* (re.+ (str.to_re "Q"))) (re.++ (re.+ (re.union (str.to_re "RRR") (str.to_re "SSS"))) (re.++ (re.* (re.+ (str.to_re "T"))) (re.++ (re.* (re.union (str.to_re "U") (str.to_re "VVV"))) (re.++ (re.union (re.+ (str.to_re "WW")) (re.+ (str.to_re "X"))) (re.++ (re.+ (re.+ (str.to_re "Y"))) (re.++ (re.union (re.* (str.to_re "ZZ")) (re.+ (str.to_re "!!"))) (re.++ (re.* (re.+ (str.to_re """"""))) (re.++ (re.union (re.union (str.to_re "###") (str.to_re "$$$")) (re.+ (str.to_re "%"))) (re.++ (re.* (re.union (str.to_re "&") (str.to_re "'''"))) (re.+ (re.union (str.to_re "(((") (str.to_re "))")))))))))))))))))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "1"))) (re.++ (re.union (re.* (str.to_re "2")) (re.union (str.to_re "33") (str.to_re "4"))) (re.++ (re.union (re.+ (str.to_re "5")) (re.* (str.to_re "666"))) (re.++ (re.* (re.union (str.to_re "777") (str.to_re "88"))) (re.++ (re.union (re.+ (str.to_re "99")) (re.union (str.to_re "aa") (str.to_re "b"))) (re.++ (re.* (re.union (str.to_re "c") (str.to_re "ddd"))) (re.++ (re.+ (re.+ (str.to_re "e"))) (re.++ (re.+ (re.+ (str.to_re "fff"))) (re.++ (re.* (re.union (str.to_re "g") (str.to_re "hhh"))) (re.++ (re.* (re.+ (str.to_re "ii"))) (re.++ (re.* (re.union (str.to_re "jj") (str.to_re "kkk"))) (re.++ (re.* (re.union (str.to_re "ll") (str.to_re "m"))) (re.++ (re.+ (re.union (str.to_re "nnn") (str.to_re "o"))) (re.++ (re.+ (re.+ (str.to_re "pp"))) (re.++ (re.+ (re.+ (str.to_re "qqq"))) (re.++ (re.* (re.+ (str.to_re "rr"))) (re.++ (re.* (re.+ (str.to_re "ss"))) (re.++ (re.* (re.union (str.to_re "tt") (str.to_re "uu"))) (re.++ (re.* (re.* (str.to_re "v"))) (re.++ (re.* (re.union (str.to_re "ww") (str.to_re "x"))) (re.++ (re.+ (re.union (str.to_re "y") (str.to_re "zzz"))) (re.++ (re.* (re.+ (str.to_re "AAA"))) (re.++ (re.+ (re.union (str.to_re "BBB") (str.to_re "CC"))) (re.++ (re.union (re.union (str.to_re "DD") (str.to_re "EE")) (re.+ (str.to_re "F"))) (re.++ (re.* (re.union (str.to_re "G") (str.to_re "HHH"))) (re.++ (re.+ (re.* (str.to_re "I"))) (re.++ (re.+ (re.* (str.to_re "JJ"))) (re.++ (re.* (re.* (str.to_re "KK"))) (re.++ (re.union (re.union (str.to_re "LLL") (str.to_re "MM")) (re.* (str.to_re "NNN"))) (re.++ (re.+ (re.union (str.to_re "OOO") (str.to_re "P"))) (re.++ (re.+ (re.union (str.to_re "QQ") (str.to_re "RR"))) (re.++ (re.union (re.* (str.to_re "S")) (re.union (str.to_re "T") (str.to_re "UU"))) (re.++ (re.+ (re.+ (str.to_re "VV"))) (re.++ (re.* (re.union (str.to_re "W") (str.to_re "X"))) (re.++ (re.* (re.+ (str.to_re "YYY"))) (re.++ (re.* (re.+ (str.to_re "ZZ"))) (re.++ (re.union (re.union (str.to_re "!") (str.to_re """")) (re.union (str.to_re "#") (str.to_re "$"))) (re.++ (re.* (re.union (str.to_re "%%%") (str.to_re "&&"))) (re.++ (re.* (re.union (str.to_re "'") (str.to_re "("))) (re.++ (re.* (re.* (str.to_re ")"))) (re.union (re.* (str.to_re "***")) (re.+ (str.to_re "+"))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
