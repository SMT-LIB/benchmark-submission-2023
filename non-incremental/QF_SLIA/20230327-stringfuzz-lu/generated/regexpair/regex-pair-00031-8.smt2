(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "000"))) (re.++ (re.union (re.+ (str.to_re "11")) (re.union (str.to_re "22") (str.to_re "33"))) (re.++ (re.union (re.+ (str.to_re "444")) (re.+ (str.to_re "55"))) (re.++ (re.* (re.+ (str.to_re "66"))) (re.++ (re.union (re.+ (str.to_re "77")) (re.union (str.to_re "8") (str.to_re "999"))) (re.++ (re.+ (re.* (str.to_re "aaa"))) (re.++ (re.union (re.+ (str.to_re "bbb")) (re.* (str.to_re "c"))) (re.++ (re.+ (re.+ (str.to_re "d"))) (re.++ (re.+ (re.* (str.to_re "eee"))) (re.++ (re.union (re.union (str.to_re "fff") (str.to_re "ggg")) (re.union (str.to_re "hh") (str.to_re "i"))) (re.++ (re.union (re.+ (str.to_re "j")) (re.union (str.to_re "k") (str.to_re "l"))) (re.++ (re.+ (re.+ (str.to_re "mm"))) (re.++ (re.* (re.+ (str.to_re "nnn"))) (re.++ (re.+ (re.union (str.to_re "ooo") (str.to_re "ppp"))) (re.++ (re.union (re.+ (str.to_re "q")) (re.+ (str.to_re "r"))) (re.++ (re.+ (re.+ (str.to_re "s"))) (re.++ (re.* (re.* (str.to_re "ttt"))) (re.++ (re.* (re.* (str.to_re "uu"))) (re.++ (re.union (re.union (str.to_re "vvv") (str.to_re "w")) (re.union (str.to_re "xx") (str.to_re "yyy"))) (re.++ (re.* (re.+ (str.to_re "z"))) (re.++ (re.union (re.union (str.to_re "AA") (str.to_re "BB")) (re.* (str.to_re "CC"))) (re.++ (re.union (re.* (str.to_re "D")) (re.union (str.to_re "EEE") (str.to_re "FF"))) (re.++ (re.+ (re.* (str.to_re "GGG"))) (re.++ (re.* (re.* (str.to_re "HHH"))) (re.++ (re.union (re.* (str.to_re "II")) (re.+ (str.to_re "JJ"))) (re.++ (re.union (re.* (str.to_re "KKK")) (re.+ (str.to_re "L"))) (re.++ (re.union (re.* (str.to_re "M")) (re.union (str.to_re "NN") (str.to_re "O"))) (re.++ (re.* (re.union (str.to_re "P") (str.to_re "Q"))) (re.++ (re.* (re.* (str.to_re "RRR"))) (re.++ (re.+ (re.* (str.to_re "SS"))) (re.union (re.* (str.to_re "TT")) (re.* (str.to_re "UU")))))))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.* (re.* (str.to_re "00"))) (re.++ (re.* (re.+ (str.to_re "111"))) (re.++ (re.* (re.* (str.to_re "222"))) (re.++ (re.+ (re.+ (str.to_re "333"))) (re.++ (re.+ (re.union (str.to_re "4") (str.to_re "55"))) (re.++ (re.+ (re.union (str.to_re "66") (str.to_re "77"))) (re.++ (re.+ (re.+ (str.to_re "888"))) (re.++ (re.union (re.union (str.to_re "99") (str.to_re "aaa")) (re.union (str.to_re "bb") (str.to_re "ccc"))) (re.++ (re.* (re.* (str.to_re "d"))) (re.++ (re.+ (re.union (str.to_re "eee") (str.to_re "ff"))) (re.++ (re.union (re.* (str.to_re "ggg")) (re.union (str.to_re "h") (str.to_re "i"))) (re.++ (re.union (re.union (str.to_re "j") (str.to_re "kk")) (re.* (str.to_re "l"))) (re.++ (re.* (re.* (str.to_re "mm"))) (re.++ (re.+ (re.+ (str.to_re "nnn"))) (re.++ (re.+ (re.+ (str.to_re "o"))) (re.++ (re.+ (re.union (str.to_re "p") (str.to_re "q"))) (re.++ (re.union (re.union (str.to_re "rrr") (str.to_re "s")) (re.+ (str.to_re "tt"))) (re.++ (re.+ (re.+ (str.to_re "uu"))) (re.++ (re.union (re.union (str.to_re "v") (str.to_re "w")) (re.+ (str.to_re "xxx"))) (re.++ (re.* (re.union (str.to_re "yy") (str.to_re "zz"))) (re.++ (re.union (re.* (str.to_re "AA")) (re.union (str.to_re "BBB") (str.to_re "CCC"))) (re.++ (re.+ (re.* (str.to_re "DD"))) (re.++ (re.* (re.+ (str.to_re "E"))) (re.++ (re.* (re.+ (str.to_re "FFF"))) (re.++ (re.union (re.* (str.to_re "GG")) (re.+ (str.to_re "H"))) (re.++ (re.* (re.+ (str.to_re "I"))) (re.++ (re.* (re.union (str.to_re "JJ") (str.to_re "KKK"))) (re.++ (re.* (re.* (str.to_re "LLL"))) (re.++ (re.* (re.union (str.to_re "MM") (str.to_re "N"))) (re.++ (re.* (re.union (str.to_re "OOO") (str.to_re "P"))) (re.* (re.+ (str.to_re "QQQ"))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
