(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "000"))) (re.++ (re.* (re.* (str.to_re "1"))) (re.++ (re.union (re.union (str.to_re "2") (str.to_re "333")) (re.+ (str.to_re "44"))) (re.++ (re.+ (re.union (str.to_re "555") (str.to_re "6"))) (re.++ (re.+ (re.* (str.to_re "777"))) (re.++ (re.union (re.union (str.to_re "888") (str.to_re "9")) (re.+ (str.to_re "aa"))) (re.++ (re.+ (re.+ (str.to_re "bbb"))) (re.++ (re.union (re.union (str.to_re "ccc") (str.to_re "dd")) (re.* (str.to_re "eee"))) (re.++ (re.* (re.+ (str.to_re "f"))) (re.++ (re.union (re.union (str.to_re "gg") (str.to_re "hhh")) (re.union (str.to_re "i") (str.to_re "j"))) (re.++ (re.* (re.* (str.to_re "kkk"))) (re.++ (re.+ (re.union (str.to_re "ll") (str.to_re "mm"))) (re.++ (re.* (re.* (str.to_re "nnn"))) (re.++ (re.union (re.* (str.to_re "o")) (re.* (str.to_re "p"))) (re.++ (re.* (re.+ (str.to_re "qq"))) (re.++ (re.+ (re.+ (str.to_re "rrr"))) (re.++ (re.union (re.+ (str.to_re "sss")) (re.* (str.to_re "tt"))) (re.++ (re.union (re.+ (str.to_re "uu")) (re.+ (str.to_re "vvv"))) (re.++ (re.+ (re.+ (str.to_re "ww"))) (re.++ (re.* (re.union (str.to_re "xxx") (str.to_re "yy"))) (re.++ (re.+ (re.* (str.to_re "z"))) (re.++ (re.* (re.+ (str.to_re "AAA"))) (re.++ (re.union (re.union (str.to_re "B") (str.to_re "CCC")) (re.union (str.to_re "D") (str.to_re "E"))) (re.++ (re.* (re.* (str.to_re "F"))) (re.++ (re.union (re.* (str.to_re "GGG")) (re.* (str.to_re "HH"))) (re.++ (re.union (re.+ (str.to_re "I")) (re.+ (str.to_re "JJ"))) (re.++ (re.union (re.union (str.to_re "K") (str.to_re "LLL")) (re.+ (str.to_re "MMM"))) (re.++ (re.* (re.union (str.to_re "N") (str.to_re "OO"))) (re.++ (re.* (re.+ (str.to_re "PPP"))) (re.++ (re.+ (re.* (str.to_re "QQ"))) (re.++ (re.+ (re.+ (str.to_re "RR"))) (re.++ (re.+ (re.union (str.to_re "S") (str.to_re "TT"))) (re.++ (re.union (re.union (str.to_re "UUU") (str.to_re "VVV")) (re.* (str.to_re "W"))) (re.++ (re.union (re.* (str.to_re "XX")) (re.union (str.to_re "YY") (str.to_re "Z"))) (re.++ (re.* (re.* (str.to_re "!!"))) (re.++ (re.* (re.* (str.to_re """"""""))) (re.++ (re.union (re.+ (str.to_re "##")) (re.* (str.to_re "$"))) (re.++ (re.union (re.union (str.to_re "%%") (str.to_re "&")) (re.* (str.to_re "'''"))) (re.++ (re.union (re.+ (str.to_re "(((")) (re.union (str.to_re ")") (str.to_re "***"))) (re.++ (re.+ (re.* (str.to_re "++"))) (re.++ (re.+ (re.+ (str.to_re ",,"))) (re.++ (re.+ (re.union (str.to_re "---") (str.to_re ".."))) (re.++ (re.union (re.union (str.to_re "//") (str.to_re "::")) (re.* (str.to_re ";;"))) (re.++ (re.union (re.+ (str.to_re "<<")) (re.* (str.to_re "="))) (re.++ (re.+ (re.+ (str.to_re ">>>"))) (re.++ (re.union (re.* (str.to_re "??")) (re.union (str.to_re "@") (str.to_re "["))) (re.++ (re.* (re.+ (str.to_re "\\"))) (re.++ (re.* (re.+ (str.to_re "]]]"))) (re.++ (re.* (re.+ (str.to_re "^"))) (re.++ (re.+ (re.* (str.to_re "__"))) (re.union (re.union (str.to_re "```") (str.to_re "{{{")) (re.* (str.to_re "|")))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.* (re.* (str.to_re "0"))) (re.++ (re.* (re.+ (str.to_re "111"))) (re.++ (re.* (re.union (str.to_re "222") (str.to_re "3"))) (re.++ (re.+ (re.* (str.to_re "444"))) (re.++ (re.+ (re.+ (str.to_re "55"))) (re.++ (re.* (re.+ (str.to_re "66"))) (re.++ (re.* (re.union (str.to_re "7") (str.to_re "888"))) (re.++ (re.* (re.+ (str.to_re "9"))) (re.++ (re.* (re.+ (str.to_re "aaa"))) (re.++ (re.union (re.+ (str.to_re "b")) (re.* (str.to_re "ccc"))) (re.++ (re.+ (re.union (str.to_re "dd") (str.to_re "eee"))) (re.++ (re.* (re.+ (str.to_re "ff"))) (re.++ (re.+ (re.+ (str.to_re "gg"))) (re.++ (re.* (re.+ (str.to_re "hhh"))) (re.++ (re.+ (re.* (str.to_re "iii"))) (re.++ (re.union (re.+ (str.to_re "j")) (re.* (str.to_re "kkk"))) (re.++ (re.union (re.+ (str.to_re "l")) (re.union (str.to_re "mm") (str.to_re "nn"))) (re.++ (re.* (re.+ (str.to_re "ooo"))) (re.++ (re.+ (re.* (str.to_re "pp"))) (re.++ (re.* (re.+ (str.to_re "qqq"))) (re.++ (re.+ (re.union (str.to_re "r") (str.to_re "s"))) (re.++ (re.+ (re.+ (str.to_re "t"))) (re.++ (re.+ (re.union (str.to_re "u") (str.to_re "vvv"))) (re.++ (re.* (re.union (str.to_re "w") (str.to_re "x"))) (re.++ (re.* (re.* (str.to_re "yy"))) (re.++ (re.+ (re.* (str.to_re "z"))) (re.++ (re.* (re.union (str.to_re "A") (str.to_re "BBB"))) (re.++ (re.* (re.+ (str.to_re "CC"))) (re.++ (re.+ (re.+ (str.to_re "DD"))) (re.++ (re.+ (re.union (str.to_re "EEE") (str.to_re "FF"))) (re.++ (re.* (re.* (str.to_re "GG"))) (re.++ (re.union (re.* (str.to_re "H")) (re.* (str.to_re "III"))) (re.++ (re.* (re.* (str.to_re "J"))) (re.++ (re.* (re.union (str.to_re "KKK") (str.to_re "LLL"))) (re.++ (re.* (re.* (str.to_re "MM"))) (re.++ (re.union (re.union (str.to_re "NNN") (str.to_re "OOO")) (re.+ (str.to_re "P"))) (re.++ (re.union (re.* (str.to_re "Q")) (re.+ (str.to_re "R"))) (re.++ (re.+ (re.+ (str.to_re "S"))) (re.++ (re.+ (re.+ (str.to_re "T"))) (re.++ (re.+ (re.* (str.to_re "U"))) (re.++ (re.+ (re.* (str.to_re "VV"))) (re.++ (re.+ (re.* (str.to_re "WW"))) (re.++ (re.* (re.union (str.to_re "XXX") (str.to_re "YY"))) (re.++ (re.* (re.* (str.to_re "Z"))) (re.++ (re.+ (re.+ (str.to_re "!!!"))) (re.++ (re.* (re.+ (str.to_re """"""))) (re.++ (re.* (re.* (str.to_re "###"))) (re.++ (re.* (re.union (str.to_re "$$$") (str.to_re "%%"))) (re.++ (re.* (re.* (str.to_re "&"))) (re.++ (re.+ (re.* (str.to_re "''"))) (re.union (re.+ (str.to_re "(((")) (re.union (str.to_re ")") (str.to_re "***"))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
