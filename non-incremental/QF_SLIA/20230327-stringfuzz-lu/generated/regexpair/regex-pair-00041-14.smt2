(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "000"))) (re.++ (re.+ (re.* (str.to_re "111"))) (re.++ (re.* (re.* (str.to_re "2"))) (re.++ (re.* (re.+ (str.to_re "333"))) (re.++ (re.* (re.* (str.to_re "44"))) (re.++ (re.+ (re.union (str.to_re "5") (str.to_re "66"))) (re.++ (re.+ (re.union (str.to_re "77") (str.to_re "888"))) (re.++ (re.union (re.union (str.to_re "99") (str.to_re "a")) (re.* (str.to_re "bbb"))) (re.++ (re.+ (re.union (str.to_re "cc") (str.to_re "d"))) (re.++ (re.union (re.union (str.to_re "e") (str.to_re "fff")) (re.union (str.to_re "g") (str.to_re "h"))) (re.++ (re.* (re.union (str.to_re "ii") (str.to_re "jjj"))) (re.++ (re.* (re.union (str.to_re "kkk") (str.to_re "lll"))) (re.++ (re.union (re.* (str.to_re "mmm")) (re.union (str.to_re "n") (str.to_re "o"))) (re.++ (re.* (re.union (str.to_re "ppp") (str.to_re "q"))) (re.++ (re.union (re.union (str.to_re "rr") (str.to_re "ss")) (re.+ (str.to_re "tt"))) (re.++ (re.union (re.union (str.to_re "u") (str.to_re "vv")) (re.* (str.to_re "www"))) (re.++ (re.union (re.union (str.to_re "x") (str.to_re "yyy")) (re.+ (str.to_re "zz"))) (re.++ (re.+ (re.* (str.to_re "AA"))) (re.++ (re.* (re.union (str.to_re "BB") (str.to_re "C"))) (re.++ (re.* (re.+ (str.to_re "DD"))) (re.++ (re.+ (re.+ (str.to_re "EE"))) (re.++ (re.+ (re.union (str.to_re "FFF") (str.to_re "GGG"))) (re.++ (re.* (re.union (str.to_re "HHH") (str.to_re "II"))) (re.++ (re.* (re.* (str.to_re "J"))) (re.++ (re.* (re.union (str.to_re "KKK") (str.to_re "LLL"))) (re.++ (re.union (re.+ (str.to_re "MM")) (re.union (str.to_re "NN") (str.to_re "OOO"))) (re.++ (re.+ (re.* (str.to_re "P"))) (re.++ (re.union (re.union (str.to_re "QQ") (str.to_re "RRR")) (re.union (str.to_re "S") (str.to_re "T"))) (re.++ (re.+ (re.+ (str.to_re "UU"))) (re.++ (re.+ (re.union (str.to_re "V") (str.to_re "W"))) (re.++ (re.* (re.* (str.to_re "XX"))) (re.++ (re.union (re.union (str.to_re "Y") (str.to_re "Z")) (re.union (str.to_re "!!!") (str.to_re """"""""))) (re.++ (re.* (re.+ (str.to_re "#"))) (re.++ (re.union (re.union (str.to_re "$$$") (str.to_re "%%")) (re.union (str.to_re "&&&") (str.to_re "''"))) (re.++ (re.+ (re.union (str.to_re "(") (str.to_re "))"))) (re.++ (re.union (re.union (str.to_re "**") (str.to_re "+")) (re.+ (str.to_re ",,"))) (re.++ (re.+ (re.union (str.to_re "--") (str.to_re ".."))) (re.++ (re.* (re.+ (str.to_re "///"))) (re.++ (re.* (re.union (str.to_re ":::") (str.to_re ";;"))) (re.++ (re.* (re.union (str.to_re "<") (str.to_re "="))) (re.union (re.+ (str.to_re ">>>")) (re.union (str.to_re "?") (str.to_re "@@")))))))))))))))))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.* (re.union (str.to_re "000") (str.to_re "1"))) (re.++ (re.* (re.+ (str.to_re "22"))) (re.++ (re.union (re.union (str.to_re "3") (str.to_re "444")) (re.* (str.to_re "555"))) (re.++ (re.* (re.union (str.to_re "66") (str.to_re "77"))) (re.++ (re.* (re.+ (str.to_re "8"))) (re.++ (re.* (re.+ (str.to_re "9"))) (re.++ (re.* (re.* (str.to_re "a"))) (re.++ (re.* (re.union (str.to_re "bb") (str.to_re "ccc"))) (re.++ (re.+ (re.union (str.to_re "d") (str.to_re "eee"))) (re.++ (re.union (re.* (str.to_re "fff")) (re.union (str.to_re "gg") (str.to_re "hhh"))) (re.++ (re.union (re.+ (str.to_re "iii")) (re.* (str.to_re "jj"))) (re.++ (re.+ (re.union (str.to_re "kkk") (str.to_re "l"))) (re.++ (re.+ (re.union (str.to_re "mmm") (str.to_re "nnn"))) (re.++ (re.+ (re.union (str.to_re "o") (str.to_re "p"))) (re.++ (re.* (re.union (str.to_re "qq") (str.to_re "r"))) (re.++ (re.* (re.+ (str.to_re "s"))) (re.++ (re.* (re.union (str.to_re "t") (str.to_re "uuu"))) (re.++ (re.+ (re.+ (str.to_re "vvv"))) (re.++ (re.union (re.union (str.to_re "ww") (str.to_re "xxx")) (re.+ (str.to_re "yy"))) (re.++ (re.+ (re.+ (str.to_re "zzz"))) (re.++ (re.union (re.+ (str.to_re "AAA")) (re.* (str.to_re "B"))) (re.++ (re.union (re.union (str.to_re "CCC") (str.to_re "DD")) (re.union (str.to_re "EEE") (str.to_re "FF"))) (re.++ (re.union (re.union (str.to_re "G") (str.to_re "HHH")) (re.+ (str.to_re "I"))) (re.++ (re.* (re.* (str.to_re "JJ"))) (re.++ (re.+ (re.+ (str.to_re "KK"))) (re.++ (re.* (re.* (str.to_re "LL"))) (re.++ (re.union (re.* (str.to_re "M")) (re.union (str.to_re "N") (str.to_re "OO"))) (re.++ (re.* (re.union (str.to_re "P") (str.to_re "Q"))) (re.++ (re.* (re.+ (str.to_re "R"))) (re.++ (re.+ (re.+ (str.to_re "SS"))) (re.++ (re.union (re.* (str.to_re "TTT")) (re.* (str.to_re "UUU"))) (re.++ (re.union (re.* (str.to_re "VVV")) (re.+ (str.to_re "WW"))) (re.++ (re.+ (re.+ (str.to_re "XXX"))) (re.++ (re.* (re.union (str.to_re "YYY") (str.to_re "Z"))) (re.++ (re.union (re.union (str.to_re "!!!") (str.to_re """")) (re.+ (str.to_re "##"))) (re.++ (re.union (re.union (str.to_re "$$") (str.to_re "%")) (re.+ (str.to_re "&&"))) (re.++ (re.* (re.+ (str.to_re "'''"))) (re.++ (re.+ (re.union (str.to_re "((") (str.to_re "))"))) (re.++ (re.* (re.+ (str.to_re "**"))) (re.++ (re.+ (re.+ (str.to_re "+++"))) (re.* (re.+ (str.to_re ",,"))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
