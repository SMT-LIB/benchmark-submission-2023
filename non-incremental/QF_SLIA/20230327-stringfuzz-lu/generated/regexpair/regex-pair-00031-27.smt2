(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "0"))) (re.++ (re.* (re.+ (str.to_re "111"))) (re.++ (re.union (re.+ (str.to_re "2")) (re.union (str.to_re "33") (str.to_re "444"))) (re.++ (re.+ (re.union (str.to_re "55") (str.to_re "666"))) (re.++ (re.* (re.union (str.to_re "7") (str.to_re "88"))) (re.++ (re.* (re.+ (str.to_re "999"))) (re.++ (re.* (re.* (str.to_re "a"))) (re.++ (re.union (re.union (str.to_re "bb") (str.to_re "ccc")) (re.union (str.to_re "dd") (str.to_re "eee"))) (re.++ (re.+ (re.union (str.to_re "fff") (str.to_re "gg"))) (re.++ (re.* (re.+ (str.to_re "hhh"))) (re.++ (re.union (re.+ (str.to_re "iii")) (re.* (str.to_re "jjj"))) (re.++ (re.union (re.* (str.to_re "kk")) (re.union (str.to_re "lll") (str.to_re "m"))) (re.++ (re.+ (re.* (str.to_re "nnn"))) (re.++ (re.union (re.* (str.to_re "o")) (re.+ (str.to_re "p"))) (re.++ (re.* (re.* (str.to_re "qqq"))) (re.++ (re.* (re.union (str.to_re "r") (str.to_re "s"))) (re.++ (re.* (re.union (str.to_re "t") (str.to_re "uuu"))) (re.++ (re.* (re.union (str.to_re "v") (str.to_re "www"))) (re.++ (re.union (re.union (str.to_re "xxx") (str.to_re "yy")) (re.+ (str.to_re "zz"))) (re.++ (re.* (re.+ (str.to_re "AA"))) (re.++ (re.+ (re.* (str.to_re "BBB"))) (re.++ (re.union (re.union (str.to_re "CCC") (str.to_re "DD")) (re.+ (str.to_re "E"))) (re.++ (re.+ (re.union (str.to_re "FFF") (str.to_re "G"))) (re.++ (re.+ (re.* (str.to_re "HHH"))) (re.++ (re.union (re.+ (str.to_re "I")) (re.+ (str.to_re "J"))) (re.++ (re.union (re.+ (str.to_re "K")) (re.union (str.to_re "L") (str.to_re "M"))) (re.++ (re.* (re.* (str.to_re "N"))) (re.++ (re.union (re.+ (str.to_re "OO")) (re.union (str.to_re "P") (str.to_re "QQ"))) (re.++ (re.* (re.union (str.to_re "RRR") (str.to_re "S"))) (re.++ (re.* (re.union (str.to_re "T") (str.to_re "UU"))) (re.+ (re.+ (str.to_re "V")))))))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.* (re.union (str.to_re "00") (str.to_re "11"))) (re.++ (re.union (re.union (str.to_re "222") (str.to_re "33")) (re.* (str.to_re "4"))) (re.++ (re.* (re.* (str.to_re "55"))) (re.++ (re.union (re.union (str.to_re "66") (str.to_re "77")) (re.+ (str.to_re "8"))) (re.++ (re.+ (re.+ (str.to_re "9"))) (re.++ (re.union (re.+ (str.to_re "aaa")) (re.union (str.to_re "b") (str.to_re "c"))) (re.++ (re.union (re.+ (str.to_re "d")) (re.* (str.to_re "eee"))) (re.++ (re.* (re.union (str.to_re "f") (str.to_re "g"))) (re.++ (re.union (re.+ (str.to_re "h")) (re.* (str.to_re "iii"))) (re.++ (re.* (re.* (str.to_re "jj"))) (re.++ (re.union (re.union (str.to_re "k") (str.to_re "l")) (re.+ (str.to_re "mm"))) (re.++ (re.* (re.+ (str.to_re "nnn"))) (re.++ (re.+ (re.union (str.to_re "ooo") (str.to_re "p"))) (re.++ (re.union (re.* (str.to_re "q")) (re.+ (str.to_re "rr"))) (re.++ (re.union (re.union (str.to_re "ss") (str.to_re "t")) (re.+ (str.to_re "uuu"))) (re.++ (re.* (re.* (str.to_re "vv"))) (re.++ (re.union (re.* (str.to_re "w")) (re.* (str.to_re "xxx"))) (re.++ (re.+ (re.* (str.to_re "yy"))) (re.++ (re.+ (re.* (str.to_re "zz"))) (re.++ (re.union (re.union (str.to_re "A") (str.to_re "B")) (re.* (str.to_re "C"))) (re.++ (re.+ (re.* (str.to_re "D"))) (re.++ (re.union (re.union (str.to_re "EEE") (str.to_re "FF")) (re.* (str.to_re "GG"))) (re.++ (re.union (re.union (str.to_re "H") (str.to_re "III")) (re.+ (str.to_re "J"))) (re.++ (re.+ (re.* (str.to_re "KKK"))) (re.++ (re.+ (re.+ (str.to_re "L"))) (re.++ (re.union (re.+ (str.to_re "MM")) (re.union (str.to_re "NNN") (str.to_re "O"))) (re.++ (re.union (re.* (str.to_re "PP")) (re.* (str.to_re "Q"))) (re.++ (re.+ (re.+ (str.to_re "RRR"))) (re.++ (re.* (re.union (str.to_re "S") (str.to_re "TTT"))) (re.++ (re.union (re.* (str.to_re "U")) (re.* (str.to_re "VV"))) (re.* (re.+ (str.to_re "WW"))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
