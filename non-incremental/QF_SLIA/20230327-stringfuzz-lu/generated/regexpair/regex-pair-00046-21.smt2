(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "000"))) (re.++ (re.union (re.* (str.to_re "11")) (re.union (str.to_re "22") (str.to_re "33"))) (re.++ (re.+ (re.+ (str.to_re "4"))) (re.++ (re.+ (re.union (str.to_re "5") (str.to_re "66"))) (re.++ (re.union (re.* (str.to_re "7")) (re.* (str.to_re "8"))) (re.++ (re.+ (re.* (str.to_re "99"))) (re.++ (re.+ (re.* (str.to_re "aaa"))) (re.++ (re.+ (re.* (str.to_re "bb"))) (re.++ (re.union (re.union (str.to_re "ccc") (str.to_re "d")) (re.union (str.to_re "ee") (str.to_re "f"))) (re.++ (re.+ (re.+ (str.to_re "g"))) (re.++ (re.+ (re.* (str.to_re "hhh"))) (re.++ (re.union (re.union (str.to_re "iii") (str.to_re "j")) (re.* (str.to_re "kk"))) (re.++ (re.+ (re.union (str.to_re "lll") (str.to_re "mmm"))) (re.++ (re.union (re.* (str.to_re "nnn")) (re.* (str.to_re "oo"))) (re.++ (re.union (re.union (str.to_re "pp") (str.to_re "qq")) (re.+ (str.to_re "rrr"))) (re.++ (re.* (re.* (str.to_re "sss"))) (re.++ (re.+ (re.* (str.to_re "ttt"))) (re.++ (re.union (re.+ (str.to_re "uu")) (re.* (str.to_re "vv"))) (re.++ (re.* (re.* (str.to_re "www"))) (re.++ (re.+ (re.union (str.to_re "xx") (str.to_re "yy"))) (re.++ (re.+ (re.union (str.to_re "z") (str.to_re "AAA"))) (re.++ (re.union (re.union (str.to_re "BB") (str.to_re "CCC")) (re.+ (str.to_re "DDD"))) (re.++ (re.+ (re.union (str.to_re "EEE") (str.to_re "FFF"))) (re.++ (re.+ (re.* (str.to_re "GG"))) (re.++ (re.* (re.* (str.to_re "HHH"))) (re.++ (re.+ (re.union (str.to_re "III") (str.to_re "JJJ"))) (re.++ (re.* (re.union (str.to_re "K") (str.to_re "LLL"))) (re.++ (re.* (re.+ (str.to_re "MMM"))) (re.++ (re.* (re.+ (str.to_re "NN"))) (re.++ (re.union (re.union (str.to_re "O") (str.to_re "PPP")) (re.* (str.to_re "QQQ"))) (re.++ (re.* (re.union (str.to_re "R") (str.to_re "SSS"))) (re.++ (re.+ (re.+ (str.to_re "T"))) (re.++ (re.* (re.* (str.to_re "UUU"))) (re.++ (re.+ (re.+ (str.to_re "VV"))) (re.++ (re.union (re.* (str.to_re "WW")) (re.* (str.to_re "XXX"))) (re.++ (re.union (re.+ (str.to_re "YYY")) (re.* (str.to_re "Z"))) (re.++ (re.+ (re.* (str.to_re "!!!"))) (re.++ (re.union (re.+ (str.to_re """""")) (re.+ (str.to_re "#"))) (re.++ (re.union (re.+ (str.to_re "$")) (re.union (str.to_re "%") (str.to_re "&&&"))) (re.++ (re.* (re.union (str.to_re "''") (str.to_re "(("))) (re.++ (re.* (re.union (str.to_re ")") (str.to_re "*"))) (re.++ (re.* (re.union (str.to_re "+++") (str.to_re ","))) (re.++ (re.union (re.* (str.to_re "-")) (re.union (str.to_re "..") (str.to_re "/"))) (re.++ (re.union (re.+ (str.to_re ":")) (re.* (str.to_re ";;"))) (re.++ (re.* (re.union (str.to_re "<<") (str.to_re "=="))) (re.+ (re.union (str.to_re ">>") (str.to_re "???"))))))))))))))))))))))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.* (re.* (str.to_re "000"))) (re.++ (re.union (re.* (str.to_re "111")) (re.+ (str.to_re "2"))) (re.++ (re.* (re.+ (str.to_re "33"))) (re.++ (re.+ (re.+ (str.to_re "44"))) (re.++ (re.union (re.* (str.to_re "555")) (re.* (str.to_re "6"))) (re.++ (re.* (re.+ (str.to_re "777"))) (re.++ (re.* (re.+ (str.to_re "88"))) (re.++ (re.union (re.union (str.to_re "99") (str.to_re "aaa")) (re.union (str.to_re "b") (str.to_re "cc"))) (re.++ (re.+ (re.union (str.to_re "ddd") (str.to_re "e"))) (re.++ (re.+ (re.union (str.to_re "ff") (str.to_re "gg"))) (re.++ (re.union (re.+ (str.to_re "hhh")) (re.union (str.to_re "ii") (str.to_re "jj"))) (re.++ (re.* (re.+ (str.to_re "kk"))) (re.++ (re.union (re.+ (str.to_re "ll")) (re.union (str.to_re "mmm") (str.to_re "nnn"))) (re.++ (re.union (re.+ (str.to_re "oo")) (re.union (str.to_re "pp") (str.to_re "qq"))) (re.++ (re.+ (re.* (str.to_re "r"))) (re.++ (re.+ (re.* (str.to_re "ss"))) (re.++ (re.* (re.+ (str.to_re "tt"))) (re.++ (re.+ (re.+ (str.to_re "uu"))) (re.++ (re.union (re.* (str.to_re "vv")) (re.+ (str.to_re "w"))) (re.++ (re.union (re.* (str.to_re "x")) (re.+ (str.to_re "yy"))) (re.++ (re.* (re.* (str.to_re "zz"))) (re.++ (re.* (re.union (str.to_re "AAA") (str.to_re "BBB"))) (re.++ (re.+ (re.+ (str.to_re "CC"))) (re.++ (re.* (re.* (str.to_re "DD"))) (re.++ (re.* (re.+ (str.to_re "E"))) (re.++ (re.+ (re.union (str.to_re "FFF") (str.to_re "GG"))) (re.++ (re.* (re.+ (str.to_re "H"))) (re.++ (re.+ (re.+ (str.to_re "II"))) (re.++ (re.* (re.+ (str.to_re "JJ"))) (re.++ (re.* (re.* (str.to_re "KK"))) (re.++ (re.union (re.+ (str.to_re "LL")) (re.+ (str.to_re "MM"))) (re.++ (re.* (re.* (str.to_re "N"))) (re.++ (re.* (re.union (str.to_re "O") (str.to_re "P"))) (re.++ (re.union (re.* (str.to_re "QQ")) (re.union (str.to_re "R") (str.to_re "S"))) (re.++ (re.union (re.union (str.to_re "TT") (str.to_re "UU")) (re.* (str.to_re "V"))) (re.++ (re.union (re.+ (str.to_re "WW")) (re.* (str.to_re "XXX"))) (re.++ (re.+ (re.* (str.to_re "YY"))) (re.++ (re.* (re.+ (str.to_re "Z"))) (re.++ (re.* (re.* (str.to_re "!!!"))) (re.++ (re.* (re.* (str.to_re """"))) (re.++ (re.union (re.* (str.to_re "##")) (re.* (str.to_re "$$"))) (re.++ (re.+ (re.* (str.to_re "%%%"))) (re.++ (re.union (re.union (str.to_re "&&") (str.to_re "''")) (re.union (str.to_re "(((") (str.to_re "))"))) (re.++ (re.union (re.union (str.to_re "***") (str.to_re "+")) (re.* (str.to_re ","))) (re.++ (re.union (re.union (str.to_re "---") (str.to_re "...")) (re.+ (str.to_re "/"))) (re.* (re.* (str.to_re "::")))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
