(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.* (str.to_re "000"))) (re.++ (re.union (re.+ (str.to_re "1")) (re.* (str.to_re "222"))) (re.++ (re.* (re.* (str.to_re "33"))) (re.++ (re.union (re.union (str.to_re "44") (str.to_re "5")) (re.union (str.to_re "666") (str.to_re "777"))) (re.++ (re.union (re.* (str.to_re "88")) (re.union (str.to_re "9") (str.to_re "a"))) (re.++ (re.+ (re.union (str.to_re "b") (str.to_re "c"))) (re.++ (re.+ (re.* (str.to_re "d"))) (re.++ (re.* (re.+ (str.to_re "ee"))) (re.++ (re.* (re.* (str.to_re "f"))) (re.++ (re.+ (re.union (str.to_re "gg") (str.to_re "h"))) (re.++ (re.union (re.* (str.to_re "ii")) (re.+ (str.to_re "jj"))) (re.++ (re.+ (re.+ (str.to_re "kk"))) (re.++ (re.+ (re.* (str.to_re "lll"))) (re.++ (re.+ (re.union (str.to_re "mmm") (str.to_re "nnn"))) (re.++ (re.* (re.* (str.to_re "ooo"))) (re.++ (re.union (re.* (str.to_re "pp")) (re.* (str.to_re "qq"))) (re.++ (re.union (re.union (str.to_re "rr") (str.to_re "sss")) (re.+ (str.to_re "t"))) (re.++ (re.union (re.* (str.to_re "uuu")) (re.+ (str.to_re "v"))) (re.++ (re.+ (re.+ (str.to_re "w"))) (re.++ (re.union (re.union (str.to_re "xx") (str.to_re "y")) (re.union (str.to_re "zz") (str.to_re "A"))) (re.++ (re.union (re.* (str.to_re "BBB")) (re.* (str.to_re "CCC"))) (re.++ (re.union (re.union (str.to_re "DD") (str.to_re "E")) (re.+ (str.to_re "FF"))) (re.++ (re.union (re.* (str.to_re "G")) (re.union (str.to_re "HH") (str.to_re "II"))) (re.++ (re.union (re.* (str.to_re "J")) (re.+ (str.to_re "KKK"))) (re.++ (re.+ (re.+ (str.to_re "L"))) (re.++ (re.* (re.* (str.to_re "M"))) (re.++ (re.* (re.union (str.to_re "N") (str.to_re "OOO"))) (re.++ (re.+ (re.+ (str.to_re "PPP"))) (re.++ (re.* (re.union (str.to_re "Q") (str.to_re "RRR"))) (re.++ (re.+ (re.* (str.to_re "S"))) (re.* (re.* (str.to_re "T")))))))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "00"))) (re.++ (re.union (re.union (str.to_re "1") (str.to_re "2")) (re.* (str.to_re "3"))) (re.++ (re.union (re.* (str.to_re "44")) (re.union (str.to_re "55") (str.to_re "66"))) (re.++ (re.* (re.+ (str.to_re "7"))) (re.++ (re.+ (re.union (str.to_re "88") (str.to_re "9"))) (re.++ (re.+ (re.* (str.to_re "a"))) (re.++ (re.* (re.* (str.to_re "bbb"))) (re.++ (re.* (re.union (str.to_re "ccc") (str.to_re "ddd"))) (re.++ (re.union (re.* (str.to_re "e")) (re.+ (str.to_re "f"))) (re.++ (re.union (re.* (str.to_re "ggg")) (re.union (str.to_re "hh") (str.to_re "ii"))) (re.++ (re.* (re.+ (str.to_re "jj"))) (re.++ (re.* (re.+ (str.to_re "k"))) (re.++ (re.union (re.union (str.to_re "ll") (str.to_re "mmm")) (re.union (str.to_re "nnn") (str.to_re "ooo"))) (re.++ (re.+ (re.* (str.to_re "pp"))) (re.++ (re.union (re.+ (str.to_re "q")) (re.+ (str.to_re "r"))) (re.++ (re.+ (re.+ (str.to_re "s"))) (re.++ (re.union (re.* (str.to_re "t")) (re.union (str.to_re "uuu") (str.to_re "vvv"))) (re.++ (re.* (re.* (str.to_re "ww"))) (re.++ (re.union (re.+ (str.to_re "x")) (re.union (str.to_re "yyy") (str.to_re "zz"))) (re.++ (re.union (re.* (str.to_re "A")) (re.+ (str.to_re "BB"))) (re.++ (re.union (re.union (str.to_re "CC") (str.to_re "DDD")) (re.* (str.to_re "E"))) (re.++ (re.* (re.* (str.to_re "FFF"))) (re.++ (re.union (re.+ (str.to_re "GGG")) (re.union (str.to_re "H") (str.to_re "III"))) (re.++ (re.* (re.union (str.to_re "JJ") (str.to_re "KK"))) (re.++ (re.+ (re.* (str.to_re "LLL"))) (re.++ (re.union (re.union (str.to_re "MMM") (str.to_re "NN")) (re.+ (str.to_re "O"))) (re.++ (re.union (re.* (str.to_re "P")) (re.* (str.to_re "QQ"))) (re.++ (re.+ (re.+ (str.to_re "R"))) (re.++ (re.* (re.+ (str.to_re "SS"))) (re.++ (re.union (re.+ (str.to_re "TTT")) (re.union (str.to_re "UU") (str.to_re "VVV"))) (re.union (re.+ (str.to_re "WW")) (re.+ (str.to_re "XX"))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
