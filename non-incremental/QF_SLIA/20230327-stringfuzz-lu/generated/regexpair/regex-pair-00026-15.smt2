(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (str.to_re "0") (str.to_re "111"))) (re.++ (re.union (re.union (str.to_re "2") (str.to_re "33")) (re.+ (str.to_re "44"))) (re.++ (re.+ (re.+ (str.to_re "555"))) (re.++ (re.union (re.* (str.to_re "666")) (re.+ (str.to_re "77"))) (re.++ (re.* (re.union (str.to_re "8") (str.to_re "999"))) (re.++ (re.* (re.+ (str.to_re "a"))) (re.++ (re.union (re.+ (str.to_re "bbb")) (re.union (str.to_re "ccc") (str.to_re "ddd"))) (re.++ (re.+ (re.+ (str.to_re "ee"))) (re.++ (re.+ (re.union (str.to_re "fff") (str.to_re "ggg"))) (re.++ (re.* (re.+ (str.to_re "h"))) (re.++ (re.union (re.* (str.to_re "ii")) (re.+ (str.to_re "j"))) (re.++ (re.+ (re.union (str.to_re "k") (str.to_re "l"))) (re.++ (re.+ (re.union (str.to_re "m") (str.to_re "nn"))) (re.++ (re.+ (re.+ (str.to_re "ooo"))) (re.++ (re.* (re.union (str.to_re "ppp") (str.to_re "q"))) (re.++ (re.union (re.+ (str.to_re "r")) (re.+ (str.to_re "ss"))) (re.++ (re.* (re.+ (str.to_re "t"))) (re.++ (re.+ (re.+ (str.to_re "u"))) (re.++ (re.union (re.union (str.to_re "vvv") (str.to_re "www")) (re.+ (str.to_re "xx"))) (re.++ (re.* (re.union (str.to_re "y") (str.to_re "zzz"))) (re.++ (re.union (re.* (str.to_re "A")) (re.* (str.to_re "BB"))) (re.++ (re.* (re.union (str.to_re "C") (str.to_re "DD"))) (re.++ (re.union (re.* (str.to_re "EEE")) (re.+ (str.to_re "FF"))) (re.++ (re.+ (re.* (str.to_re "GG"))) (re.++ (re.* (re.+ (str.to_re "H"))) (re.union (re.union (str.to_re "III") (str.to_re "J")) (re.* (str.to_re "KK"))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "000"))) (re.++ (re.* (re.* (str.to_re "111"))) (re.++ (re.* (re.+ (str.to_re "2"))) (re.++ (re.* (re.* (str.to_re "3"))) (re.++ (re.union (re.union (str.to_re "44") (str.to_re "5")) (re.* (str.to_re "6"))) (re.++ (re.union (re.+ (str.to_re "777")) (re.* (str.to_re "88"))) (re.++ (re.union (re.+ (str.to_re "99")) (re.* (str.to_re "aa"))) (re.++ (re.union (re.+ (str.to_re "b")) (re.+ (str.to_re "cc"))) (re.++ (re.+ (re.union (str.to_re "d") (str.to_re "e"))) (re.++ (re.union (re.+ (str.to_re "ff")) (re.union (str.to_re "ggg") (str.to_re "hh"))) (re.++ (re.* (re.* (str.to_re "ii"))) (re.++ (re.* (re.* (str.to_re "jjj"))) (re.++ (re.* (re.union (str.to_re "kkk") (str.to_re "ll"))) (re.++ (re.union (re.+ (str.to_re "mmm")) (re.* (str.to_re "nn"))) (re.++ (re.+ (re.* (str.to_re "oo"))) (re.++ (re.union (re.+ (str.to_re "ppp")) (re.union (str.to_re "qqq") (str.to_re "rr"))) (re.++ (re.union (re.+ (str.to_re "sss")) (re.union (str.to_re "ttt") (str.to_re "u"))) (re.++ (re.union (re.union (str.to_re "v") (str.to_re "www")) (re.* (str.to_re "xxx"))) (re.++ (re.* (re.+ (str.to_re "yy"))) (re.++ (re.+ (re.union (str.to_re "zz") (str.to_re "A"))) (re.++ (re.* (re.* (str.to_re "BB"))) (re.++ (re.* (re.* (str.to_re "CCC"))) (re.++ (re.union (re.* (str.to_re "DD")) (re.* (str.to_re "E"))) (re.++ (re.+ (re.* (str.to_re "FFF"))) (re.++ (re.union (re.* (str.to_re "G")) (re.+ (str.to_re "HHH"))) (re.* (re.+ (str.to_re "I")))))))))))))))))))))))))))))))
(check-sat)
(exit)
