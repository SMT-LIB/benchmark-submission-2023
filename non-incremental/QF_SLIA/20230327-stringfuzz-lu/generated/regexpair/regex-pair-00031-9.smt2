(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "000"))) (re.++ (re.+ (re.union (str.to_re "111") (str.to_re "22"))) (re.++ (re.* (re.+ (str.to_re "3"))) (re.++ (re.* (re.union (str.to_re "44") (str.to_re "5"))) (re.++ (re.* (re.union (str.to_re "666") (str.to_re "777"))) (re.++ (re.+ (re.* (str.to_re "88"))) (re.++ (re.union (re.* (str.to_re "99")) (re.* (str.to_re "aaa"))) (re.++ (re.union (re.* (str.to_re "b")) (re.+ (str.to_re "ccc"))) (re.++ (re.* (re.union (str.to_re "d") (str.to_re "e"))) (re.++ (re.+ (re.union (str.to_re "ff") (str.to_re "g"))) (re.++ (re.* (re.* (str.to_re "hh"))) (re.++ (re.* (re.union (str.to_re "i") (str.to_re "jjj"))) (re.++ (re.+ (re.union (str.to_re "kkk") (str.to_re "l"))) (re.++ (re.* (re.+ (str.to_re "mmm"))) (re.++ (re.* (re.* (str.to_re "n"))) (re.++ (re.+ (re.+ (str.to_re "o"))) (re.++ (re.+ (re.* (str.to_re "pp"))) (re.++ (re.union (re.* (str.to_re "q")) (re.* (str.to_re "rrr"))) (re.++ (re.+ (re.* (str.to_re "s"))) (re.++ (re.* (re.+ (str.to_re "t"))) (re.++ (re.+ (re.union (str.to_re "u") (str.to_re "v"))) (re.++ (re.union (re.+ (str.to_re "w")) (re.* (str.to_re "xxx"))) (re.++ (re.* (re.+ (str.to_re "yyy"))) (re.++ (re.* (re.union (str.to_re "zz") (str.to_re "A"))) (re.++ (re.union (re.union (str.to_re "BBB") (str.to_re "C")) (re.+ (str.to_re "D"))) (re.++ (re.union (re.* (str.to_re "EE")) (re.* (str.to_re "FFF"))) (re.++ (re.union (re.union (str.to_re "GGG") (str.to_re "HHH")) (re.union (str.to_re "III") (str.to_re "JJ"))) (re.++ (re.union (re.* (str.to_re "KKK")) (re.+ (str.to_re "LLL"))) (re.++ (re.* (re.* (str.to_re "M"))) (re.++ (re.union (re.union (str.to_re "NN") (str.to_re "OO")) (re.* (str.to_re "PPP"))) (re.union (re.union (str.to_re "QQ") (str.to_re "RR")) (re.+ (str.to_re "SSS")))))))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.union (re.union (str.to_re "000") (str.to_re "1")) (re.* (str.to_re "22"))) (re.++ (re.+ (re.union (str.to_re "33") (str.to_re "444"))) (re.++ (re.+ (re.* (str.to_re "555"))) (re.++ (re.union (re.+ (str.to_re "6")) (re.union (str.to_re "77") (str.to_re "888"))) (re.++ (re.union (re.+ (str.to_re "9")) (re.* (str.to_re "aaa"))) (re.++ (re.+ (re.* (str.to_re "bbb"))) (re.++ (re.union (re.* (str.to_re "ccc")) (re.* (str.to_re "dd"))) (re.++ (re.* (re.+ (str.to_re "e"))) (re.++ (re.* (re.* (str.to_re "ff"))) (re.++ (re.union (re.* (str.to_re "gg")) (re.+ (str.to_re "hh"))) (re.++ (re.union (re.union (str.to_re "i") (str.to_re "j")) (re.+ (str.to_re "kk"))) (re.++ (re.+ (re.union (str.to_re "lll") (str.to_re "m"))) (re.++ (re.+ (re.* (str.to_re "n"))) (re.++ (re.+ (re.+ (str.to_re "o"))) (re.++ (re.+ (re.* (str.to_re "pp"))) (re.++ (re.* (re.union (str.to_re "qqq") (str.to_re "rrr"))) (re.++ (re.union (re.union (str.to_re "sss") (str.to_re "tt")) (re.union (str.to_re "uu") (str.to_re "vv"))) (re.++ (re.* (re.+ (str.to_re "www"))) (re.++ (re.union (re.+ (str.to_re "xx")) (re.union (str.to_re "yyy") (str.to_re "zz"))) (re.++ (re.* (re.union (str.to_re "AA") (str.to_re "BB"))) (re.++ (re.* (re.+ (str.to_re "CCC"))) (re.++ (re.* (re.* (str.to_re "D"))) (re.++ (re.union (re.+ (str.to_re "EEE")) (re.* (str.to_re "F"))) (re.++ (re.union (re.union (str.to_re "GGG") (str.to_re "HHH")) (re.+ (str.to_re "III"))) (re.++ (re.+ (re.union (str.to_re "JJJ") (str.to_re "K"))) (re.++ (re.* (re.* (str.to_re "LLL"))) (re.++ (re.* (re.+ (str.to_re "M"))) (re.++ (re.* (re.* (str.to_re "N"))) (re.++ (re.* (re.+ (str.to_re "OO"))) (re.++ (re.union (re.+ (str.to_re "PPP")) (re.union (str.to_re "QQQ") (str.to_re "RRR"))) (re.union (re.* (str.to_re "SSS")) (re.union (str.to_re "TTT") (str.to_re "UUU"))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
