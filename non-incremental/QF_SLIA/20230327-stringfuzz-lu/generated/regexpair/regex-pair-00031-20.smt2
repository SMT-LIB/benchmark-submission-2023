(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "00"))) (re.++ (re.* (re.+ (str.to_re "11"))) (re.++ (re.+ (re.union (str.to_re "2") (str.to_re "33"))) (re.++ (re.* (re.+ (str.to_re "44"))) (re.++ (re.union (re.* (str.to_re "555")) (re.+ (str.to_re "66"))) (re.++ (re.* (re.* (str.to_re "7"))) (re.++ (re.* (re.union (str.to_re "888") (str.to_re "9"))) (re.++ (re.union (re.+ (str.to_re "a")) (re.union (str.to_re "bbb") (str.to_re "ccc"))) (re.++ (re.+ (re.* (str.to_re "dd"))) (re.++ (re.+ (re.* (str.to_re "e"))) (re.++ (re.union (re.union (str.to_re "f") (str.to_re "gg")) (re.union (str.to_re "hh") (str.to_re "iii"))) (re.++ (re.* (re.union (str.to_re "j") (str.to_re "kkk"))) (re.++ (re.union (re.union (str.to_re "ll") (str.to_re "mm")) (re.union (str.to_re "nnn") (str.to_re "oo"))) (re.++ (re.* (re.* (str.to_re "p"))) (re.++ (re.+ (re.union (str.to_re "qq") (str.to_re "rrr"))) (re.++ (re.* (re.union (str.to_re "ss") (str.to_re "t"))) (re.++ (re.union (re.union (str.to_re "uu") (str.to_re "vvv")) (re.* (str.to_re "w"))) (re.++ (re.+ (re.* (str.to_re "x"))) (re.++ (re.union (re.+ (str.to_re "yy")) (re.union (str.to_re "zz") (str.to_re "A"))) (re.++ (re.+ (re.union (str.to_re "B") (str.to_re "CCC"))) (re.++ (re.union (re.* (str.to_re "D")) (re.union (str.to_re "EEE") (str.to_re "FFF"))) (re.++ (re.* (re.+ (str.to_re "G"))) (re.++ (re.* (re.+ (str.to_re "HH"))) (re.++ (re.* (re.+ (str.to_re "III"))) (re.++ (re.* (re.* (str.to_re "JJJ"))) (re.++ (re.+ (re.* (str.to_re "KK"))) (re.++ (re.+ (re.* (str.to_re "L"))) (re.++ (re.+ (re.+ (str.to_re "MMM"))) (re.++ (re.union (re.union (str.to_re "NN") (str.to_re "OO")) (re.* (str.to_re "P"))) (re.++ (re.union (re.union (str.to_re "QQQ") (str.to_re "RRR")) (re.union (str.to_re "SS") (str.to_re "TT"))) (re.+ (re.+ (str.to_re "UUU")))))))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.* (re.union (str.to_re "000") (str.to_re "111"))) (re.++ (re.* (re.* (str.to_re "22"))) (re.++ (re.* (re.union (str.to_re "33") (str.to_re "4"))) (re.++ (re.union (re.* (str.to_re "55")) (re.* (str.to_re "6"))) (re.++ (re.union (re.+ (str.to_re "77")) (re.union (str.to_re "8") (str.to_re "9"))) (re.++ (re.* (re.union (str.to_re "a") (str.to_re "bb"))) (re.++ (re.* (re.+ (str.to_re "ccc"))) (re.++ (re.+ (re.+ (str.to_re "d"))) (re.++ (re.* (re.* (str.to_re "ee"))) (re.++ (re.+ (re.* (str.to_re "fff"))) (re.++ (re.* (re.* (str.to_re "ggg"))) (re.++ (re.+ (re.+ (str.to_re "h"))) (re.++ (re.union (re.union (str.to_re "iii") (str.to_re "j")) (re.+ (str.to_re "kk"))) (re.++ (re.* (re.* (str.to_re "l"))) (re.++ (re.* (re.+ (str.to_re "mm"))) (re.++ (re.+ (re.+ (str.to_re "nnn"))) (re.++ (re.+ (re.+ (str.to_re "ooo"))) (re.++ (re.* (re.+ (str.to_re "pp"))) (re.++ (re.* (re.union (str.to_re "qq") (str.to_re "rr"))) (re.++ (re.* (re.union (str.to_re "ss") (str.to_re "ttt"))) (re.++ (re.+ (re.* (str.to_re "uu"))) (re.++ (re.+ (re.union (str.to_re "v") (str.to_re "www"))) (re.++ (re.* (re.union (str.to_re "x") (str.to_re "yyy"))) (re.++ (re.+ (re.union (str.to_re "z") (str.to_re "AA"))) (re.++ (re.+ (re.union (str.to_re "BBB") (str.to_re "CC"))) (re.++ (re.* (re.+ (str.to_re "D"))) (re.++ (re.* (re.union (str.to_re "EEE") (str.to_re "FFF"))) (re.++ (re.* (re.union (str.to_re "G") (str.to_re "HH"))) (re.++ (re.* (re.* (str.to_re "I"))) (re.++ (re.+ (re.+ (str.to_re "JJJ"))) (re.union (re.union (str.to_re "KK") (str.to_re "LLL")) (re.union (str.to_re "MM") (str.to_re "N"))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
