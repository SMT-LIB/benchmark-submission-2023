(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "000") (str.to_re "1"))) (re.++ (re.union (re.+ (str.to_re "22")) (re.* (str.to_re "3"))) (re.++ (re.union (re.union (str.to_re "444") (str.to_re "55")) (re.union (str.to_re "666") (str.to_re "777"))) (re.++ (re.union (re.+ (str.to_re "8")) (re.* (str.to_re "999"))) (re.++ (re.* (re.+ (str.to_re "aa"))) (re.++ (re.* (re.union (str.to_re "bbb") (str.to_re "cc"))) (re.++ (re.* (re.* (str.to_re "dd"))) (re.++ (re.* (re.+ (str.to_re "e"))) (re.++ (re.union (re.+ (str.to_re "f")) (re.union (str.to_re "g") (str.to_re "h"))) (re.++ (re.+ (re.+ (str.to_re "i"))) (re.++ (re.* (re.* (str.to_re "jj"))) (re.++ (re.* (re.+ (str.to_re "kkk"))) (re.++ (re.union (re.+ (str.to_re "l")) (re.+ (str.to_re "m"))) (re.++ (re.* (re.union (str.to_re "n") (str.to_re "o"))) (re.++ (re.union (re.+ (str.to_re "p")) (re.union (str.to_re "qqq") (str.to_re "rrr"))) (re.++ (re.union (re.union (str.to_re "sss") (str.to_re "ttt")) (re.+ (str.to_re "u"))) (re.++ (re.union (re.union (str.to_re "vv") (str.to_re "ww")) (re.union (str.to_re "xx") (str.to_re "yy"))) (re.++ (re.union (re.+ (str.to_re "zzz")) (re.+ (str.to_re "A"))) (re.++ (re.* (re.union (str.to_re "BB") (str.to_re "C"))) (re.++ (re.* (re.* (str.to_re "DD"))) (re.++ (re.union (re.* (str.to_re "EE")) (re.* (str.to_re "FF"))) (re.++ (re.union (re.* (str.to_re "GG")) (re.* (str.to_re "H"))) (re.++ (re.union (re.* (str.to_re "I")) (re.* (str.to_re "JJJ"))) (re.++ (re.union (re.+ (str.to_re "K")) (re.* (str.to_re "LLL"))) (re.++ (re.+ (re.* (str.to_re "MMM"))) (re.++ (re.* (re.+ (str.to_re "N"))) (re.++ (re.* (re.+ (str.to_re "O"))) (re.++ (re.union (re.union (str.to_re "PP") (str.to_re "QQQ")) (re.* (str.to_re "RRR"))) (re.++ (re.+ (re.+ (str.to_re "SS"))) (re.++ (re.+ (re.union (str.to_re "TTT") (str.to_re "U"))) (re.++ (re.* (re.+ (str.to_re "V"))) (re.++ (re.union (re.union (str.to_re "WWW") (str.to_re "XXX")) (re.* (str.to_re "YYY"))) (re.++ (re.* (re.* (str.to_re "ZZZ"))) (re.++ (re.+ (re.+ (str.to_re "!"))) (re.++ (re.+ (re.union (str.to_re """") (str.to_re "###"))) (re.+ (re.+ (str.to_re "$"))))))))))))))))))))))))))))))))))))))))
(assert (not (str.in_re var0 (re.++ (re.+ (re.union (str.to_re "00") (str.to_re "11"))) (re.++ (re.* (re.union (str.to_re "2") (str.to_re "3"))) (re.++ (re.+ (re.* (str.to_re "44"))) (re.++ (re.+ (re.union (str.to_re "5") (str.to_re "666"))) (re.++ (re.+ (re.* (str.to_re "7"))) (re.++ (re.union (re.* (str.to_re "8")) (re.* (str.to_re "99"))) (re.++ (re.+ (re.+ (str.to_re "aaa"))) (re.++ (re.+ (re.+ (str.to_re "bb"))) (re.++ (re.* (re.+ (str.to_re "c"))) (re.++ (re.union (re.+ (str.to_re "d")) (re.* (str.to_re "ee"))) (re.++ (re.+ (re.* (str.to_re "fff"))) (re.++ (re.union (re.* (str.to_re "g")) (re.+ (str.to_re "hhh"))) (re.++ (re.* (re.+ (str.to_re "iii"))) (re.++ (re.union (re.union (str.to_re "jjj") (str.to_re "k")) (re.union (str.to_re "ll") (str.to_re "mmm"))) (re.++ (re.union (re.* (str.to_re "nnn")) (re.union (str.to_re "oo") (str.to_re "p"))) (re.++ (re.+ (re.union (str.to_re "q") (str.to_re "rr"))) (re.++ (re.* (re.* (str.to_re "s"))) (re.++ (re.union (re.* (str.to_re "t")) (re.+ (str.to_re "uuu"))) (re.++ (re.* (re.+ (str.to_re "vvv"))) (re.++ (re.union (re.union (str.to_re "www") (str.to_re "x")) (re.+ (str.to_re "y"))) (re.++ (re.+ (re.* (str.to_re "z"))) (re.++ (re.union (re.+ (str.to_re "AAA")) (re.+ (str.to_re "B"))) (re.++ (re.* (re.+ (str.to_re "CC"))) (re.++ (re.union (re.* (str.to_re "D")) (re.* (str.to_re "EE"))) (re.++ (re.union (re.* (str.to_re "F")) (re.* (str.to_re "G"))) (re.++ (re.* (re.union (str.to_re "H") (str.to_re "II"))) (re.++ (re.* (re.* (str.to_re "JJJ"))) (re.++ (re.+ (re.* (str.to_re "KKK"))) (re.++ (re.* (re.* (str.to_re "L"))) (re.++ (re.+ (re.union (str.to_re "M") (str.to_re "NNN"))) (re.++ (re.+ (re.* (str.to_re "OOO"))) (re.++ (re.+ (re.+ (str.to_re "PP"))) (re.++ (re.+ (re.* (str.to_re "QQ"))) (re.++ (re.union (re.* (str.to_re "RR")) (re.* (str.to_re "S"))) (re.++ (re.* (re.* (str.to_re "TT"))) (re.union (re.* (str.to_re "UU")) (re.* (str.to_re "VV")))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
