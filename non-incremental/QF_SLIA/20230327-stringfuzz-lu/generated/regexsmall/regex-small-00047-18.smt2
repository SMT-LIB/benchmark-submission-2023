(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "000") (str.to_re "111"))) (re.++ (re.* (re.union (str.to_re "22") (str.to_re "3"))) (re.++ (re.* (re.* (str.to_re "444"))) (re.++ (re.+ (re.+ (str.to_re "5"))) (re.++ (re.* (re.* (str.to_re "66"))) (re.++ (re.+ (re.* (str.to_re "7"))) (re.++ (re.union (re.+ (str.to_re "888")) (re.* (str.to_re "99"))) (re.++ (re.* (re.union (str.to_re "aa") (str.to_re "bbb"))) (re.++ (re.union (re.union (str.to_re "cc") (str.to_re "d")) (re.+ (str.to_re "ee"))) (re.++ (re.+ (re.union (str.to_re "fff") (str.to_re "ggg"))) (re.++ (re.+ (re.* (str.to_re "hhh"))) (re.++ (re.+ (re.union (str.to_re "i") (str.to_re "jj"))) (re.++ (re.* (re.* (str.to_re "kk"))) (re.++ (re.union (re.+ (str.to_re "l")) (re.+ (str.to_re "m"))) (re.++ (re.union (re.+ (str.to_re "n")) (re.+ (str.to_re "oo"))) (re.++ (re.+ (re.+ (str.to_re "p"))) (re.++ (re.* (re.+ (str.to_re "qq"))) (re.++ (re.union (re.* (str.to_re "rr")) (re.* (str.to_re "sss"))) (re.++ (re.* (re.union (str.to_re "tt") (str.to_re "uuu"))) (re.++ (re.* (re.union (str.to_re "vv") (str.to_re "www"))) (re.++ (re.union (re.+ (str.to_re "xx")) (re.+ (str.to_re "y"))) (re.++ (re.union (re.+ (str.to_re "z")) (re.* (str.to_re "A"))) (re.++ (re.* (re.union (str.to_re "B") (str.to_re "C"))) (re.++ (re.* (re.* (str.to_re "DD"))) (re.++ (re.* (re.union (str.to_re "E") (str.to_re "FFF"))) (re.++ (re.union (re.+ (str.to_re "GG")) (re.union (str.to_re "HH") (str.to_re "I"))) (re.++ (re.* (re.* (str.to_re "J"))) (re.++ (re.union (re.* (str.to_re "KKK")) (re.* (str.to_re "LLL"))) (re.++ (re.* (re.union (str.to_re "MMM") (str.to_re "N"))) (re.++ (re.+ (re.union (str.to_re "O") (str.to_re "P"))) (re.++ (re.+ (re.+ (str.to_re "QQQ"))) (re.++ (re.union (re.+ (str.to_re "RRR")) (re.+ (str.to_re "S"))) (re.++ (re.+ (re.union (str.to_re "TTT") (str.to_re "UU"))) (re.++ (re.union (re.union (str.to_re "VVV") (str.to_re "W")) (re.+ (str.to_re "XX"))) (re.++ (re.union (re.* (str.to_re "YYY")) (re.union (str.to_re "ZZZ") (str.to_re "!"))) (re.++ (re.+ (re.* (str.to_re """"))) (re.++ (re.+ (re.union (str.to_re "#") (str.to_re "$"))) (re.++ (re.* (re.union (str.to_re "%%") (str.to_re "&"))) (re.++ (re.* (re.* (str.to_re "''"))) (re.++ (re.+ (re.+ (str.to_re "("))) (re.++ (re.* (re.+ (str.to_re ")))"))) (re.++ (re.+ (re.+ (str.to_re "**"))) (re.++ (re.+ (re.* (str.to_re "+"))) (re.++ (re.+ (re.+ (str.to_re ",,,"))) (re.++ (re.+ (re.+ (str.to_re "---"))) (re.++ (re.union (re.union (str.to_re "...") (str.to_re "/")) (re.* (str.to_re "::"))) (re.* (re.* (str.to_re ";")))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
