(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "0"))) (re.++ (re.* (re.+ (str.to_re "1"))) (re.++ (re.union (re.union (str.to_re "2") (str.to_re "3")) (re.* (str.to_re "44"))) (re.++ (re.+ (re.union (str.to_re "55") (str.to_re "66"))) (re.++ (re.union (re.+ (str.to_re "7")) (re.union (str.to_re "8") (str.to_re "99"))) (re.++ (re.union (re.* (str.to_re "aaa")) (re.* (str.to_re "b"))) (re.++ (re.* (re.union (str.to_re "cc") (str.to_re "d"))) (re.++ (re.+ (re.* (str.to_re "eee"))) (re.++ (re.+ (re.* (str.to_re "f"))) (re.++ (re.+ (re.+ (str.to_re "g"))) (re.++ (re.union (re.union (str.to_re "hh") (str.to_re "iii")) (re.+ (str.to_re "jjj"))) (re.++ (re.+ (re.union (str.to_re "k") (str.to_re "lll"))) (re.++ (re.union (re.* (str.to_re "m")) (re.union (str.to_re "n") (str.to_re "oo"))) (re.++ (re.+ (re.+ (str.to_re "pp"))) (re.++ (re.* (re.* (str.to_re "qq"))) (re.++ (re.union (re.* (str.to_re "rrr")) (re.+ (str.to_re "s"))) (re.++ (re.union (re.* (str.to_re "t")) (re.+ (str.to_re "uuu"))) (re.++ (re.+ (re.union (str.to_re "vv") (str.to_re "www"))) (re.++ (re.* (re.+ (str.to_re "xxx"))) (re.++ (re.* (re.* (str.to_re "y"))) (re.++ (re.union (re.* (str.to_re "z")) (re.union (str.to_re "AAA") (str.to_re "B"))) (re.++ (re.+ (re.+ (str.to_re "CCC"))) (re.++ (re.* (re.* (str.to_re "D"))) (re.++ (re.* (re.union (str.to_re "EE") (str.to_re "FF"))) (re.++ (re.* (re.union (str.to_re "G") (str.to_re "HH"))) (re.++ (re.+ (re.+ (str.to_re "II"))) (re.++ (re.* (re.union (str.to_re "JJ") (str.to_re "KKK"))) (re.++ (re.* (re.* (str.to_re "L"))) (re.++ (re.* (re.+ (str.to_re "MMM"))) (re.++ (re.+ (re.+ (str.to_re "NN"))) (re.++ (re.union (re.union (str.to_re "OOO") (str.to_re "PPP")) (re.union (str.to_re "QQ") (str.to_re "R"))) (re.++ (re.union (re.* (str.to_re "SSS")) (re.* (str.to_re "TT"))) (re.++ (re.* (re.union (str.to_re "UU") (str.to_re "VVV"))) (re.++ (re.union (re.union (str.to_re "W") (str.to_re "XX")) (re.* (str.to_re "YY"))) (re.++ (re.* (re.union (str.to_re "ZZ") (str.to_re "!"))) (re.++ (re.* (re.* (str.to_re """"""))) (re.++ (re.+ (re.union (str.to_re "#") (str.to_re "$"))) (re.++ (re.* (re.* (str.to_re "%"))) (re.++ (re.+ (re.+ (str.to_re "&&&"))) (re.++ (re.union (re.+ (str.to_re "''")) (re.* (str.to_re "((("))) (re.++ (re.* (re.* (str.to_re "))"))) (re.++ (re.union (re.* (str.to_re "*")) (re.+ (str.to_re "+"))) (re.++ (re.* (re.+ (str.to_re ","))) (re.++ (re.* (re.union (str.to_re "-") (str.to_re ".."))) (re.++ (re.* (re.* (str.to_re "/"))) (re.++ (re.* (re.union (str.to_re "::") (str.to_re ";"))) (re.++ (re.* (re.union (str.to_re "<<<") (str.to_re "=="))) (re.++ (re.+ (re.+ (str.to_re ">>"))) (re.++ (re.* (re.* (str.to_re "??"))) (re.++ (re.+ (re.* (str.to_re "@@"))) (re.++ (re.* (re.+ (str.to_re "[[["))) (re.++ (re.union (re.* (str.to_re "\\\\")) (re.+ (str.to_re "]]"))) (re.++ (re.union (re.* (str.to_re "^^")) (re.* (str.to_re "__"))) (re.++ (re.union (re.* (str.to_re "`")) (re.+ (str.to_re "{{"))) (re.++ (re.* (re.* (str.to_re "|"))) (re.++ (re.* (re.* (str.to_re "}}}"))) (re.++ (re.* (re.+ (str.to_re "~"))) (re.++ (re.* (re.union (str.to_re "0") (str.to_re "111"))) (re.* (re.+ (str.to_re "222")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
