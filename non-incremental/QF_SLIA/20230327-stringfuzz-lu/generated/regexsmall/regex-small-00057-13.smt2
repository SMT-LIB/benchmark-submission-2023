(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "000"))) (re.++ (re.union (re.union (str.to_re "1") (str.to_re "2")) (re.* (str.to_re "333"))) (re.++ (re.* (re.* (str.to_re "44"))) (re.++ (re.* (re.union (str.to_re "555") (str.to_re "666"))) (re.++ (re.union (re.union (str.to_re "777") (str.to_re "88")) (re.* (str.to_re "9"))) (re.++ (re.union (re.* (str.to_re "aa")) (re.* (str.to_re "b"))) (re.++ (re.* (re.+ (str.to_re "cc"))) (re.++ (re.* (re.* (str.to_re "ddd"))) (re.++ (re.* (re.* (str.to_re "ee"))) (re.++ (re.* (re.union (str.to_re "f") (str.to_re "gg"))) (re.++ (re.* (re.union (str.to_re "hh") (str.to_re "i"))) (re.++ (re.* (re.union (str.to_re "jjj") (str.to_re "kk"))) (re.++ (re.+ (re.* (str.to_re "ll"))) (re.++ (re.+ (re.* (str.to_re "m"))) (re.++ (re.+ (re.* (str.to_re "nn"))) (re.++ (re.+ (re.+ (str.to_re "o"))) (re.++ (re.union (re.+ (str.to_re "pp")) (re.* (str.to_re "qq"))) (re.++ (re.+ (re.+ (str.to_re "r"))) (re.++ (re.union (re.union (str.to_re "s") (str.to_re "ttt")) (re.+ (str.to_re "uu"))) (re.++ (re.union (re.* (str.to_re "vvv")) (re.* (str.to_re "ww"))) (re.++ (re.* (re.union (str.to_re "xxx") (str.to_re "yy"))) (re.++ (re.union (re.union (str.to_re "zzz") (str.to_re "AA")) (re.union (str.to_re "B") (str.to_re "CC"))) (re.++ (re.+ (re.+ (str.to_re "DD"))) (re.++ (re.* (re.+ (str.to_re "EE"))) (re.++ (re.+ (re.+ (str.to_re "FFF"))) (re.++ (re.+ (re.* (str.to_re "G"))) (re.++ (re.union (re.* (str.to_re "H")) (re.* (str.to_re "II"))) (re.++ (re.* (re.* (str.to_re "J"))) (re.++ (re.* (re.union (str.to_re "KK") (str.to_re "LL"))) (re.++ (re.union (re.* (str.to_re "MMM")) (re.+ (str.to_re "N"))) (re.++ (re.union (re.union (str.to_re "OOO") (str.to_re "PP")) (re.* (str.to_re "QQ"))) (re.++ (re.union (re.+ (str.to_re "R")) (re.union (str.to_re "SS") (str.to_re "TT"))) (re.++ (re.+ (re.* (str.to_re "U"))) (re.++ (re.union (re.* (str.to_re "VVV")) (re.* (str.to_re "WWW"))) (re.++ (re.* (re.union (str.to_re "X") (str.to_re "Y"))) (re.++ (re.* (re.* (str.to_re "ZZZ"))) (re.++ (re.union (re.union (str.to_re "!!!") (str.to_re """""""")) (re.union (str.to_re "#") (str.to_re "$"))) (re.++ (re.+ (re.+ (str.to_re "%%%"))) (re.++ (re.* (re.union (str.to_re "&&") (str.to_re "''"))) (re.++ (re.union (re.* (str.to_re "(")) (re.* (str.to_re ")"))) (re.++ (re.* (re.* (str.to_re "**"))) (re.++ (re.union (re.union (str.to_re "++") (str.to_re ",,,")) (re.* (str.to_re "---"))) (re.++ (re.union (re.* (str.to_re "...")) (re.+ (str.to_re "///"))) (re.++ (re.union (re.union (str.to_re ":::") (str.to_re ";;;")) (re.* (str.to_re "<<"))) (re.++ (re.* (re.union (str.to_re "==") (str.to_re ">>>"))) (re.++ (re.+ (re.union (str.to_re "???") (str.to_re "@@"))) (re.++ (re.union (re.* (str.to_re "[[")) (re.union (str.to_re "\\") (str.to_re "]]"))) (re.++ (re.union (re.* (str.to_re "^^")) (re.* (str.to_re "__"))) (re.++ (re.union (re.* (str.to_re "```")) (re.* (str.to_re "{{"))) (re.++ (re.+ (re.* (str.to_re "|||"))) (re.++ (re.* (re.* (str.to_re "}"))) (re.++ (re.union (re.* (str.to_re "~~")) (re.+ (str.to_re "000"))) (re.++ (re.* (re.union (str.to_re "111") (str.to_re "22"))) (re.++ (re.* (re.* (str.to_re "33"))) (re.++ (re.+ (re.+ (str.to_re "44"))) (re.++ (re.union (re.union (str.to_re "55") (str.to_re "6")) (re.* (str.to_re "77"))) (re.+ (re.* (str.to_re "888")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
