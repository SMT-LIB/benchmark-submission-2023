(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (str.to_re "00")) (re.+ (str.to_re "11"))) (re.++ (re.* (re.* (str.to_re "2"))) (re.++ (re.union (re.+ (str.to_re "3")) (re.+ (str.to_re "44"))) (re.++ (re.union (re.* (str.to_re "555")) (re.union (str.to_re "6") (str.to_re "77"))) (re.++ (re.union (re.+ (str.to_re "888")) (re.* (str.to_re "99"))) (re.++ (re.* (re.+ (str.to_re "aaa"))) (re.++ (re.union (re.* (str.to_re "bb")) (re.union (str.to_re "cc") (str.to_re "d"))) (re.++ (re.* (re.* (str.to_re "e"))) (re.++ (re.* (re.* (str.to_re "fff"))) (re.++ (re.* (re.+ (str.to_re "g"))) (re.++ (re.union (re.+ (str.to_re "hh")) (re.+ (str.to_re "ii"))) (re.++ (re.* (re.union (str.to_re "j") (str.to_re "kk"))) (re.++ (re.* (re.+ (str.to_re "ll"))) (re.++ (re.* (re.union (str.to_re "mmm") (str.to_re "nn"))) (re.++ (re.+ (re.* (str.to_re "ooo"))) (re.++ (re.union (re.+ (str.to_re "ppp")) (re.+ (str.to_re "q"))) (re.++ (re.* (re.union (str.to_re "rr") (str.to_re "sss"))) (re.++ (re.* (re.union (str.to_re "ttt") (str.to_re "uuu"))) (re.++ (re.* (re.* (str.to_re "vvv"))) (re.++ (re.+ (re.* (str.to_re "w"))) (re.++ (re.union (re.* (str.to_re "xxx")) (re.+ (str.to_re "yy"))) (re.++ (re.* (re.union (str.to_re "zzz") (str.to_re "AA"))) (re.++ (re.* (re.* (str.to_re "B"))) (re.++ (re.union (re.* (str.to_re "CC")) (re.* (str.to_re "DDD"))) (re.++ (re.union (re.union (str.to_re "EEE") (str.to_re "FFF")) (re.* (str.to_re "GG"))) (re.++ (re.* (re.union (str.to_re "HHH") (str.to_re "I"))) (re.++ (re.union (re.+ (str.to_re "JJJ")) (re.* (str.to_re "K"))) (re.++ (re.union (re.+ (str.to_re "LL")) (re.* (str.to_re "M"))) (re.++ (re.+ (re.union (str.to_re "N") (str.to_re "O"))) (re.++ (re.* (re.* (str.to_re "PP"))) (re.++ (re.* (re.union (str.to_re "Q") (str.to_re "RR"))) (re.++ (re.union (re.* (str.to_re "S")) (re.* (str.to_re "TT"))) (re.++ (re.* (re.+ (str.to_re "UUU"))) (re.++ (re.* (re.* (str.to_re "VVV"))) (re.++ (re.+ (re.union (str.to_re "W") (str.to_re "XXX"))) (re.++ (re.+ (re.+ (str.to_re "YY"))) (re.++ (re.* (re.* (str.to_re "Z"))) (re.++ (re.+ (re.union (str.to_re "!") (str.to_re """"""""))) (re.++ (re.union (re.+ (str.to_re "##")) (re.union (str.to_re "$$$") (str.to_re "%"))) (re.++ (re.union (re.* (str.to_re "&&")) (re.+ (str.to_re "''"))) (re.++ (re.* (re.+ (str.to_re "(("))) (re.++ (re.+ (re.+ (str.to_re "))"))) (re.+ (re.+ (str.to_re "***")))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
