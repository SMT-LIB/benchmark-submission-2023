(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "000"))) (re.++ (re.* (re.+ (str.to_re "11"))) (re.++ (re.+ (re.+ (str.to_re "222"))) (re.++ (re.union (re.union (str.to_re "3") (str.to_re "4")) (re.+ (str.to_re "55"))) (re.++ (re.union (re.+ (str.to_re "6")) (re.+ (str.to_re "777"))) (re.++ (re.* (re.union (str.to_re "8") (str.to_re "9"))) (re.++ (re.+ (re.* (str.to_re "aaa"))) (re.++ (re.+ (re.+ (str.to_re "b"))) (re.++ (re.union (re.union (str.to_re "c") (str.to_re "dd")) (re.union (str.to_re "e") (str.to_re "ff"))) (re.++ (re.union (re.* (str.to_re "ggg")) (re.* (str.to_re "h"))) (re.++ (re.+ (re.union (str.to_re "ii") (str.to_re "j"))) (re.++ (re.* (re.union (str.to_re "k") (str.to_re "lll"))) (re.++ (re.* (re.union (str.to_re "mm") (str.to_re "nn"))) (re.++ (re.union (re.union (str.to_re "oo") (str.to_re "pp")) (re.union (str.to_re "qqq") (str.to_re "rrr"))) (re.++ (re.* (re.union (str.to_re "ss") (str.to_re "ttt"))) (re.++ (re.union (re.union (str.to_re "uu") (str.to_re "vv")) (re.union (str.to_re "ww") (str.to_re "xxx"))) (re.++ (re.* (re.* (str.to_re "yy"))) (re.++ (re.union (re.union (str.to_re "z") (str.to_re "AA")) (re.* (str.to_re "BBB"))) (re.++ (re.* (re.union (str.to_re "C") (str.to_re "DD"))) (re.++ (re.+ (re.union (str.to_re "EEE") (str.to_re "F"))) (re.++ (re.union (re.* (str.to_re "GGG")) (re.union (str.to_re "HHH") (str.to_re "III"))) (re.++ (re.* (re.+ (str.to_re "JJJ"))) (re.++ (re.+ (re.+ (str.to_re "KK"))) (re.++ (re.union (re.+ (str.to_re "LL")) (re.+ (str.to_re "MMM"))) (re.++ (re.* (re.union (str.to_re "NN") (str.to_re "OOO"))) (re.++ (re.union (re.union (str.to_re "PP") (str.to_re "QQQ")) (re.* (str.to_re "R"))) (re.++ (re.+ (re.* (str.to_re "SSS"))) (re.++ (re.+ (re.+ (str.to_re "TT"))) (re.++ (re.union (re.union (str.to_re "UU") (str.to_re "VV")) (re.* (str.to_re "WW"))) (re.++ (re.* (re.* (str.to_re "X"))) (re.++ (re.union (re.+ (str.to_re "Y")) (re.+ (str.to_re "Z"))) (re.++ (re.union (re.* (str.to_re "!!")) (re.+ (str.to_re """"""""))) (re.++ (re.* (re.union (str.to_re "##") (str.to_re "$$$"))) (re.++ (re.+ (re.* (str.to_re "%%%"))) (re.++ (re.* (re.union (str.to_re "&") (str.to_re "''"))) (re.++ (re.+ (re.+ (str.to_re "(("))) (re.++ (re.* (re.union (str.to_re "))") (str.to_re "**"))) (re.++ (re.+ (re.* (str.to_re "++"))) (re.++ (re.union (re.union (str.to_re ",") (str.to_re "---")) (re.* (str.to_re "..."))) (re.++ (re.+ (re.+ (str.to_re "/"))) (re.++ (re.* (re.union (str.to_re "::") (str.to_re ";"))) (re.++ (re.* (re.+ (str.to_re "<"))) (re.union (re.+ (str.to_re "==")) (re.union (str.to_re ">") (str.to_re "??")))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
