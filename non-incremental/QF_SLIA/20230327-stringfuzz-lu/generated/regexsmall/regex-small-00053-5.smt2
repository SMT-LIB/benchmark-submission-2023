(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.union (str.to_re "000") (str.to_re "11")) (re.* (str.to_re "2"))) (re.++ (re.union (re.* (str.to_re "3")) (re.+ (str.to_re "4"))) (re.++ (re.+ (re.* (str.to_re "5"))) (re.++ (re.union (re.+ (str.to_re "6")) (re.union (str.to_re "777") (str.to_re "88"))) (re.++ (re.union (re.union (str.to_re "999") (str.to_re "aa")) (re.+ (str.to_re "b"))) (re.++ (re.+ (re.+ (str.to_re "c"))) (re.++ (re.* (re.+ (str.to_re "ddd"))) (re.++ (re.union (re.union (str.to_re "ee") (str.to_re "f")) (re.* (str.to_re "ggg"))) (re.++ (re.union (re.* (str.to_re "hhh")) (re.* (str.to_re "iii"))) (re.++ (re.+ (re.+ (str.to_re "j"))) (re.++ (re.union (re.* (str.to_re "kkk")) (re.union (str.to_re "l") (str.to_re "m"))) (re.++ (re.+ (re.+ (str.to_re "n"))) (re.++ (re.union (re.union (str.to_re "oo") (str.to_re "ppp")) (re.+ (str.to_re "qq"))) (re.++ (re.* (re.* (str.to_re "rrr"))) (re.++ (re.+ (re.union (str.to_re "ss") (str.to_re "ttt"))) (re.++ (re.+ (re.* (str.to_re "u"))) (re.++ (re.+ (re.union (str.to_re "v") (str.to_re "www"))) (re.++ (re.* (re.union (str.to_re "xx") (str.to_re "yyy"))) (re.++ (re.union (re.+ (str.to_re "zzz")) (re.union (str.to_re "AA") (str.to_re "BBB"))) (re.++ (re.* (re.union (str.to_re "C") (str.to_re "DDD"))) (re.++ (re.* (re.+ (str.to_re "E"))) (re.++ (re.union (re.union (str.to_re "FFF") (str.to_re "GG")) (re.* (str.to_re "HH"))) (re.++ (re.* (re.* (str.to_re "I"))) (re.++ (re.+ (re.union (str.to_re "J") (str.to_re "KKK"))) (re.++ (re.* (re.union (str.to_re "L") (str.to_re "MMM"))) (re.++ (re.+ (re.* (str.to_re "NN"))) (re.++ (re.union (re.union (str.to_re "O") (str.to_re "P")) (re.union (str.to_re "Q") (str.to_re "RRR"))) (re.++ (re.+ (re.* (str.to_re "S"))) (re.++ (re.* (re.union (str.to_re "TTT") (str.to_re "UUU"))) (re.++ (re.union (re.+ (str.to_re "VV")) (re.+ (str.to_re "W"))) (re.++ (re.+ (re.union (str.to_re "XXX") (str.to_re "YYY"))) (re.++ (re.+ (re.union (str.to_re "ZZ") (str.to_re "!"))) (re.++ (re.union (re.* (str.to_re """""")) (re.* (str.to_re "###"))) (re.++ (re.+ (re.union (str.to_re "$$") (str.to_re "%%%"))) (re.++ (re.union (re.union (str.to_re "&&&") (str.to_re "'''")) (re.+ (str.to_re "((("))) (re.++ (re.+ (re.+ (str.to_re ")))"))) (re.++ (re.* (re.* (str.to_re "**"))) (re.++ (re.* (re.+ (str.to_re "+"))) (re.++ (re.union (re.union (str.to_re ",,") (str.to_re "---")) (re.+ (str.to_re "..."))) (re.++ (re.* (re.union (str.to_re "//") (str.to_re ":::"))) (re.++ (re.union (re.+ (str.to_re ";")) (re.+ (str.to_re "<"))) (re.++ (re.* (re.* (str.to_re "=="))) (re.++ (re.+ (re.+ (str.to_re ">"))) (re.++ (re.union (re.union (str.to_re "?") (str.to_re "@@@")) (re.union (str.to_re "[[[") (str.to_re "\\"))) (re.++ (re.union (re.+ (str.to_re "]")) (re.* (str.to_re "^"))) (re.++ (re.union (re.union (str.to_re "___") (str.to_re "``")) (re.* (str.to_re "{"))) (re.++ (re.+ (re.union (str.to_re "||") (str.to_re "}}}"))) (re.++ (re.* (re.union (str.to_re "~~~") (str.to_re "000"))) (re.++ (re.* (re.+ (str.to_re "11"))) (re.++ (re.union (re.* (str.to_re "2")) (re.+ (str.to_re "33"))) (re.++ (re.+ (re.union (str.to_re "444") (str.to_re "5"))) (re.++ (re.* (re.union (str.to_re "6") (str.to_re "777"))) (re.union (re.+ (str.to_re "8")) (re.union (str.to_re "99") (str.to_re "aaa")))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
