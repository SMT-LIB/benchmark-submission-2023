(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (str.to_re "0")) (re.union (str.to_re "11") (str.to_re "2"))) (re.++ (re.union (re.* (str.to_re "3")) (re.* (str.to_re "4"))) (re.++ (re.* (re.union (str.to_re "555") (str.to_re "6"))) (re.++ (re.+ (re.* (str.to_re "7"))) (re.++ (re.union (re.union (str.to_re "88") (str.to_re "9")) (re.union (str.to_re "a") (str.to_re "b"))) (re.++ (re.union (re.union (str.to_re "cc") (str.to_re "ddd")) (re.* (str.to_re "eee"))) (re.++ (re.union (re.* (str.to_re "f")) (re.union (str.to_re "g") (str.to_re "h"))) (re.++ (re.* (re.* (str.to_re "ii"))) (re.++ (re.union (re.* (str.to_re "jjj")) (re.+ (str.to_re "kk"))) (re.++ (re.* (re.union (str.to_re "l") (str.to_re "mmm"))) (re.++ (re.* (re.union (str.to_re "nnn") (str.to_re "ooo"))) (re.++ (re.* (re.+ (str.to_re "ppp"))) (re.++ (re.union (re.union (str.to_re "qq") (str.to_re "rr")) (re.* (str.to_re "s"))) (re.++ (re.+ (re.+ (str.to_re "tt"))) (re.++ (re.union (re.* (str.to_re "uuu")) (re.union (str.to_re "vvv") (str.to_re "ww"))) (re.++ (re.* (re.+ (str.to_re "xx"))) (re.++ (re.* (re.+ (str.to_re "y"))) (re.++ (re.* (re.union (str.to_re "z") (str.to_re "AA"))) (re.++ (re.* (re.* (str.to_re "BBB"))) (re.++ (re.union (re.* (str.to_re "CCC")) (re.+ (str.to_re "DD"))) (re.++ (re.union (re.+ (str.to_re "EE")) (re.* (str.to_re "F"))) (re.++ (re.union (re.+ (str.to_re "GGG")) (re.* (str.to_re "HHH"))) (re.++ (re.+ (re.* (str.to_re "II"))) (re.++ (re.union (re.+ (str.to_re "J")) (re.* (str.to_re "KK"))) (re.++ (re.+ (re.* (str.to_re "LLL"))) (re.++ (re.union (re.union (str.to_re "M") (str.to_re "NN")) (re.* (str.to_re "OOO"))) (re.++ (re.* (re.+ (str.to_re "P"))) (re.++ (re.+ (re.union (str.to_re "Q") (str.to_re "RRR"))) (re.++ (re.+ (re.+ (str.to_re "S"))) (re.++ (re.* (re.* (str.to_re "TT"))) (re.++ (re.* (re.* (str.to_re "UU"))) (re.++ (re.union (re.* (str.to_re "VVV")) (re.union (str.to_re "WWW") (str.to_re "XXX"))) (re.++ (re.+ (re.* (str.to_re "Y"))) (re.++ (re.union (re.* (str.to_re "ZZZ")) (re.union (str.to_re "!!!") (str.to_re """"""""))) (re.++ (re.union (re.* (str.to_re "##")) (re.union (str.to_re "$$$") (str.to_re "%"))) (re.++ (re.union (re.+ (str.to_re "&&")) (re.union (str.to_re "''") (str.to_re "("))) (re.++ (re.union (re.union (str.to_re ")") (str.to_re "*")) (re.+ (str.to_re "+"))) (re.++ (re.+ (re.* (str.to_re ","))) (re.++ (re.union (re.+ (str.to_re "---")) (re.+ (str.to_re "."))) (re.++ (re.+ (re.union (str.to_re "///") (str.to_re ":"))) (re.++ (re.* (re.+ (str.to_re ";"))) (re.++ (re.* (re.* (str.to_re "<<"))) (re.++ (re.+ (re.union (str.to_re "=") (str.to_re ">"))) (re.++ (re.union (re.union (str.to_re "??") (str.to_re "@@@")) (re.* (str.to_re "[["))) (re.union (re.* (str.to_re "\\\\\\")) (re.union (str.to_re "]]]") (str.to_re "^")))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
