(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "1"))) (re.++ (re.+ (re.union (str.to_re "2") (str.to_re "3"))) (re.++ (re.union (re.+ (str.to_re "4")) (re.+ (str.to_re "55"))) (re.++ (re.union (re.+ (str.to_re "666")) (re.+ (str.to_re "7"))) (re.++ (re.+ (re.+ (str.to_re "888"))) (re.++ (re.+ (re.+ (str.to_re "99"))) (re.++ (re.union (re.+ (str.to_re "a")) (re.union (str.to_re "bb") (str.to_re "ccc"))) (re.++ (re.union (re.* (str.to_re "ddd")) (re.+ (str.to_re "e"))) (re.++ (re.+ (re.+ (str.to_re "f"))) (re.++ (re.+ (re.* (str.to_re "ggg"))) (re.++ (re.+ (re.* (str.to_re "h"))) (re.++ (re.union (re.* (str.to_re "i")) (re.union (str.to_re "j") (str.to_re "kkk"))) (re.++ (re.+ (re.+ (str.to_re "ll"))) (re.++ (re.+ (re.+ (str.to_re "m"))) (re.++ (re.+ (re.+ (str.to_re "nn"))) (re.++ (re.union (re.union (str.to_re "o") (str.to_re "ppp")) (re.+ (str.to_re "qqq"))) (re.++ (re.* (re.union (str.to_re "rrr") (str.to_re "ss"))) (re.++ (re.* (re.* (str.to_re "ttt"))) (re.++ (re.* (re.union (str.to_re "uu") (str.to_re "vv"))) (re.++ (re.+ (re.union (str.to_re "w") (str.to_re "xx"))) (re.++ (re.+ (re.+ (str.to_re "y"))) (re.++ (re.+ (re.+ (str.to_re "z"))) (re.++ (re.* (re.+ (str.to_re "A"))) (re.++ (re.+ (re.union (str.to_re "B") (str.to_re "C"))) (re.++ (re.* (re.union (str.to_re "D") (str.to_re "E"))) (re.++ (re.union (re.union (str.to_re "FF") (str.to_re "GG")) (re.+ (str.to_re "H"))) (re.++ (re.+ (re.+ (str.to_re "II"))) (re.++ (re.+ (re.* (str.to_re "JJJ"))) (re.++ (re.union (re.* (str.to_re "K")) (re.+ (str.to_re "LLL"))) (re.++ (re.+ (re.* (str.to_re "MM"))) (re.++ (re.union (re.+ (str.to_re "N")) (re.union (str.to_re "OOO") (str.to_re "PPP"))) (re.++ (re.union (re.union (str.to_re "QQ") (str.to_re "RRR")) (re.* (str.to_re "S"))) (re.++ (re.* (re.union (str.to_re "TT") (str.to_re "UU"))) (re.++ (re.union (re.* (str.to_re "VVV")) (re.+ (str.to_re "WW"))) (re.++ (re.union (re.* (str.to_re "XX")) (re.* (str.to_re "Y"))) (re.++ (re.union (re.+ (str.to_re "Z")) (re.* (str.to_re "!!"))) (re.++ (re.union (re.union (str.to_re """""""") (str.to_re "#")) (re.union (str.to_re "$$$") (str.to_re "%%"))) (re.++ (re.union (re.* (str.to_re "&&&")) (re.+ (str.to_re "'''"))) (re.++ (re.* (re.* (str.to_re "(("))) (re.++ (re.* (re.union (str.to_re ")))") (str.to_re "***"))) (re.++ (re.* (re.* (str.to_re "+"))) (re.++ (re.union (re.+ (str.to_re ",")) (re.union (str.to_re "---") (str.to_re "..."))) (re.++ (re.+ (re.+ (str.to_re "/"))) (re.++ (re.union (re.+ (str.to_re ":")) (re.+ (str.to_re ";;;"))) (re.* (re.+ (str.to_re "<<")))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
