(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (str.to_re "000")) (re.union (str.to_re "111") (str.to_re "22"))) (re.++ (re.union (re.+ (str.to_re "333")) (re.+ (str.to_re "444"))) (re.++ (re.union (re.* (str.to_re "5")) (re.* (str.to_re "66"))) (re.++ (re.* (re.+ (str.to_re "77"))) (re.++ (re.union (re.union (str.to_re "888") (str.to_re "99")) (re.+ (str.to_re "a"))) (re.++ (re.+ (re.* (str.to_re "bb"))) (re.++ (re.+ (re.+ (str.to_re "cc"))) (re.++ (re.* (re.* (str.to_re "dd"))) (re.++ (re.union (re.union (str.to_re "eee") (str.to_re "f")) (re.* (str.to_re "gg"))) (re.++ (re.+ (re.union (str.to_re "h") (str.to_re "iii"))) (re.++ (re.union (re.union (str.to_re "jjj") (str.to_re "k")) (re.+ (str.to_re "lll"))) (re.++ (re.+ (re.+ (str.to_re "mmm"))) (re.++ (re.union (re.union (str.to_re "nnn") (str.to_re "o")) (re.* (str.to_re "ppp"))) (re.++ (re.+ (re.union (str.to_re "qqq") (str.to_re "rrr"))) (re.++ (re.* (re.* (str.to_re "ss"))) (re.++ (re.* (re.+ (str.to_re "tt"))) (re.++ (re.+ (re.union (str.to_re "u") (str.to_re "vv"))) (re.++ (re.union (re.+ (str.to_re "www")) (re.+ (str.to_re "x"))) (re.++ (re.+ (re.* (str.to_re "yyy"))) (re.++ (re.+ (re.union (str.to_re "z") (str.to_re "AA"))) (re.++ (re.* (re.* (str.to_re "BB"))) (re.++ (re.union (re.* (str.to_re "CCC")) (re.+ (str.to_re "DDD"))) (re.++ (re.* (re.* (str.to_re "E"))) (re.++ (re.union (re.union (str.to_re "FFF") (str.to_re "G")) (re.+ (str.to_re "HH"))) (re.++ (re.* (re.union (str.to_re "I") (str.to_re "JJ"))) (re.++ (re.+ (re.* (str.to_re "KK"))) (re.++ (re.+ (re.union (str.to_re "LL") (str.to_re "M"))) (re.++ (re.union (re.union (str.to_re "NN") (str.to_re "O")) (re.union (str.to_re "P") (str.to_re "QQQ"))) (re.++ (re.+ (re.union (str.to_re "R") (str.to_re "SS"))) (re.++ (re.+ (re.* (str.to_re "T"))) (re.++ (re.+ (re.union (str.to_re "UUU") (str.to_re "VVV"))) (re.++ (re.* (re.+ (str.to_re "WWW"))) (re.++ (re.* (re.* (str.to_re "X"))) (re.++ (re.+ (re.+ (str.to_re "YY"))) (re.++ (re.* (re.+ (str.to_re "ZZZ"))) (re.++ (re.* (re.union (str.to_re "!!!") (str.to_re """"))) (re.++ (re.union (re.+ (str.to_re "#")) (re.* (str.to_re "$$$"))) (re.++ (re.+ (re.+ (str.to_re "%%"))) (re.++ (re.* (re.union (str.to_re "&&&") (str.to_re "''"))) (re.++ (re.* (re.+ (str.to_re "((("))) (re.++ (re.+ (re.+ (str.to_re "))"))) (re.++ (re.union (re.* (str.to_re "**")) (re.union (str.to_re "+++") (str.to_re ","))) (re.++ (re.+ (re.union (str.to_re "--") (str.to_re "..."))) (re.++ (re.* (re.+ (str.to_re "/"))) (re.++ (re.* (re.* (str.to_re ":"))) (re.++ (re.union (re.* (str.to_re ";;;")) (re.* (str.to_re "<<<"))) (re.++ (re.union (re.+ (str.to_re "==")) (re.+ (str.to_re ">"))) (re.++ (re.* (re.union (str.to_re "?") (str.to_re "@@@"))) (re.++ (re.union (re.* (str.to_re "[[")) (re.* (str.to_re "\\"))) (re.++ (re.+ (re.* (str.to_re "]"))) (re.++ (re.union (re.union (str.to_re "^") (str.to_re "_")) (re.+ (str.to_re "```"))) (re.++ (re.+ (re.+ (str.to_re "{{{"))) (re.++ (re.+ (re.* (str.to_re "||"))) (re.++ (re.+ (re.+ (str.to_re "}}"))) (re.++ (re.+ (re.+ (str.to_re "~"))) (re.++ (re.+ (re.+ (str.to_re "000"))) (re.++ (re.union (re.* (str.to_re "111")) (re.union (str.to_re "2") (str.to_re "33"))) (re.++ (re.+ (re.+ (str.to_re "444"))) (re.+ (re.* (str.to_re "5")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
