(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "0"))) (re.++ (re.* (re.+ (str.to_re "1"))) (re.++ (re.* (re.* (str.to_re "2"))) (re.++ (re.* (re.+ (str.to_re "33"))) (re.++ (re.union (re.* (str.to_re "44")) (re.+ (str.to_re "55"))) (re.++ (re.* (re.+ (str.to_re "6"))) (re.++ (re.union (re.+ (str.to_re "7")) (re.* (str.to_re "88"))) (re.++ (re.* (re.* (str.to_re "99"))) (re.++ (re.union (re.+ (str.to_re "a")) (re.+ (str.to_re "b"))) (re.++ (re.union (re.+ (str.to_re "cc")) (re.union (str.to_re "d") (str.to_re "ee"))) (re.++ (re.union (re.+ (str.to_re "f")) (re.union (str.to_re "g") (str.to_re "hhh"))) (re.++ (re.+ (re.union (str.to_re "i") (str.to_re "j"))) (re.++ (re.union (re.+ (str.to_re "kk")) (re.+ (str.to_re "l"))) (re.++ (re.+ (re.+ (str.to_re "mm"))) (re.++ (re.* (re.union (str.to_re "n") (str.to_re "oo"))) (re.++ (re.* (re.union (str.to_re "p") (str.to_re "q"))) (re.++ (re.union (re.+ (str.to_re "rrr")) (re.* (str.to_re "s"))) (re.++ (re.union (re.union (str.to_re "ttt") (str.to_re "uuu")) (re.union (str.to_re "vv") (str.to_re "w"))) (re.++ (re.union (re.union (str.to_re "x") (str.to_re "yy")) (re.* (str.to_re "zzz"))) (re.++ (re.* (re.* (str.to_re "AAA"))) (re.++ (re.* (re.* (str.to_re "BBB"))) (re.++ (re.* (re.union (str.to_re "CC") (str.to_re "DDD"))) (re.++ (re.union (re.+ (str.to_re "EE")) (re.* (str.to_re "FFF"))) (re.++ (re.union (re.+ (str.to_re "GGG")) (re.union (str.to_re "HHH") (str.to_re "III"))) (re.++ (re.* (re.union (str.to_re "J") (str.to_re "KKK"))) (re.++ (re.* (re.union (str.to_re "L") (str.to_re "MMM"))) (re.++ (re.union (re.+ (str.to_re "NNN")) (re.+ (str.to_re "OO"))) (re.++ (re.+ (re.+ (str.to_re "PPP"))) (re.++ (re.union (re.union (str.to_re "QQQ") (str.to_re "RRR")) (re.* (str.to_re "SS"))) (re.++ (re.union (re.+ (str.to_re "TT")) (re.+ (str.to_re "U"))) (re.++ (re.union (re.* (str.to_re "VVV")) (re.* (str.to_re "W"))) (re.++ (re.union (re.* (str.to_re "X")) (re.+ (str.to_re "Y"))) (re.++ (re.* (re.+ (str.to_re "ZZ"))) (re.++ (re.union (re.+ (str.to_re "!")) (re.union (str.to_re """""""") (str.to_re "###"))) (re.++ (re.union (re.union (str.to_re "$$$") (str.to_re "%%")) (re.+ (str.to_re "&"))) (re.++ (re.+ (re.* (str.to_re "''"))) (re.++ (re.union (re.+ (str.to_re "((")) (re.union (str.to_re ")") (str.to_re "*"))) (re.++ (re.+ (re.* (str.to_re "+"))) (re.++ (re.union (re.union (str.to_re ",,") (str.to_re "-")) (re.union (str.to_re "..") (str.to_re "/"))) (re.++ (re.* (re.+ (str.to_re ":::"))) (re.++ (re.+ (re.* (str.to_re ";;"))) (re.++ (re.+ (re.union (str.to_re "<<") (str.to_re "=="))) (re.++ (re.* (re.* (str.to_re ">"))) (re.++ (re.* (re.+ (str.to_re "?"))) (re.++ (re.union (re.* (str.to_re "@@@")) (re.* (str.to_re "["))) (re.++ (re.union (re.union (str.to_re "\\\\") (str.to_re "]")) (re.* (str.to_re "^^^"))) (re.++ (re.union (re.+ (str.to_re "___")) (re.* (str.to_re "```"))) (re.++ (re.* (re.union (str.to_re "{{{") (str.to_re "|||"))) (re.++ (re.union (re.+ (str.to_re "}")) (re.* (str.to_re "~~~"))) (re.++ (re.union (re.* (str.to_re "00")) (re.union (str.to_re "11") (str.to_re "2"))) (re.++ (re.* (re.+ (str.to_re "333"))) (re.++ (re.* (re.+ (str.to_re "4"))) (re.++ (re.union (re.* (str.to_re "5")) (re.* (str.to_re "6"))) (re.++ (re.union (re.+ (str.to_re "777")) (re.union (str.to_re "88") (str.to_re "999"))) (re.++ (re.+ (re.union (str.to_re "aaa") (str.to_re "bbb"))) (re.++ (re.union (re.union (str.to_re "c") (str.to_re "dd")) (re.* (str.to_re "e"))) (re.++ (re.+ (re.* (str.to_re "fff"))) (re.++ (re.+ (re.+ (str.to_re "gg"))) (re.* (re.* (str.to_re "hh")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
