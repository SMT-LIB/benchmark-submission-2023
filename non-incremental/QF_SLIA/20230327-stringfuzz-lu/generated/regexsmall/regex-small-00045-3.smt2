(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "000"))) (re.++ (re.+ (re.* (str.to_re "11"))) (re.++ (re.union (re.* (str.to_re "22")) (re.union (str.to_re "33") (str.to_re "444"))) (re.++ (re.* (re.+ (str.to_re "5"))) (re.++ (re.+ (re.+ (str.to_re "66"))) (re.++ (re.+ (re.union (str.to_re "777") (str.to_re "888"))) (re.++ (re.union (re.* (str.to_re "999")) (re.* (str.to_re "a"))) (re.++ (re.union (re.+ (str.to_re "b")) (re.union (str.to_re "ccc") (str.to_re "dd"))) (re.++ (re.* (re.* (str.to_re "eee"))) (re.++ (re.* (re.union (str.to_re "ff") (str.to_re "g"))) (re.++ (re.* (re.union (str.to_re "h") (str.to_re "ii"))) (re.++ (re.+ (re.+ (str.to_re "jjj"))) (re.++ (re.* (re.union (str.to_re "kk") (str.to_re "ll"))) (re.++ (re.+ (re.+ (str.to_re "m"))) (re.++ (re.+ (re.* (str.to_re "n"))) (re.++ (re.+ (re.+ (str.to_re "oo"))) (re.++ (re.union (re.+ (str.to_re "ppp")) (re.union (str.to_re "q") (str.to_re "rr"))) (re.++ (re.+ (re.+ (str.to_re "sss"))) (re.++ (re.* (re.+ (str.to_re "t"))) (re.++ (re.+ (re.+ (str.to_re "uu"))) (re.++ (re.union (re.* (str.to_re "v")) (re.+ (str.to_re "w"))) (re.++ (re.+ (re.* (str.to_re "xx"))) (re.++ (re.+ (re.* (str.to_re "yyy"))) (re.++ (re.+ (re.union (str.to_re "z") (str.to_re "AA"))) (re.++ (re.+ (re.* (str.to_re "BBB"))) (re.++ (re.union (re.* (str.to_re "CC")) (re.union (str.to_re "D") (str.to_re "EE"))) (re.++ (re.* (re.+ (str.to_re "F"))) (re.++ (re.+ (re.+ (str.to_re "GG"))) (re.++ (re.+ (re.union (str.to_re "HH") (str.to_re "II"))) (re.++ (re.* (re.union (str.to_re "JJ") (str.to_re "KK"))) (re.++ (re.* (re.union (str.to_re "LLL") (str.to_re "M"))) (re.++ (re.+ (re.* (str.to_re "NNN"))) (re.++ (re.union (re.union (str.to_re "OO") (str.to_re "PP")) (re.+ (str.to_re "QQQ"))) (re.++ (re.* (re.* (str.to_re "R"))) (re.++ (re.union (re.union (str.to_re "SS") (str.to_re "TT")) (re.+ (str.to_re "UUU"))) (re.++ (re.union (re.union (str.to_re "VVV") (str.to_re "WW")) (re.union (str.to_re "X") (str.to_re "Y"))) (re.++ (re.union (re.+ (str.to_re "Z")) (re.union (str.to_re "!!!") (str.to_re """"""""))) (re.++ (re.union (re.union (str.to_re "###") (str.to_re "$$$")) (re.union (str.to_re "%") (str.to_re "&&&"))) (re.++ (re.* (re.union (str.to_re "''") (str.to_re "((("))) (re.++ (re.* (re.+ (str.to_re ")"))) (re.++ (re.union (re.union (str.to_re "***") (str.to_re "+")) (re.union (str.to_re ",") (str.to_re "-"))) (re.++ (re.+ (re.+ (str.to_re ".."))) (re.++ (re.* (re.* (str.to_re "///"))) (re.++ (re.+ (re.+ (str.to_re ":::"))) (re.union (re.union (str.to_re ";;") (str.to_re "<<<")) (re.union (str.to_re "===") (str.to_re ">>")))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
