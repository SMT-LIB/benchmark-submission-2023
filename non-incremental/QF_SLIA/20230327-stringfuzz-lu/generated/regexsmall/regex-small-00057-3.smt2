(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "0"))) (re.++ (re.* (re.* (str.to_re "1"))) (re.++ (re.+ (re.* (str.to_re "2"))) (re.++ (re.+ (re.* (str.to_re "333"))) (re.++ (re.+ (re.* (str.to_re "4"))) (re.++ (re.union (re.+ (str.to_re "555")) (re.union (str.to_re "666") (str.to_re "7"))) (re.++ (re.union (re.* (str.to_re "8")) (re.* (str.to_re "999"))) (re.++ (re.+ (re.+ (str.to_re "aa"))) (re.++ (re.+ (re.* (str.to_re "bb"))) (re.++ (re.union (re.* (str.to_re "ccc")) (re.union (str.to_re "dd") (str.to_re "eee"))) (re.++ (re.union (re.* (str.to_re "f")) (re.union (str.to_re "g") (str.to_re "hhh"))) (re.++ (re.union (re.* (str.to_re "ii")) (re.union (str.to_re "j") (str.to_re "k"))) (re.++ (re.+ (re.* (str.to_re "l"))) (re.++ (re.* (re.+ (str.to_re "mm"))) (re.++ (re.* (re.union (str.to_re "nn") (str.to_re "ooo"))) (re.++ (re.+ (re.* (str.to_re "pp"))) (re.++ (re.union (re.union (str.to_re "q") (str.to_re "rrr")) (re.* (str.to_re "s"))) (re.++ (re.* (re.+ (str.to_re "ttt"))) (re.++ (re.union (re.+ (str.to_re "uuu")) (re.* (str.to_re "v"))) (re.++ (re.+ (re.union (str.to_re "ww") (str.to_re "xxx"))) (re.++ (re.* (re.union (str.to_re "y") (str.to_re "zz"))) (re.++ (re.+ (re.union (str.to_re "AAA") (str.to_re "BBB"))) (re.++ (re.+ (re.+ (str.to_re "CCC"))) (re.++ (re.union (re.* (str.to_re "DD")) (re.+ (str.to_re "E"))) (re.++ (re.* (re.union (str.to_re "F") (str.to_re "GGG"))) (re.++ (re.union (re.* (str.to_re "HH")) (re.union (str.to_re "III") (str.to_re "JJ"))) (re.++ (re.+ (re.* (str.to_re "K"))) (re.++ (re.* (re.union (str.to_re "LLL") (str.to_re "M"))) (re.++ (re.union (re.union (str.to_re "NNN") (str.to_re "OOO")) (re.+ (str.to_re "PPP"))) (re.++ (re.union (re.union (str.to_re "Q") (str.to_re "R")) (re.* (str.to_re "S"))) (re.++ (re.* (re.union (str.to_re "TT") (str.to_re "U"))) (re.++ (re.+ (re.union (str.to_re "VVV") (str.to_re "W"))) (re.++ (re.union (re.* (str.to_re "X")) (re.* (str.to_re "YY"))) (re.++ (re.+ (re.* (str.to_re "ZZ"))) (re.++ (re.+ (re.* (str.to_re "!"))) (re.++ (re.union (re.* (str.to_re """""")) (re.* (str.to_re "##"))) (re.++ (re.union (re.+ (str.to_re "$$$")) (re.union (str.to_re "%") (str.to_re "&&&"))) (re.++ (re.+ (re.+ (str.to_re "'''"))) (re.++ (re.* (re.+ (str.to_re "(("))) (re.++ (re.union (re.union (str.to_re ")))") (str.to_re "*")) (re.+ (str.to_re "+"))) (re.++ (re.* (re.+ (str.to_re ",,,"))) (re.++ (re.* (re.+ (str.to_re "-"))) (re.++ (re.union (re.union (str.to_re "...") (str.to_re "///")) (re.+ (str.to_re "::"))) (re.++ (re.union (re.* (str.to_re ";")) (re.+ (str.to_re "<"))) (re.++ (re.union (re.+ (str.to_re "===")) (re.union (str.to_re ">") (str.to_re "??"))) (re.++ (re.union (re.* (str.to_re "@@")) (re.union (str.to_re "[[[") (str.to_re "\\\\\\"))) (re.++ (re.+ (re.* (str.to_re "]]]"))) (re.++ (re.* (re.* (str.to_re "^^^"))) (re.++ (re.union (re.* (str.to_re "___")) (re.union (str.to_re "`") (str.to_re "{{{"))) (re.++ (re.* (re.union (str.to_re "|||") (str.to_re "}}"))) (re.++ (re.* (re.+ (str.to_re "~"))) (re.++ (re.* (re.union (str.to_re "00") (str.to_re "11"))) (re.++ (re.+ (re.union (str.to_re "2") (str.to_re "333"))) (re.++ (re.+ (re.union (str.to_re "4") (str.to_re "5"))) (re.++ (re.* (re.+ (str.to_re "666"))) (re.++ (re.* (re.+ (str.to_re "777"))) (re.+ (re.union (str.to_re "888") (str.to_re "9")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
