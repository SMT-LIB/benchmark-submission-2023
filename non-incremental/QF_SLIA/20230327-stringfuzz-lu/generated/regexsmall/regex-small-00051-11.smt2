(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.* (str.to_re "0"))) (re.++ (re.union (re.* (str.to_re "111")) (re.union (str.to_re "2") (str.to_re "333"))) (re.++ (re.+ (re.union (str.to_re "44") (str.to_re "5"))) (re.++ (re.* (re.+ (str.to_re "66"))) (re.++ (re.union (re.+ (str.to_re "77")) (re.union (str.to_re "88") (str.to_re "999"))) (re.++ (re.union (re.* (str.to_re "a")) (re.+ (str.to_re "bbb"))) (re.++ (re.* (re.+ (str.to_re "c"))) (re.++ (re.+ (re.+ (str.to_re "dd"))) (re.++ (re.+ (re.* (str.to_re "eee"))) (re.++ (re.union (re.+ (str.to_re "ff")) (re.+ (str.to_re "ggg"))) (re.++ (re.union (re.union (str.to_re "hh") (str.to_re "iii")) (re.+ (str.to_re "j"))) (re.++ (re.union (re.* (str.to_re "kk")) (re.* (str.to_re "l"))) (re.++ (re.union (re.+ (str.to_re "mmm")) (re.union (str.to_re "n") (str.to_re "o"))) (re.++ (re.union (re.+ (str.to_re "p")) (re.union (str.to_re "qqq") (str.to_re "rrr"))) (re.++ (re.* (re.* (str.to_re "s"))) (re.++ (re.union (re.+ (str.to_re "ttt")) (re.* (str.to_re "uuu"))) (re.++ (re.* (re.* (str.to_re "vv"))) (re.++ (re.union (re.union (str.to_re "ww") (str.to_re "xxx")) (re.+ (str.to_re "yy"))) (re.++ (re.union (re.+ (str.to_re "zz")) (re.* (str.to_re "AAA"))) (re.++ (re.+ (re.* (str.to_re "BB"))) (re.++ (re.+ (re.+ (str.to_re "C"))) (re.++ (re.+ (re.union (str.to_re "D") (str.to_re "EEE"))) (re.++ (re.union (re.+ (str.to_re "FFF")) (re.* (str.to_re "G"))) (re.++ (re.union (re.* (str.to_re "HH")) (re.* (str.to_re "I"))) (re.++ (re.union (re.* (str.to_re "J")) (re.+ (str.to_re "KKK"))) (re.++ (re.+ (re.union (str.to_re "LLL") (str.to_re "M"))) (re.++ (re.union (re.* (str.to_re "NN")) (re.union (str.to_re "OO") (str.to_re "PPP"))) (re.++ (re.union (re.+ (str.to_re "Q")) (re.union (str.to_re "RRR") (str.to_re "SSS"))) (re.++ (re.union (re.+ (str.to_re "T")) (re.* (str.to_re "UU"))) (re.++ (re.* (re.* (str.to_re "VV"))) (re.++ (re.+ (re.union (str.to_re "WWW") (str.to_re "XXX"))) (re.++ (re.union (re.union (str.to_re "YY") (str.to_re "ZZ")) (re.+ (str.to_re "!!!"))) (re.++ (re.+ (re.+ (str.to_re """"""))) (re.++ (re.* (re.* (str.to_re "##"))) (re.++ (re.+ (re.+ (str.to_re "$"))) (re.++ (re.+ (re.+ (str.to_re "%"))) (re.++ (re.union (re.union (str.to_re "&&") (str.to_re "'''")) (re.union (str.to_re "(") (str.to_re ")"))) (re.++ (re.+ (re.union (str.to_re "*") (str.to_re "+"))) (re.++ (re.* (re.+ (str.to_re ",,,"))) (re.++ (re.union (re.union (str.to_re "-") (str.to_re ".")) (re.union (str.to_re "///") (str.to_re ":"))) (re.++ (re.union (re.* (str.to_re ";")) (re.union (str.to_re "<") (str.to_re "==="))) (re.++ (re.* (re.union (str.to_re ">") (str.to_re "??"))) (re.++ (re.* (re.+ (str.to_re "@@"))) (re.++ (re.union (re.* (str.to_re "[")) (re.union (str.to_re "\\") (str.to_re "]"))) (re.++ (re.* (re.* (str.to_re "^^^"))) (re.++ (re.union (re.+ (str.to_re "_")) (re.* (str.to_re "``"))) (re.++ (re.* (re.+ (str.to_re "{"))) (re.++ (re.* (re.union (str.to_re "|") (str.to_re "}"))) (re.++ (re.+ (re.union (str.to_re "~~") (str.to_re "00"))) (re.++ (re.* (re.union (str.to_re "111") (str.to_re "222"))) (re.union (re.+ (str.to_re "33")) (re.union (str.to_re "4") (str.to_re "555")))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
