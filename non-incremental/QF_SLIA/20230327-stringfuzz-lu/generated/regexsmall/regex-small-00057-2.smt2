(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (str.to_re "0")) (re.* (str.to_re "111"))) (re.++ (re.+ (re.union (str.to_re "2") (str.to_re "333"))) (re.++ (re.union (re.+ (str.to_re "44")) (re.* (str.to_re "555"))) (re.++ (re.union (re.+ (str.to_re "6")) (re.* (str.to_re "77"))) (re.++ (re.union (re.+ (str.to_re "8")) (re.union (str.to_re "9") (str.to_re "aa"))) (re.++ (re.* (re.union (str.to_re "bb") (str.to_re "cc"))) (re.++ (re.+ (re.+ (str.to_re "ddd"))) (re.++ (re.+ (re.+ (str.to_re "eee"))) (re.++ (re.union (re.+ (str.to_re "ff")) (re.* (str.to_re "g"))) (re.++ (re.+ (re.* (str.to_re "hh"))) (re.++ (re.+ (re.union (str.to_re "ii") (str.to_re "jjj"))) (re.++ (re.union (re.+ (str.to_re "kk")) (re.+ (str.to_re "ll"))) (re.++ (re.union (re.union (str.to_re "m") (str.to_re "n")) (re.+ (str.to_re "o"))) (re.++ (re.* (re.* (str.to_re "pp"))) (re.++ (re.union (re.* (str.to_re "qqq")) (re.+ (str.to_re "rr"))) (re.++ (re.union (re.union (str.to_re "ss") (str.to_re "tt")) (re.* (str.to_re "u"))) (re.++ (re.* (re.+ (str.to_re "v"))) (re.++ (re.+ (re.* (str.to_re "www"))) (re.++ (re.* (re.union (str.to_re "xx") (str.to_re "yyy"))) (re.++ (re.+ (re.* (str.to_re "zz"))) (re.++ (re.union (re.union (str.to_re "AAA") (str.to_re "B")) (re.+ (str.to_re "CCC"))) (re.++ (re.union (re.union (str.to_re "D") (str.to_re "EE")) (re.* (str.to_re "FF"))) (re.++ (re.union (re.+ (str.to_re "G")) (re.union (str.to_re "HH") (str.to_re "I"))) (re.++ (re.* (re.* (str.to_re "JJ"))) (re.++ (re.union (re.* (str.to_re "KKK")) (re.+ (str.to_re "L"))) (re.++ (re.+ (re.* (str.to_re "M"))) (re.++ (re.* (re.union (str.to_re "NN") (str.to_re "O"))) (re.++ (re.+ (re.+ (str.to_re "P"))) (re.++ (re.+ (re.* (str.to_re "Q"))) (re.++ (re.+ (re.+ (str.to_re "RRR"))) (re.++ (re.* (re.* (str.to_re "S"))) (re.++ (re.union (re.+ (str.to_re "TTT")) (re.* (str.to_re "UU"))) (re.++ (re.+ (re.+ (str.to_re "VVV"))) (re.++ (re.+ (re.+ (str.to_re "WW"))) (re.++ (re.union (re.* (str.to_re "X")) (re.+ (str.to_re "YY"))) (re.++ (re.union (re.* (str.to_re "ZZZ")) (re.union (str.to_re "!") (str.to_re """"))) (re.++ (re.* (re.* (str.to_re "##"))) (re.++ (re.* (re.* (str.to_re "$$$"))) (re.++ (re.* (re.+ (str.to_re "%%%"))) (re.++ (re.+ (re.* (str.to_re "&&"))) (re.++ (re.union (re.union (str.to_re "'") (str.to_re "(")) (re.* (str.to_re ")"))) (re.++ (re.union (re.+ (str.to_re "**")) (re.union (str.to_re "++") (str.to_re ",,"))) (re.++ (re.union (re.* (str.to_re "-")) (re.+ (str.to_re "..."))) (re.++ (re.union (re.* (str.to_re "///")) (re.+ (str.to_re ":::"))) (re.++ (re.+ (re.union (str.to_re ";;;") (str.to_re "<<"))) (re.++ (re.* (re.+ (str.to_re "==="))) (re.++ (re.* (re.+ (str.to_re ">"))) (re.++ (re.* (re.union (str.to_re "???") (str.to_re "@"))) (re.++ (re.union (re.union (str.to_re "[[") (str.to_re "\\")) (re.+ (str.to_re "]"))) (re.++ (re.* (re.+ (str.to_re "^^^"))) (re.++ (re.+ (re.* (str.to_re "__"))) (re.++ (re.union (re.* (str.to_re "``")) (re.union (str.to_re "{") (str.to_re "|||"))) (re.++ (re.+ (re.+ (str.to_re "}}}"))) (re.++ (re.* (re.union (str.to_re "~~") (str.to_re "000"))) (re.++ (re.* (re.+ (str.to_re "11"))) (re.++ (re.+ (re.* (str.to_re "2"))) (re.* (re.+ (str.to_re "3")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
