(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "000") (str.to_re "1"))) (re.++ (re.union (re.* (str.to_re "2")) (re.* (str.to_re "3"))) (re.++ (re.union (re.* (str.to_re "4")) (re.* (str.to_re "5"))) (re.++ (re.* (re.+ (str.to_re "666"))) (re.++ (re.union (re.+ (str.to_re "77")) (re.+ (str.to_re "8"))) (re.++ (re.+ (re.* (str.to_re "99"))) (re.++ (re.+ (re.union (str.to_re "aa") (str.to_re "bb"))) (re.++ (re.* (re.+ (str.to_re "cc"))) (re.++ (re.+ (re.* (str.to_re "d"))) (re.++ (re.union (re.+ (str.to_re "eee")) (re.+ (str.to_re "f"))) (re.++ (re.union (re.union (str.to_re "g") (str.to_re "hh")) (re.union (str.to_re "iii") (str.to_re "jj"))) (re.++ (re.+ (re.union (str.to_re "kkk") (str.to_re "l"))) (re.++ (re.+ (re.* (str.to_re "mm"))) (re.++ (re.union (re.+ (str.to_re "n")) (re.union (str.to_re "o") (str.to_re "ppp"))) (re.++ (re.* (re.union (str.to_re "q") (str.to_re "r"))) (re.++ (re.union (re.* (str.to_re "ss")) (re.union (str.to_re "t") (str.to_re "u"))) (re.++ (re.* (re.+ (str.to_re "vv"))) (re.++ (re.union (re.+ (str.to_re "w")) (re.+ (str.to_re "xx"))) (re.++ (re.* (re.union (str.to_re "yyy") (str.to_re "z"))) (re.++ (re.* (re.+ (str.to_re "AAA"))) (re.++ (re.union (re.union (str.to_re "B") (str.to_re "C")) (re.+ (str.to_re "D"))) (re.++ (re.+ (re.+ (str.to_re "EEE"))) (re.++ (re.union (re.+ (str.to_re "FF")) (re.+ (str.to_re "G"))) (re.++ (re.+ (re.union (str.to_re "HH") (str.to_re "I"))) (re.++ (re.* (re.* (str.to_re "J"))) (re.++ (re.union (re.* (str.to_re "K")) (re.+ (str.to_re "LLL"))) (re.++ (re.* (re.union (str.to_re "M") (str.to_re "NN"))) (re.++ (re.+ (re.union (str.to_re "OO") (str.to_re "P"))) (re.++ (re.union (re.+ (str.to_re "QQ")) (re.+ (str.to_re "R"))) (re.++ (re.* (re.union (str.to_re "SS") (str.to_re "TT"))) (re.++ (re.+ (re.union (str.to_re "UU") (str.to_re "VVV"))) (re.++ (re.+ (re.* (str.to_re "WWW"))) (re.++ (re.* (re.* (str.to_re "XX"))) (re.++ (re.union (re.union (str.to_re "Y") (str.to_re "ZZ")) (re.union (str.to_re "!!") (str.to_re """"))) (re.++ (re.+ (re.union (str.to_re "#") (str.to_re "$"))) (re.++ (re.+ (re.union (str.to_re "%%") (str.to_re "&&"))) (re.++ (re.+ (re.union (str.to_re "'''") (str.to_re "("))) (re.++ (re.* (re.union (str.to_re "))") (str.to_re "*"))) (re.++ (re.+ (re.+ (str.to_re "+"))) (re.++ (re.union (re.+ (str.to_re ",,")) (re.+ (str.to_re "-"))) (re.++ (re.* (re.* (str.to_re ".."))) (re.++ (re.union (re.union (str.to_re "/") (str.to_re "::")) (re.* (str.to_re ";;;"))) (re.++ (re.* (re.+ (str.to_re "<<"))) (re.++ (re.+ (re.+ (str.to_re "=="))) (re.++ (re.+ (re.+ (str.to_re ">>"))) (re.++ (re.union (re.union (str.to_re "?") (str.to_re "@@@")) (re.+ (str.to_re "[["))) (re.++ (re.union (re.+ (str.to_re "\\")) (re.* (str.to_re "]]"))) (re.++ (re.+ (re.* (str.to_re "^"))) (re.++ (re.union (re.* (str.to_re "_")) (re.+ (str.to_re "`"))) (re.++ (re.* (re.+ (str.to_re "{"))) (re.++ (re.+ (re.union (str.to_re "|") (str.to_re "}}}"))) (re.++ (re.union (re.+ (str.to_re "~~")) (re.union (str.to_re "000") (str.to_re "11"))) (re.++ (re.* (re.* (str.to_re "2"))) (re.++ (re.union (re.* (str.to_re "33")) (re.+ (str.to_re "4"))) (re.+ (re.* (str.to_re "55")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
