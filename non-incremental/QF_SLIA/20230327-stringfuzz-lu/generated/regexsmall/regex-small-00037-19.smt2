(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "00"))) (re.++ (re.union (re.+ (str.to_re "11")) (re.+ (str.to_re "22"))) (re.++ (re.union (re.+ (str.to_re "3")) (re.* (str.to_re "44"))) (re.++ (re.union (re.union (str.to_re "5") (str.to_re "666")) (re.* (str.to_re "77"))) (re.++ (re.* (re.* (str.to_re "88"))) (re.++ (re.+ (re.* (str.to_re "99"))) (re.++ (re.+ (re.* (str.to_re "a"))) (re.++ (re.* (re.* (str.to_re "bb"))) (re.++ (re.union (re.union (str.to_re "cc") (str.to_re "dd")) (re.* (str.to_re "ee"))) (re.++ (re.* (re.+ (str.to_re "ff"))) (re.++ (re.union (re.union (str.to_re "gg") (str.to_re "hh")) (re.* (str.to_re "iii"))) (re.++ (re.union (re.+ (str.to_re "jj")) (re.union (str.to_re "kkk") (str.to_re "lll"))) (re.++ (re.* (re.+ (str.to_re "mm"))) (re.++ (re.union (re.union (str.to_re "n") (str.to_re "oo")) (re.union (str.to_re "pp") (str.to_re "q"))) (re.++ (re.union (re.* (str.to_re "rr")) (re.+ (str.to_re "sss"))) (re.++ (re.union (re.* (str.to_re "ttt")) (re.+ (str.to_re "uuu"))) (re.++ (re.+ (re.* (str.to_re "vvv"))) (re.++ (re.union (re.* (str.to_re "w")) (re.* (str.to_re "x"))) (re.++ (re.+ (re.union (str.to_re "y") (str.to_re "zz"))) (re.++ (re.* (re.+ (str.to_re "A"))) (re.++ (re.union (re.* (str.to_re "BBB")) (re.+ (str.to_re "C"))) (re.++ (re.* (re.union (str.to_re "DD") (str.to_re "EE"))) (re.++ (re.union (re.* (str.to_re "F")) (re.union (str.to_re "GG") (str.to_re "HH"))) (re.++ (re.union (re.+ (str.to_re "I")) (re.+ (str.to_re "J"))) (re.++ (re.union (re.* (str.to_re "KK")) (re.union (str.to_re "LL") (str.to_re "M"))) (re.++ (re.* (re.* (str.to_re "NNN"))) (re.++ (re.+ (re.* (str.to_re "OO"))) (re.++ (re.+ (re.* (str.to_re "PPP"))) (re.++ (re.+ (re.* (str.to_re "QQ"))) (re.++ (re.+ (re.* (str.to_re "RR"))) (re.++ (re.union (re.union (str.to_re "S") (str.to_re "T")) (re.* (str.to_re "U"))) (re.++ (re.+ (re.+ (str.to_re "V"))) (re.++ (re.union (re.* (str.to_re "W")) (re.union (str.to_re "XX") (str.to_re "YYY"))) (re.++ (re.union (re.union (str.to_re "ZZZ") (str.to_re "!")) (re.union (str.to_re """") (str.to_re "#"))) (re.++ (re.* (re.union (str.to_re "$$") (str.to_re "%%"))) (re.++ (re.* (re.union (str.to_re "&&") (str.to_re "'''"))) (re.* (re.* (str.to_re "(")))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
