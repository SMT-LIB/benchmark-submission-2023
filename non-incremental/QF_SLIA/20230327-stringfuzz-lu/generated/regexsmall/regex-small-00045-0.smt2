(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (str.to_re "000")) (re.+ (str.to_re "11"))) (re.++ (re.* (re.union (str.to_re "222") (str.to_re "333"))) (re.++ (re.+ (re.+ (str.to_re "44"))) (re.++ (re.+ (re.* (str.to_re "5"))) (re.++ (re.* (re.+ (str.to_re "66"))) (re.++ (re.+ (re.+ (str.to_re "777"))) (re.++ (re.* (re.* (str.to_re "88"))) (re.++ (re.* (re.union (str.to_re "999") (str.to_re "aaa"))) (re.++ (re.union (re.* (str.to_re "bbb")) (re.+ (str.to_re "ccc"))) (re.++ (re.union (re.* (str.to_re "dd")) (re.union (str.to_re "e") (str.to_re "fff"))) (re.++ (re.* (re.* (str.to_re "gg"))) (re.++ (re.union (re.* (str.to_re "hh")) (re.+ (str.to_re "iii"))) (re.++ (re.union (re.union (str.to_re "jjj") (str.to_re "kkk")) (re.union (str.to_re "ll") (str.to_re "mmm"))) (re.++ (re.* (re.union (str.to_re "nnn") (str.to_re "o"))) (re.++ (re.* (re.* (str.to_re "p"))) (re.++ (re.* (re.* (str.to_re "qq"))) (re.++ (re.* (re.union (str.to_re "r") (str.to_re "sss"))) (re.++ (re.+ (re.* (str.to_re "tt"))) (re.++ (re.union (re.union (str.to_re "uuu") (str.to_re "v")) (re.union (str.to_re "www") (str.to_re "xx"))) (re.++ (re.* (re.+ (str.to_re "yyy"))) (re.++ (re.* (re.* (str.to_re "zzz"))) (re.++ (re.+ (re.union (str.to_re "AAA") (str.to_re "B"))) (re.++ (re.union (re.union (str.to_re "C") (str.to_re "D")) (re.* (str.to_re "E"))) (re.++ (re.union (re.* (str.to_re "F")) (re.* (str.to_re "GG"))) (re.++ (re.union (re.+ (str.to_re "HH")) (re.union (str.to_re "III") (str.to_re "J"))) (re.++ (re.* (re.* (str.to_re "KKK"))) (re.++ (re.union (re.+ (str.to_re "LL")) (re.* (str.to_re "MM"))) (re.++ (re.* (re.* (str.to_re "NNN"))) (re.++ (re.union (re.union (str.to_re "OO") (str.to_re "PPP")) (re.* (str.to_re "QQ"))) (re.++ (re.* (re.* (str.to_re "R"))) (re.++ (re.* (re.+ (str.to_re "SS"))) (re.++ (re.+ (re.+ (str.to_re "TTT"))) (re.++ (re.union (re.* (str.to_re "U")) (re.* (str.to_re "V"))) (re.++ (re.+ (re.+ (str.to_re "WWW"))) (re.++ (re.+ (re.* (str.to_re "X"))) (re.++ (re.* (re.union (str.to_re "Y") (str.to_re "ZZ"))) (re.++ (re.* (re.+ (str.to_re "!!"))) (re.++ (re.+ (re.+ (str.to_re """"""))) (re.++ (re.* (re.union (str.to_re "#") (str.to_re "$$$"))) (re.++ (re.union (re.* (str.to_re "%%%")) (re.* (str.to_re "&"))) (re.++ (re.union (re.+ (str.to_re "'''")) (re.* (str.to_re "("))) (re.++ (re.* (re.+ (str.to_re ")"))) (re.++ (re.* (re.* (str.to_re "**"))) (re.++ (re.+ (re.union (str.to_re "++") (str.to_re ",,"))) (re.* (re.union (str.to_re "-") (str.to_re ".")))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
