(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "000") (str.to_re "1"))) (re.++ (re.+ (re.* (str.to_re "222"))) (re.++ (re.+ (re.* (str.to_re "333"))) (re.++ (re.union (re.union (str.to_re "44") (str.to_re "55")) (re.union (str.to_re "666") (str.to_re "77"))) (re.++ (re.* (re.* (str.to_re "8"))) (re.++ (re.* (re.* (str.to_re "999"))) (re.++ (re.union (re.union (str.to_re "aa") (str.to_re "bb")) (re.* (str.to_re "c"))) (re.++ (re.+ (re.+ (str.to_re "ddd"))) (re.++ (re.* (re.union (str.to_re "ee") (str.to_re "ff"))) (re.++ (re.union (re.* (str.to_re "gg")) (re.union (str.to_re "h") (str.to_re "ii"))) (re.++ (re.union (re.union (str.to_re "jjj") (str.to_re "kkk")) (re.* (str.to_re "l"))) (re.++ (re.+ (re.union (str.to_re "mmm") (str.to_re "n"))) (re.++ (re.+ (re.* (str.to_re "ooo"))) (re.++ (re.+ (re.+ (str.to_re "ppp"))) (re.++ (re.* (re.union (str.to_re "q") (str.to_re "rr"))) (re.++ (re.union (re.union (str.to_re "sss") (str.to_re "ttt")) (re.* (str.to_re "uuu"))) (re.++ (re.* (re.union (str.to_re "v") (str.to_re "w"))) (re.++ (re.union (re.+ (str.to_re "xx")) (re.+ (str.to_re "yy"))) (re.++ (re.union (re.* (str.to_re "zz")) (re.union (str.to_re "AA") (str.to_re "BB"))) (re.++ (re.+ (re.* (str.to_re "CC"))) (re.++ (re.* (re.+ (str.to_re "DD"))) (re.++ (re.* (re.+ (str.to_re "EE"))) (re.++ (re.+ (re.+ (str.to_re "FF"))) (re.++ (re.+ (re.+ (str.to_re "G"))) (re.++ (re.union (re.+ (str.to_re "HHH")) (re.* (str.to_re "III"))) (re.++ (re.union (re.* (str.to_re "JJ")) (re.union (str.to_re "K") (str.to_re "L"))) (re.++ (re.union (re.union (str.to_re "M") (str.to_re "NN")) (re.+ (str.to_re "O"))) (re.++ (re.+ (re.+ (str.to_re "P"))) (re.++ (re.+ (re.* (str.to_re "QQQ"))) (re.++ (re.+ (re.+ (str.to_re "RR"))) (re.++ (re.+ (re.union (str.to_re "SS") (str.to_re "TTT"))) (re.++ (re.union (re.* (str.to_re "UU")) (re.* (str.to_re "V"))) (re.++ (re.+ (re.+ (str.to_re "WWW"))) (re.++ (re.union (re.union (str.to_re "XXX") (str.to_re "YY")) (re.* (str.to_re "Z"))) (re.++ (re.+ (re.* (str.to_re "!!"))) (re.++ (re.* (re.union (str.to_re """""") (str.to_re "###"))) (re.++ (re.+ (re.+ (str.to_re "$"))) (re.++ (re.union (re.union (str.to_re "%") (str.to_re "&&")) (re.+ (str.to_re "'''"))) (re.++ (re.* (re.union (str.to_re "(") (str.to_re ")"))) (re.++ (re.union (re.union (str.to_re "*") (str.to_re "+++")) (re.union (str.to_re ",") (str.to_re "---"))) (re.++ (re.* (re.union (str.to_re ".") (str.to_re "/"))) (re.++ (re.* (re.* (str.to_re ":::"))) (re.++ (re.* (re.+ (str.to_re ";;"))) (re.++ (re.* (re.* (str.to_re "<"))) (re.++ (re.* (re.union (str.to_re "=") (str.to_re ">>"))) (re.++ (re.* (re.+ (str.to_re "?"))) (re.++ (re.union (re.* (str.to_re "@@@")) (re.* (str.to_re "[[["))) (re.++ (re.union (re.+ (str.to_re "\\")) (re.* (str.to_re "]"))) (re.++ (re.* (re.* (str.to_re "^"))) (re.++ (re.+ (re.+ (str.to_re "_"))) (re.++ (re.* (re.+ (str.to_re "```"))) (re.++ (re.* (re.+ (str.to_re "{"))) (re.+ (re.union (str.to_re "|") (str.to_re "}}}")))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
