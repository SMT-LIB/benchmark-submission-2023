(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (str.to_re "0")) (re.union (str.to_re "111") (str.to_re "2"))) (re.++ (re.* (re.* (str.to_re "3"))) (re.++ (re.+ (re.union (str.to_re "4") (str.to_re "555"))) (re.++ (re.+ (re.+ (str.to_re "66"))) (re.++ (re.+ (re.* (str.to_re "7"))) (re.++ (re.+ (re.* (str.to_re "8"))) (re.++ (re.union (re.* (str.to_re "9")) (re.* (str.to_re "aaa"))) (re.++ (re.union (re.union (str.to_re "bb") (str.to_re "ccc")) (re.union (str.to_re "d") (str.to_re "e"))) (re.++ (re.* (re.+ (str.to_re "fff"))) (re.++ (re.union (re.union (str.to_re "ggg") (str.to_re "hh")) (re.union (str.to_re "i") (str.to_re "jj"))) (re.++ (re.union (re.+ (str.to_re "kkk")) (re.union (str.to_re "lll") (str.to_re "m"))) (re.++ (re.* (re.* (str.to_re "nn"))) (re.++ (re.* (re.+ (str.to_re "ooo"))) (re.++ (re.union (re.+ (str.to_re "pp")) (re.* (str.to_re "q"))) (re.++ (re.+ (re.* (str.to_re "r"))) (re.++ (re.union (re.+ (str.to_re "ss")) (re.+ (str.to_re "t"))) (re.++ (re.* (re.+ (str.to_re "u"))) (re.++ (re.+ (re.union (str.to_re "vvv") (str.to_re "ww"))) (re.++ (re.* (re.union (str.to_re "x") (str.to_re "yyy"))) (re.++ (re.+ (re.* (str.to_re "zzz"))) (re.++ (re.* (re.+ (str.to_re "AA"))) (re.++ (re.* (re.union (str.to_re "B") (str.to_re "C"))) (re.++ (re.union (re.+ (str.to_re "DDD")) (re.* (str.to_re "E"))) (re.++ (re.union (re.union (str.to_re "F") (str.to_re "G")) (re.* (str.to_re "H"))) (re.++ (re.* (re.* (str.to_re "I"))) (re.++ (re.* (re.+ (str.to_re "JJ"))) (re.++ (re.* (re.* (str.to_re "K"))) (re.++ (re.+ (re.+ (str.to_re "LL"))) (re.++ (re.union (re.* (str.to_re "MMM")) (re.+ (str.to_re "NNN"))) (re.++ (re.union (re.union (str.to_re "OOO") (str.to_re "PP")) (re.union (str.to_re "QQ") (str.to_re "RR"))) (re.++ (re.* (re.union (str.to_re "SSS") (str.to_re "T"))) (re.++ (re.+ (re.* (str.to_re "UU"))) (re.++ (re.union (re.+ (str.to_re "V")) (re.+ (str.to_re "W"))) (re.++ (re.* (re.union (str.to_re "XX") (str.to_re "YY"))) (re.++ (re.+ (re.* (str.to_re "ZZZ"))) (re.++ (re.union (re.* (str.to_re "!!")) (re.union (str.to_re """""""") (str.to_re "##"))) (re.++ (re.union (re.* (str.to_re "$")) (re.* (str.to_re "%"))) (re.++ (re.* (re.union (str.to_re "&&") (str.to_re "'''"))) (re.++ (re.* (re.* (str.to_re "("))) (re.++ (re.+ (re.union (str.to_re "))") (str.to_re "**"))) (re.++ (re.+ (re.* (str.to_re "+++"))) (re.++ (re.+ (re.union (str.to_re ",,,") (str.to_re "-"))) (re.++ (re.+ (re.union (str.to_re "..") (str.to_re "///"))) (re.++ (re.union (re.+ (str.to_re ":")) (re.+ (str.to_re ";"))) (re.++ (re.union (re.* (str.to_re "<<<")) (re.* (str.to_re "==="))) (re.++ (re.union (re.union (str.to_re ">>>") (str.to_re "??")) (re.* (str.to_re "@"))) (re.++ (re.+ (re.+ (str.to_re "["))) (re.++ (re.* (re.+ (str.to_re "\\\\\\"))) (re.++ (re.union (re.+ (str.to_re "]]")) (re.* (str.to_re "^"))) (re.++ (re.+ (re.+ (str.to_re "__"))) (re.++ (re.* (re.* (str.to_re "``"))) (re.++ (re.union (re.* (str.to_re "{{")) (re.+ (str.to_re "|||"))) (re.++ (re.+ (re.+ (str.to_re "}}"))) (re.++ (re.* (re.* (str.to_re "~"))) (re.* (re.union (str.to_re "00") (str.to_re "111")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
