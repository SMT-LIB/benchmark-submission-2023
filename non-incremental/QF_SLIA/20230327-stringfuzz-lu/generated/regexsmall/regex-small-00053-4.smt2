(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (str.to_re "000")) (re.+ (str.to_re "111"))) (re.++ (re.union (re.union (str.to_re "222") (str.to_re "333")) (re.* (str.to_re "44"))) (re.++ (re.* (re.* (str.to_re "5"))) (re.++ (re.+ (re.* (str.to_re "66"))) (re.++ (re.union (re.+ (str.to_re "77")) (re.* (str.to_re "88"))) (re.++ (re.* (re.+ (str.to_re "9"))) (re.++ (re.+ (re.* (str.to_re "aa"))) (re.++ (re.* (re.* (str.to_re "bbb"))) (re.++ (re.* (re.union (str.to_re "c") (str.to_re "ddd"))) (re.++ (re.* (re.union (str.to_re "e") (str.to_re "f"))) (re.++ (re.union (re.+ (str.to_re "g")) (re.union (str.to_re "hh") (str.to_re "ii"))) (re.++ (re.+ (re.+ (str.to_re "jj"))) (re.++ (re.* (re.+ (str.to_re "kk"))) (re.++ (re.+ (re.* (str.to_re "l"))) (re.++ (re.* (re.+ (str.to_re "mmm"))) (re.++ (re.union (re.+ (str.to_re "nn")) (re.+ (str.to_re "ooo"))) (re.++ (re.union (re.* (str.to_re "ppp")) (re.+ (str.to_re "q"))) (re.++ (re.union (re.union (str.to_re "rrr") (str.to_re "sss")) (re.union (str.to_re "ttt") (str.to_re "uu"))) (re.++ (re.+ (re.+ (str.to_re "vvv"))) (re.++ (re.* (re.* (str.to_re "w"))) (re.++ (re.* (re.+ (str.to_re "x"))) (re.++ (re.* (re.+ (str.to_re "yy"))) (re.++ (re.* (re.* (str.to_re "z"))) (re.++ (re.* (re.* (str.to_re "AAA"))) (re.++ (re.+ (re.+ (str.to_re "BBB"))) (re.++ (re.* (re.+ (str.to_re "C"))) (re.++ (re.+ (re.+ (str.to_re "DD"))) (re.++ (re.+ (re.* (str.to_re "EEE"))) (re.++ (re.+ (re.* (str.to_re "F"))) (re.++ (re.+ (re.* (str.to_re "G"))) (re.++ (re.+ (re.union (str.to_re "HHH") (str.to_re "II"))) (re.++ (re.* (re.* (str.to_re "J"))) (re.++ (re.union (re.+ (str.to_re "KK")) (re.* (str.to_re "L"))) (re.++ (re.* (re.+ (str.to_re "M"))) (re.++ (re.* (re.union (str.to_re "N") (str.to_re "OOO"))) (re.++ (re.* (re.* (str.to_re "P"))) (re.++ (re.+ (re.union (str.to_re "Q") (str.to_re "RRR"))) (re.++ (re.* (re.+ (str.to_re "S"))) (re.++ (re.union (re.union (str.to_re "T") (str.to_re "UUU")) (re.* (str.to_re "V"))) (re.++ (re.+ (re.+ (str.to_re "WWW"))) (re.++ (re.union (re.union (str.to_re "X") (str.to_re "Y")) (re.union (str.to_re "Z") (str.to_re "!!"))) (re.++ (re.* (re.union (str.to_re """") (str.to_re "###"))) (re.++ (re.union (re.+ (str.to_re "$$$")) (re.union (str.to_re "%") (str.to_re "&"))) (re.++ (re.union (re.+ (str.to_re "''")) (re.+ (str.to_re "(("))) (re.++ (re.union (re.union (str.to_re ")))") (str.to_re "***")) (re.* (str.to_re "+"))) (re.++ (re.+ (re.* (str.to_re ",,"))) (re.++ (re.union (re.* (str.to_re "---")) (re.union (str.to_re "..") (str.to_re "///"))) (re.++ (re.* (re.union (str.to_re "::") (str.to_re ";;"))) (re.++ (re.* (re.union (str.to_re "<<") (str.to_re "="))) (re.++ (re.union (re.* (str.to_re ">")) (re.+ (str.to_re "?"))) (re.++ (re.* (re.* (str.to_re "@@"))) (re.++ (re.union (re.+ (str.to_re "[[")) (re.union (str.to_re "\\\\") (str.to_re "]]"))) (re.+ (re.* (str.to_re "^")))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
