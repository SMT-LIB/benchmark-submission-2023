(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "1"))) (re.++ (re.union (re.+ (str.to_re "222")) (re.union (str.to_re "3") (str.to_re "444"))) (re.++ (re.union (re.union (str.to_re "55") (str.to_re "666")) (re.* (str.to_re "777"))) (re.++ (re.* (re.union (str.to_re "888") (str.to_re "999"))) (re.++ (re.union (re.+ (str.to_re "aa")) (re.* (str.to_re "bbb"))) (re.++ (re.+ (re.union (str.to_re "cc") (str.to_re "d"))) (re.++ (re.union (re.union (str.to_re "e") (str.to_re "fff")) (re.* (str.to_re "g"))) (re.++ (re.* (re.* (str.to_re "h"))) (re.++ (re.* (re.union (str.to_re "i") (str.to_re "j"))) (re.++ (re.+ (re.* (str.to_re "kkk"))) (re.++ (re.+ (re.+ (str.to_re "ll"))) (re.++ (re.* (re.union (str.to_re "mm") (str.to_re "n"))) (re.++ (re.union (re.* (str.to_re "ooo")) (re.* (str.to_re "pp"))) (re.++ (re.union (re.union (str.to_re "q") (str.to_re "rr")) (re.union (str.to_re "sss") (str.to_re "t"))) (re.++ (re.union (re.union (str.to_re "u") (str.to_re "vvv")) (re.+ (str.to_re "w"))) (re.++ (re.* (re.* (str.to_re "xxx"))) (re.++ (re.* (re.+ (str.to_re "yyy"))) (re.++ (re.* (re.union (str.to_re "z") (str.to_re "A"))) (re.++ (re.union (re.+ (str.to_re "B")) (re.* (str.to_re "CCC"))) (re.++ (re.union (re.* (str.to_re "DD")) (re.union (str.to_re "E") (str.to_re "FFF"))) (re.++ (re.union (re.* (str.to_re "GGG")) (re.union (str.to_re "H") (str.to_re "III"))) (re.++ (re.+ (re.* (str.to_re "JJJ"))) (re.++ (re.union (re.* (str.to_re "KK")) (re.* (str.to_re "L"))) (re.++ (re.+ (re.union (str.to_re "MM") (str.to_re "N"))) (re.++ (re.+ (re.* (str.to_re "OOO"))) (re.++ (re.union (re.union (str.to_re "PPP") (str.to_re "QQ")) (re.* (str.to_re "R"))) (re.++ (re.union (re.+ (str.to_re "SSS")) (re.union (str.to_re "TTT") (str.to_re "UU"))) (re.++ (re.union (re.* (str.to_re "VVV")) (re.* (str.to_re "WWW"))) (re.++ (re.+ (re.+ (str.to_re "XX"))) (re.++ (re.union (re.union (str.to_re "YYY") (str.to_re "Z")) (re.+ (str.to_re "!"))) (re.++ (re.* (re.union (str.to_re """") (str.to_re "###"))) (re.++ (re.+ (re.union (str.to_re "$$") (str.to_re "%%%"))) (re.++ (re.* (re.union (str.to_re "&") (str.to_re "'''"))) (re.++ (re.+ (re.* (str.to_re "("))) (re.++ (re.* (re.+ (str.to_re ")"))) (re.++ (re.+ (re.* (str.to_re "**"))) (re.++ (re.* (re.* (str.to_re "+++"))) (re.++ (re.union (re.+ (str.to_re ",")) (re.+ (str.to_re "-"))) (re.++ (re.+ (re.+ (str.to_re ".."))) (re.++ (re.union (re.union (str.to_re "/") (str.to_re ":::")) (re.union (str.to_re ";;;") (str.to_re "<<"))) (re.++ (re.union (re.* (str.to_re "==")) (re.* (str.to_re ">>>"))) (re.++ (re.+ (re.* (str.to_re "???"))) (re.* (re.+ (str.to_re "@@@")))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
