(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (str.to_re "00") (str.to_re "1"))) (re.++ (re.union (re.* (str.to_re "2")) (re.union (str.to_re "33") (str.to_re "4"))) (re.++ (re.* (re.+ (str.to_re "55"))) (re.++ (re.union (re.union (str.to_re "66") (str.to_re "77")) (re.+ (str.to_re "888"))) (re.++ (re.+ (re.* (str.to_re "999"))) (re.++ (re.+ (re.+ (str.to_re "a"))) (re.++ (re.+ (re.* (str.to_re "bb"))) (re.++ (re.union (re.union (str.to_re "c") (str.to_re "ddd")) (re.+ (str.to_re "ee"))) (re.++ (re.union (re.+ (str.to_re "ff")) (re.union (str.to_re "gg") (str.to_re "h"))) (re.++ (re.+ (re.* (str.to_re "ii"))) (re.++ (re.+ (re.* (str.to_re "j"))) (re.++ (re.* (re.union (str.to_re "kk") (str.to_re "l"))) (re.++ (re.union (re.+ (str.to_re "mm")) (re.* (str.to_re "n"))) (re.++ (re.union (re.+ (str.to_re "o")) (re.* (str.to_re "p"))) (re.++ (re.* (re.* (str.to_re "q"))) (re.++ (re.union (re.+ (str.to_re "r")) (re.union (str.to_re "sss") (str.to_re "tt"))) (re.++ (re.union (re.+ (str.to_re "uuu")) (re.union (str.to_re "vv") (str.to_re "www"))) (re.++ (re.+ (re.union (str.to_re "x") (str.to_re "y"))) (re.++ (re.union (re.+ (str.to_re "z")) (re.+ (str.to_re "AA"))) (re.++ (re.* (re.+ (str.to_re "B"))) (re.++ (re.+ (re.+ (str.to_re "C"))) (re.++ (re.+ (re.+ (str.to_re "DD"))) (re.++ (re.+ (re.* (str.to_re "E"))) (re.++ (re.union (re.union (str.to_re "FFF") (str.to_re "GG")) (re.+ (str.to_re "HH"))) (re.++ (re.union (re.* (str.to_re "II")) (re.union (str.to_re "JJJ") (str.to_re "KKK"))) (re.++ (re.union (re.* (str.to_re "LLL")) (re.+ (str.to_re "M"))) (re.++ (re.+ (re.+ (str.to_re "N"))) (re.++ (re.union (re.union (str.to_re "OOO") (str.to_re "PPP")) (re.+ (str.to_re "QQ"))) (re.++ (re.* (re.* (str.to_re "R"))) (re.++ (re.* (re.+ (str.to_re "SS"))) (re.++ (re.+ (re.+ (str.to_re "TT"))) (re.++ (re.* (re.union (str.to_re "UU") (str.to_re "VV"))) (re.++ (re.+ (re.+ (str.to_re "WW"))) (re.++ (re.* (re.* (str.to_re "X"))) (re.++ (re.union (re.* (str.to_re "YY")) (re.+ (str.to_re "Z"))) (re.++ (re.union (re.* (str.to_re "!")) (re.* (str.to_re """"))) (re.++ (re.* (re.union (str.to_re "###") (str.to_re "$$"))) (re.++ (re.+ (re.* (str.to_re "%"))) (re.++ (re.+ (re.+ (str.to_re "&&"))) (re.++ (re.* (re.* (str.to_re "''"))) (re.++ (re.union (re.union (str.to_re "(((") (str.to_re "))")) (re.+ (str.to_re "*"))) (re.++ (re.union (re.+ (str.to_re "+")) (re.union (str.to_re ",,,") (str.to_re "--"))) (re.++ (re.+ (re.+ (str.to_re ".."))) (re.++ (re.union (re.+ (str.to_re "///")) (re.* (str.to_re ":"))) (re.++ (re.+ (re.+ (str.to_re ";"))) (re.++ (re.* (re.union (str.to_re "<<") (str.to_re "="))) (re.++ (re.* (re.* (str.to_re ">"))) (re.++ (re.* (re.+ (str.to_re "???"))) (re.++ (re.+ (re.* (str.to_re "@"))) (re.++ (re.* (re.+ (str.to_re "[["))) (re.++ (re.union (re.union (str.to_re "\\\\\\") (str.to_re "]]")) (re.* (str.to_re "^^^"))) (re.++ (re.union (re.+ (str.to_re "_")) (re.* (str.to_re "``"))) (re.++ (re.union (re.union (str.to_re "{{{") (str.to_re "||")) (re.+ (str.to_re "}"))) (re.++ (re.* (re.union (str.to_re "~") (str.to_re "00"))) (re.union (re.union (str.to_re "111") (str.to_re "222")) (re.union (str.to_re "33") (str.to_re "44")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
