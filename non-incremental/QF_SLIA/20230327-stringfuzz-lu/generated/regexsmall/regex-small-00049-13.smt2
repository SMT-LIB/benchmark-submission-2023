(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "1"))) (re.++ (re.union (re.* (str.to_re "2")) (re.union (str.to_re "33") (str.to_re "444"))) (re.++ (re.+ (re.union (str.to_re "555") (str.to_re "666"))) (re.++ (re.+ (re.* (str.to_re "7"))) (re.++ (re.union (re.+ (str.to_re "8")) (re.union (str.to_re "99") (str.to_re "a"))) (re.++ (re.+ (re.union (str.to_re "bb") (str.to_re "c"))) (re.++ (re.+ (re.+ (str.to_re "ddd"))) (re.++ (re.+ (re.union (str.to_re "eee") (str.to_re "ff"))) (re.++ (re.union (re.union (str.to_re "gg") (str.to_re "h")) (re.* (str.to_re "iii"))) (re.++ (re.union (re.* (str.to_re "jj")) (re.* (str.to_re "k"))) (re.++ (re.union (re.+ (str.to_re "l")) (re.+ (str.to_re "m"))) (re.++ (re.* (re.+ (str.to_re "nn"))) (re.++ (re.+ (re.* (str.to_re "o"))) (re.++ (re.+ (re.union (str.to_re "pp") (str.to_re "q"))) (re.++ (re.union (re.* (str.to_re "rrr")) (re.+ (str.to_re "sss"))) (re.++ (re.union (re.* (str.to_re "tt")) (re.union (str.to_re "uu") (str.to_re "vvv"))) (re.++ (re.* (re.union (str.to_re "w") (str.to_re "x"))) (re.++ (re.* (re.+ (str.to_re "yy"))) (re.++ (re.+ (re.+ (str.to_re "zz"))) (re.++ (re.+ (re.* (str.to_re "AA"))) (re.++ (re.+ (re.* (str.to_re "B"))) (re.++ (re.* (re.union (str.to_re "CCC") (str.to_re "D"))) (re.++ (re.union (re.* (str.to_re "E")) (re.* (str.to_re "F"))) (re.++ (re.* (re.+ (str.to_re "GGG"))) (re.++ (re.+ (re.* (str.to_re "H"))) (re.++ (re.* (re.* (str.to_re "I"))) (re.++ (re.union (re.union (str.to_re "J") (str.to_re "K")) (re.+ (str.to_re "LLL"))) (re.++ (re.union (re.union (str.to_re "M") (str.to_re "N")) (re.union (str.to_re "OO") (str.to_re "P"))) (re.++ (re.* (re.+ (str.to_re "QQ"))) (re.++ (re.* (re.+ (str.to_re "R"))) (re.++ (re.* (re.union (str.to_re "S") (str.to_re "TT"))) (re.++ (re.union (re.union (str.to_re "UU") (str.to_re "V")) (re.* (str.to_re "WWW"))) (re.++ (re.union (re.* (str.to_re "XXX")) (re.union (str.to_re "YYY") (str.to_re "Z"))) (re.++ (re.union (re.* (str.to_re "!!")) (re.+ (str.to_re """"""))) (re.++ (re.* (re.union (str.to_re "#") (str.to_re "$$"))) (re.++ (re.+ (re.* (str.to_re "%%%"))) (re.++ (re.union (re.union (str.to_re "&") (str.to_re "''")) (re.* (str.to_re "("))) (re.++ (re.union (re.* (str.to_re ")")) (re.union (str.to_re "***") (str.to_re "+++"))) (re.++ (re.+ (re.* (str.to_re ","))) (re.++ (re.union (re.+ (str.to_re "---")) (re.union (str.to_re ".") (str.to_re "///"))) (re.++ (re.+ (re.union (str.to_re ":") (str.to_re ";"))) (re.++ (re.union (re.+ (str.to_re "<")) (re.* (str.to_re "==="))) (re.++ (re.union (re.union (str.to_re ">>>") (str.to_re "?")) (re.* (str.to_re "@"))) (re.++ (re.+ (re.union (str.to_re "[") (str.to_re "\\"))) (re.++ (re.+ (re.* (str.to_re "]"))) (re.++ (re.+ (re.union (str.to_re "^") (str.to_re "_"))) (re.++ (re.union (re.union (str.to_re "`") (str.to_re "{{")) (re.+ (str.to_re "|||"))) (re.++ (re.* (re.union (str.to_re "}") (str.to_re "~"))) (re.union (re.* (str.to_re "000")) (re.union (str.to_re "1") (str.to_re "222")))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
