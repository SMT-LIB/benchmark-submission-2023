(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "0"))) (re.++ (re.+ (re.* (str.to_re "1"))) (re.++ (re.* (re.union (str.to_re "22") (str.to_re "33"))) (re.++ (re.+ (re.union (str.to_re "44") (str.to_re "5"))) (re.++ (re.+ (re.* (str.to_re "6"))) (re.++ (re.* (re.* (str.to_re "7"))) (re.++ (re.* (re.union (str.to_re "8") (str.to_re "9"))) (re.++ (re.union (re.union (str.to_re "a") (str.to_re "bbb")) (re.+ (str.to_re "cc"))) (re.++ (re.* (re.+ (str.to_re "ddd"))) (re.++ (re.* (re.* (str.to_re "ee"))) (re.++ (re.union (re.+ (str.to_re "ff")) (re.+ (str.to_re "gg"))) (re.++ (re.* (re.* (str.to_re "hh"))) (re.++ (re.union (re.union (str.to_re "iii") (str.to_re "j")) (re.+ (str.to_re "kkk"))) (re.++ (re.union (re.+ (str.to_re "ll")) (re.* (str.to_re "m"))) (re.++ (re.+ (re.union (str.to_re "nn") (str.to_re "o"))) (re.++ (re.+ (re.union (str.to_re "ppp") (str.to_re "q"))) (re.++ (re.union (re.* (str.to_re "rrr")) (re.union (str.to_re "sss") (str.to_re "tt"))) (re.++ (re.union (re.union (str.to_re "uuu") (str.to_re "vvv")) (re.* (str.to_re "w"))) (re.++ (re.+ (re.* (str.to_re "xx"))) (re.++ (re.union (re.union (str.to_re "y") (str.to_re "zz")) (re.* (str.to_re "AA"))) (re.++ (re.* (re.union (str.to_re "B") (str.to_re "C"))) (re.++ (re.union (re.union (str.to_re "DDD") (str.to_re "E")) (re.* (str.to_re "FF"))) (re.++ (re.+ (re.union (str.to_re "G") (str.to_re "HHH"))) (re.++ (re.union (re.+ (str.to_re "I")) (re.union (str.to_re "JJ") (str.to_re "K"))) (re.++ (re.* (re.union (str.to_re "LLL") (str.to_re "MMM"))) (re.++ (re.union (re.union (str.to_re "N") (str.to_re "OOO")) (re.* (str.to_re "P"))) (re.++ (re.+ (re.union (str.to_re "Q") (str.to_re "RR"))) (re.++ (re.union (re.* (str.to_re "SSS")) (re.+ (str.to_re "TT"))) (re.++ (re.* (re.+ (str.to_re "UUU"))) (re.++ (re.union (re.union (str.to_re "VVV") (str.to_re "WWW")) (re.union (str.to_re "XXX") (str.to_re "YYY"))) (re.++ (re.union (re.union (str.to_re "ZZ") (str.to_re "!!")) (re.* (str.to_re """"""))) (re.++ (re.union (re.union (str.to_re "###") (str.to_re "$$")) (re.union (str.to_re "%%") (str.to_re "&&"))) (re.++ (re.union (re.+ (str.to_re "'")) (re.union (str.to_re "(") (str.to_re "))"))) (re.++ (re.+ (re.+ (str.to_re "*"))) (re.++ (re.+ (re.+ (str.to_re "++"))) (re.++ (re.union (re.+ (str.to_re ",")) (re.union (str.to_re "---") (str.to_re "."))) (re.++ (re.* (re.union (str.to_re "///") (str.to_re "::"))) (re.++ (re.* (re.* (str.to_re ";"))) (re.++ (re.* (re.+ (str.to_re "<<"))) (re.++ (re.+ (re.* (str.to_re "=="))) (re.++ (re.union (re.* (str.to_re ">>>")) (re.+ (str.to_re "???"))) (re.++ (re.+ (re.union (str.to_re "@") (str.to_re "[[["))) (re.++ (re.* (re.* (str.to_re "\\\\\\"))) (re.++ (re.union (re.union (str.to_re "]") (str.to_re "^")) (re.union (str.to_re "__") (str.to_re "``"))) (re.++ (re.+ (re.union (str.to_re "{") (str.to_re "|||"))) (re.++ (re.union (re.* (str.to_re "}}}")) (re.* (str.to_re "~~"))) (re.+ (re.+ (str.to_re "000")))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
