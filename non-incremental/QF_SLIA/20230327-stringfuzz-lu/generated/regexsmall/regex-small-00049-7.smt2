(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "000") (str.to_re "111"))) (re.++ (re.union (re.+ (str.to_re "2")) (re.union (str.to_re "3") (str.to_re "444"))) (re.++ (re.+ (re.union (str.to_re "5") (str.to_re "6"))) (re.++ (re.* (re.+ (str.to_re "77"))) (re.++ (re.* (re.+ (str.to_re "888"))) (re.++ (re.+ (re.* (str.to_re "99"))) (re.++ (re.* (re.* (str.to_re "aa"))) (re.++ (re.+ (re.union (str.to_re "bbb") (str.to_re "ccc"))) (re.++ (re.+ (re.union (str.to_re "dd") (str.to_re "ee"))) (re.++ (re.+ (re.union (str.to_re "fff") (str.to_re "g"))) (re.++ (re.+ (re.union (str.to_re "hhh") (str.to_re "i"))) (re.++ (re.+ (re.* (str.to_re "jj"))) (re.++ (re.+ (re.+ (str.to_re "kkk"))) (re.++ (re.* (re.union (str.to_re "ll") (str.to_re "mm"))) (re.++ (re.+ (re.* (str.to_re "nnn"))) (re.++ (re.union (re.+ (str.to_re "o")) (re.union (str.to_re "pp") (str.to_re "q"))) (re.++ (re.+ (re.+ (str.to_re "rrr"))) (re.++ (re.+ (re.union (str.to_re "ss") (str.to_re "ttt"))) (re.++ (re.* (re.union (str.to_re "uu") (str.to_re "vvv"))) (re.++ (re.* (re.* (str.to_re "ww"))) (re.++ (re.+ (re.union (str.to_re "x") (str.to_re "y"))) (re.++ (re.union (re.+ (str.to_re "zz")) (re.union (str.to_re "AA") (str.to_re "B"))) (re.++ (re.union (re.union (str.to_re "C") (str.to_re "DD")) (re.* (str.to_re "EE"))) (re.++ (re.+ (re.* (str.to_re "FF"))) (re.++ (re.+ (re.union (str.to_re "GGG") (str.to_re "H"))) (re.++ (re.* (re.+ (str.to_re "III"))) (re.++ (re.* (re.* (str.to_re "J"))) (re.++ (re.* (re.union (str.to_re "KK") (str.to_re "LLL"))) (re.++ (re.* (re.+ (str.to_re "M"))) (re.++ (re.+ (re.+ (str.to_re "NN"))) (re.++ (re.* (re.+ (str.to_re "OO"))) (re.++ (re.* (re.* (str.to_re "PPP"))) (re.++ (re.+ (re.union (str.to_re "Q") (str.to_re "RRR"))) (re.++ (re.union (re.+ (str.to_re "SSS")) (re.* (str.to_re "T"))) (re.++ (re.union (re.* (str.to_re "U")) (re.union (str.to_re "VVV") (str.to_re "W"))) (re.++ (re.* (re.union (str.to_re "X") (str.to_re "YYY"))) (re.++ (re.+ (re.+ (str.to_re "ZZ"))) (re.++ (re.union (re.+ (str.to_re "!")) (re.+ (str.to_re """"))) (re.++ (re.* (re.+ (str.to_re "##"))) (re.++ (re.+ (re.* (str.to_re "$"))) (re.++ (re.union (re.+ (str.to_re "%%")) (re.+ (str.to_re "&&&"))) (re.++ (re.* (re.+ (str.to_re "'''"))) (re.++ (re.+ (re.union (str.to_re "(((") (str.to_re "))"))) (re.++ (re.* (re.union (str.to_re "***") (str.to_re "+++"))) (re.++ (re.union (re.+ (str.to_re ",,,")) (re.union (str.to_re "---") (str.to_re "."))) (re.++ (re.* (re.union (str.to_re "//") (str.to_re ":::"))) (re.++ (re.* (re.* (str.to_re ";"))) (re.++ (re.union (re.union (str.to_re "<<") (str.to_re "=")) (re.+ (str.to_re ">>>"))) (re.* (re.union (str.to_re "??") (str.to_re "@@")))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
