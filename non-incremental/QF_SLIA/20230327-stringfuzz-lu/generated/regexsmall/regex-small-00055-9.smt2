(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "0"))) (re.++ (re.union (re.union (str.to_re "1") (str.to_re "2")) (re.+ (str.to_re "333"))) (re.++ (re.+ (re.+ (str.to_re "4"))) (re.++ (re.* (re.union (str.to_re "555") (str.to_re "6"))) (re.++ (re.+ (re.union (str.to_re "7") (str.to_re "888"))) (re.++ (re.+ (re.* (str.to_re "9"))) (re.++ (re.* (re.+ (str.to_re "aa"))) (re.++ (re.* (re.* (str.to_re "bb"))) (re.++ (re.* (re.* (str.to_re "ccc"))) (re.++ (re.union (re.union (str.to_re "ddd") (str.to_re "eee")) (re.+ (str.to_re "fff"))) (re.++ (re.+ (re.* (str.to_re "g"))) (re.++ (re.* (re.+ (str.to_re "h"))) (re.++ (re.* (re.+ (str.to_re "i"))) (re.++ (re.union (re.union (str.to_re "jjj") (str.to_re "kk")) (re.union (str.to_re "l") (str.to_re "mm"))) (re.++ (re.+ (re.* (str.to_re "nnn"))) (re.++ (re.union (re.union (str.to_re "oo") (str.to_re "p")) (re.* (str.to_re "qqq"))) (re.++ (re.* (re.* (str.to_re "rr"))) (re.++ (re.union (re.* (str.to_re "sss")) (re.* (str.to_re "t"))) (re.++ (re.* (re.* (str.to_re "uu"))) (re.++ (re.union (re.union (str.to_re "vvv") (str.to_re "w")) (re.+ (str.to_re "xx"))) (re.++ (re.* (re.+ (str.to_re "yy"))) (re.++ (re.union (re.+ (str.to_re "zz")) (re.union (str.to_re "A") (str.to_re "B"))) (re.++ (re.+ (re.* (str.to_re "CCC"))) (re.++ (re.union (re.union (str.to_re "D") (str.to_re "E")) (re.union (str.to_re "F") (str.to_re "G"))) (re.++ (re.union (re.* (str.to_re "H")) (re.union (str.to_re "III") (str.to_re "J"))) (re.++ (re.union (re.+ (str.to_re "K")) (re.* (str.to_re "LLL"))) (re.++ (re.+ (re.union (str.to_re "M") (str.to_re "NN"))) (re.++ (re.+ (re.* (str.to_re "O"))) (re.++ (re.+ (re.* (str.to_re "P"))) (re.++ (re.* (re.+ (str.to_re "QQQ"))) (re.++ (re.+ (re.union (str.to_re "RRR") (str.to_re "SS"))) (re.++ (re.+ (re.* (str.to_re "TT"))) (re.++ (re.+ (re.union (str.to_re "UU") (str.to_re "VVV"))) (re.++ (re.+ (re.union (str.to_re "WWW") (str.to_re "XXX"))) (re.++ (re.* (re.* (str.to_re "YY"))) (re.++ (re.union (re.+ (str.to_re "ZZZ")) (re.union (str.to_re "!!!") (str.to_re """"""))) (re.++ (re.* (re.+ (str.to_re "###"))) (re.++ (re.* (re.union (str.to_re "$$") (str.to_re "%%%"))) (re.++ (re.* (re.+ (str.to_re "&"))) (re.++ (re.* (re.union (str.to_re "'") (str.to_re "(("))) (re.++ (re.+ (re.union (str.to_re ")") (str.to_re "***"))) (re.++ (re.+ (re.union (str.to_re "+") (str.to_re ",,"))) (re.++ (re.* (re.union (str.to_re "---") (str.to_re "..."))) (re.++ (re.* (re.+ (str.to_re "///"))) (re.++ (re.* (re.+ (str.to_re "::"))) (re.++ (re.union (re.union (str.to_re ";") (str.to_re "<")) (re.+ (str.to_re "="))) (re.++ (re.+ (re.+ (str.to_re ">"))) (re.++ (re.+ (re.+ (str.to_re "???"))) (re.++ (re.* (re.* (str.to_re "@@@"))) (re.++ (re.+ (re.+ (str.to_re "[["))) (re.++ (re.union (re.+ (str.to_re "\\")) (re.* (str.to_re "]"))) (re.++ (re.* (re.+ (str.to_re "^^"))) (re.++ (re.* (re.* (str.to_re "__"))) (re.++ (re.* (re.union (str.to_re "``") (str.to_re "{"))) (re.* (re.+ (str.to_re "||")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
