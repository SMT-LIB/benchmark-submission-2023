(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.* (str.to_re "000"))) (re.++ (re.union (re.union (str.to_re "111") (str.to_re "22")) (re.+ (str.to_re "333"))) (re.++ (re.* (re.+ (str.to_re "44"))) (re.++ (re.+ (re.union (str.to_re "5") (str.to_re "6"))) (re.++ (re.union (re.+ (str.to_re "777")) (re.* (str.to_re "888"))) (re.++ (re.* (re.+ (str.to_re "999"))) (re.++ (re.+ (re.* (str.to_re "aa"))) (re.++ (re.* (re.+ (str.to_re "b"))) (re.++ (re.* (re.union (str.to_re "cc") (str.to_re "d"))) (re.++ (re.* (re.+ (str.to_re "ee"))) (re.++ (re.union (re.+ (str.to_re "ff")) (re.union (str.to_re "gg") (str.to_re "hhh"))) (re.++ (re.union (re.union (str.to_re "iii") (str.to_re "j")) (re.* (str.to_re "kk"))) (re.++ (re.+ (re.+ (str.to_re "ll"))) (re.++ (re.+ (re.union (str.to_re "m") (str.to_re "n"))) (re.++ (re.union (re.+ (str.to_re "ooo")) (re.* (str.to_re "p"))) (re.++ (re.* (re.union (str.to_re "q") (str.to_re "r"))) (re.++ (re.* (re.* (str.to_re "ss"))) (re.++ (re.* (re.+ (str.to_re "ttt"))) (re.++ (re.* (re.+ (str.to_re "uu"))) (re.++ (re.union (re.+ (str.to_re "v")) (re.* (str.to_re "www"))) (re.++ (re.union (re.+ (str.to_re "xxx")) (re.* (str.to_re "yyy"))) (re.++ (re.* (re.+ (str.to_re "zzz"))) (re.++ (re.union (re.union (str.to_re "A") (str.to_re "BBB")) (re.+ (str.to_re "C"))) (re.++ (re.union (re.union (str.to_re "D") (str.to_re "EE")) (re.+ (str.to_re "FF"))) (re.++ (re.+ (re.* (str.to_re "GG"))) (re.++ (re.union (re.union (str.to_re "HH") (str.to_re "III")) (re.* (str.to_re "J"))) (re.++ (re.+ (re.* (str.to_re "KKK"))) (re.++ (re.union (re.+ (str.to_re "LL")) (re.* (str.to_re "M"))) (re.++ (re.union (re.union (str.to_re "N") (str.to_re "OOO")) (re.union (str.to_re "P") (str.to_re "QQQ"))) (re.++ (re.union (re.union (str.to_re "RRR") (str.to_re "SSS")) (re.union (str.to_re "T") (str.to_re "UU"))) (re.++ (re.+ (re.* (str.to_re "VV"))) (re.++ (re.union (re.+ (str.to_re "WWW")) (re.union (str.to_re "X") (str.to_re "YYY"))) (re.++ (re.+ (re.union (str.to_re "ZZZ") (str.to_re "!"))) (re.++ (re.union (re.union (str.to_re """""""") (str.to_re "#")) (re.+ (str.to_re "$"))) (re.++ (re.union (re.* (str.to_re "%%")) (re.+ (str.to_re "&"))) (re.++ (re.* (re.union (str.to_re "'") (str.to_re "((("))) (re.++ (re.* (re.union (str.to_re ")") (str.to_re "***"))) (re.++ (re.* (re.+ (str.to_re "++"))) (re.++ (re.* (re.+ (str.to_re ",,"))) (re.++ (re.union (re.* (str.to_re "-")) (re.union (str.to_re ".") (str.to_re "/"))) (re.++ (re.* (re.* (str.to_re "::"))) (re.++ (re.* (re.+ (str.to_re ";;;"))) (re.++ (re.* (re.union (str.to_re "<<") (str.to_re "=="))) (re.++ (re.+ (re.union (str.to_re ">>>") (str.to_re "??"))) (re.++ (re.+ (re.union (str.to_re "@@@") (str.to_re "["))) (re.++ (re.* (re.union (str.to_re "\\") (str.to_re "]"))) (re.* (re.* (str.to_re "^")))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
