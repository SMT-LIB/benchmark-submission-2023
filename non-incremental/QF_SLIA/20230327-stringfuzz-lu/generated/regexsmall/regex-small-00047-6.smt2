(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "00"))) (re.++ (re.* (re.union (str.to_re "111") (str.to_re "22"))) (re.++ (re.union (re.+ (str.to_re "3")) (re.+ (str.to_re "444"))) (re.++ (re.+ (re.union (str.to_re "555") (str.to_re "6"))) (re.++ (re.union (re.union (str.to_re "777") (str.to_re "8")) (re.+ (str.to_re "99"))) (re.++ (re.union (re.* (str.to_re "aaa")) (re.union (str.to_re "bbb") (str.to_re "cc"))) (re.++ (re.* (re.union (str.to_re "d") (str.to_re "e"))) (re.++ (re.union (re.* (str.to_re "ff")) (re.+ (str.to_re "gg"))) (re.++ (re.union (re.union (str.to_re "h") (str.to_re "ii")) (re.+ (str.to_re "j"))) (re.++ (re.+ (re.union (str.to_re "kkk") (str.to_re "ll"))) (re.++ (re.union (re.union (str.to_re "mm") (str.to_re "nn")) (re.union (str.to_re "oo") (str.to_re "p"))) (re.++ (re.* (re.* (str.to_re "q"))) (re.++ (re.* (re.union (str.to_re "rrr") (str.to_re "ss"))) (re.++ (re.union (re.union (str.to_re "ttt") (str.to_re "uuu")) (re.union (str.to_re "v") (str.to_re "ww"))) (re.++ (re.union (re.union (str.to_re "xx") (str.to_re "y")) (re.* (str.to_re "z"))) (re.++ (re.* (re.union (str.to_re "AA") (str.to_re "BB"))) (re.++ (re.union (re.union (str.to_re "CC") (str.to_re "DDD")) (re.union (str.to_re "EEE") (str.to_re "F"))) (re.++ (re.* (re.* (str.to_re "G"))) (re.++ (re.* (re.* (str.to_re "HH"))) (re.++ (re.union (re.+ (str.to_re "I")) (re.* (str.to_re "JJJ"))) (re.++ (re.+ (re.* (str.to_re "K"))) (re.++ (re.+ (re.* (str.to_re "L"))) (re.++ (re.* (re.+ (str.to_re "MMM"))) (re.++ (re.+ (re.union (str.to_re "N") (str.to_re "OO"))) (re.++ (re.* (re.* (str.to_re "P"))) (re.++ (re.union (re.+ (str.to_re "QQQ")) (re.* (str.to_re "R"))) (re.++ (re.* (re.* (str.to_re "S"))) (re.++ (re.union (re.+ (str.to_re "TTT")) (re.+ (str.to_re "U"))) (re.++ (re.* (re.union (str.to_re "VV") (str.to_re "WW"))) (re.++ (re.union (re.* (str.to_re "XXX")) (re.union (str.to_re "Y") (str.to_re "Z"))) (re.++ (re.union (re.+ (str.to_re "!!")) (re.* (str.to_re """"""""))) (re.++ (re.+ (re.+ (str.to_re "#"))) (re.++ (re.+ (re.* (str.to_re "$"))) (re.++ (re.union (re.union (str.to_re "%%") (str.to_re "&&&")) (re.union (str.to_re "''") (str.to_re "((("))) (re.++ (re.+ (re.union (str.to_re "))") (str.to_re "**"))) (re.++ (re.union (re.+ (str.to_re "+++")) (re.union (str.to_re ",,,") (str.to_re "--"))) (re.++ (re.union (re.* (str.to_re ".")) (re.+ (str.to_re "///"))) (re.++ (re.union (re.+ (str.to_re ":")) (re.* (str.to_re ";;"))) (re.++ (re.+ (re.union (str.to_re "<<<") (str.to_re "="))) (re.++ (re.union (re.* (str.to_re ">")) (re.union (str.to_re "??") (str.to_re "@@@"))) (re.++ (re.+ (re.+ (str.to_re "["))) (re.++ (re.union (re.+ (str.to_re "\\\\")) (re.* (str.to_re "]]"))) (re.++ (re.union (re.* (str.to_re "^^")) (re.* (str.to_re "_"))) (re.++ (re.* (re.* (str.to_re "`"))) (re.++ (re.* (re.* (str.to_re "{{"))) (re.++ (re.union (re.union (str.to_re "|||") (str.to_re "}")) (re.union (str.to_re "~~") (str.to_re "000"))) (re.* (re.union (str.to_re "11") (str.to_re "222")))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
