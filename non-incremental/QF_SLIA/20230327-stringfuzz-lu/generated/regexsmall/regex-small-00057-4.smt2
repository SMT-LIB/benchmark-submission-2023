(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "00"))) (re.++ (re.+ (re.union (str.to_re "1") (str.to_re "22"))) (re.++ (re.+ (re.* (str.to_re "33"))) (re.++ (re.+ (re.* (str.to_re "444"))) (re.++ (re.union (re.* (str.to_re "5")) (re.+ (str.to_re "66"))) (re.++ (re.+ (re.+ (str.to_re "7"))) (re.++ (re.+ (re.union (str.to_re "888") (str.to_re "99"))) (re.++ (re.+ (re.union (str.to_re "aa") (str.to_re "b"))) (re.++ (re.* (re.* (str.to_re "c"))) (re.++ (re.union (re.* (str.to_re "dd")) (re.union (str.to_re "eee") (str.to_re "fff"))) (re.++ (re.* (re.+ (str.to_re "gg"))) (re.++ (re.* (re.* (str.to_re "h"))) (re.++ (re.+ (re.* (str.to_re "i"))) (re.++ (re.+ (re.union (str.to_re "j") (str.to_re "kk"))) (re.++ (re.+ (re.+ (str.to_re "lll"))) (re.++ (re.+ (re.* (str.to_re "mm"))) (re.++ (re.+ (re.union (str.to_re "nnn") (str.to_re "oo"))) (re.++ (re.union (re.union (str.to_re "ppp") (str.to_re "qq")) (re.* (str.to_re "rrr"))) (re.++ (re.union (re.union (str.to_re "s") (str.to_re "t")) (re.+ (str.to_re "uuu"))) (re.++ (re.union (re.union (str.to_re "vvv") (str.to_re "www")) (re.union (str.to_re "x") (str.to_re "y"))) (re.++ (re.+ (re.* (str.to_re "z"))) (re.++ (re.* (re.+ (str.to_re "A"))) (re.++ (re.+ (re.+ (str.to_re "BB"))) (re.++ (re.+ (re.+ (str.to_re "CC"))) (re.++ (re.+ (re.union (str.to_re "D") (str.to_re "E"))) (re.++ (re.* (re.union (str.to_re "FF") (str.to_re "GG"))) (re.++ (re.union (re.union (str.to_re "HH") (str.to_re "II")) (re.+ (str.to_re "J"))) (re.++ (re.+ (re.union (str.to_re "K") (str.to_re "L"))) (re.++ (re.* (re.union (str.to_re "MMM") (str.to_re "NN"))) (re.++ (re.+ (re.* (str.to_re "OO"))) (re.++ (re.* (re.+ (str.to_re "PP"))) (re.++ (re.+ (re.union (str.to_re "QQQ") (str.to_re "RRR"))) (re.++ (re.union (re.+ (str.to_re "SSS")) (re.+ (str.to_re "TT"))) (re.++ (re.union (re.union (str.to_re "UUU") (str.to_re "V")) (re.+ (str.to_re "W"))) (re.++ (re.* (re.union (str.to_re "XX") (str.to_re "Y"))) (re.++ (re.+ (re.+ (str.to_re "ZZZ"))) (re.++ (re.union (re.union (str.to_re "!!") (str.to_re """")) (re.+ (str.to_re "#"))) (re.++ (re.* (re.union (str.to_re "$") (str.to_re "%%"))) (re.++ (re.* (re.+ (str.to_re "&&"))) (re.++ (re.+ (re.* (str.to_re "'''"))) (re.++ (re.* (re.* (str.to_re "((("))) (re.++ (re.* (re.* (str.to_re ")))"))) (re.++ (re.+ (re.+ (str.to_re "*"))) (re.++ (re.+ (re.* (str.to_re "++"))) (re.++ (re.* (re.union (str.to_re ",") (str.to_re "-"))) (re.++ (re.* (re.* (str.to_re "."))) (re.++ (re.union (re.+ (str.to_re "/")) (re.+ (str.to_re ":"))) (re.++ (re.union (re.+ (str.to_re ";;")) (re.union (str.to_re "<<<") (str.to_re "==="))) (re.++ (re.+ (re.+ (str.to_re ">>>"))) (re.++ (re.+ (re.union (str.to_re "?") (str.to_re "@"))) (re.++ (re.+ (re.union (str.to_re "[[") (str.to_re "\\\\\\"))) (re.++ (re.+ (re.union (str.to_re "]]]") (str.to_re "^^"))) (re.++ (re.+ (re.* (str.to_re "__"))) (re.++ (re.* (re.union (str.to_re "```") (str.to_re "{"))) (re.++ (re.* (re.* (str.to_re "|||"))) (re.++ (re.+ (re.union (str.to_re "}}}") (str.to_re "~"))) (re.* (re.* (str.to_re "00")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
