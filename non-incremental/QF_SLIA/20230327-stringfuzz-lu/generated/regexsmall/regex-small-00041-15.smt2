(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "00"))) (re.++ (re.* (re.union (str.to_re "111") (str.to_re "222"))) (re.++ (re.+ (re.+ (str.to_re "33"))) (re.++ (re.* (re.* (str.to_re "444"))) (re.++ (re.union (re.union (str.to_re "555") (str.to_re "66")) (re.union (str.to_re "77") (str.to_re "8"))) (re.++ (re.+ (re.+ (str.to_re "99"))) (re.++ (re.* (re.union (str.to_re "aaa") (str.to_re "bb"))) (re.++ (re.* (re.* (str.to_re "c"))) (re.++ (re.union (re.union (str.to_re "dd") (str.to_re "eee")) (re.* (str.to_re "fff"))) (re.++ (re.+ (re.+ (str.to_re "gg"))) (re.++ (re.union (re.* (str.to_re "h")) (re.+ (str.to_re "i"))) (re.++ (re.+ (re.union (str.to_re "j") (str.to_re "kkk"))) (re.++ (re.union (re.* (str.to_re "ll")) (re.* (str.to_re "mmm"))) (re.++ (re.* (re.union (str.to_re "nn") (str.to_re "oo"))) (re.++ (re.union (re.+ (str.to_re "pp")) (re.* (str.to_re "qq"))) (re.++ (re.* (re.+ (str.to_re "rrr"))) (re.++ (re.union (re.* (str.to_re "ss")) (re.union (str.to_re "tt") (str.to_re "uu"))) (re.++ (re.* (re.union (str.to_re "vv") (str.to_re "ww"))) (re.++ (re.* (re.+ (str.to_re "xxx"))) (re.++ (re.* (re.+ (str.to_re "y"))) (re.++ (re.+ (re.+ (str.to_re "zzz"))) (re.++ (re.* (re.* (str.to_re "A"))) (re.++ (re.+ (re.union (str.to_re "B") (str.to_re "CCC"))) (re.++ (re.* (re.* (str.to_re "DD"))) (re.++ (re.union (re.* (str.to_re "EEE")) (re.* (str.to_re "FF"))) (re.++ (re.* (re.union (str.to_re "GGG") (str.to_re "HH"))) (re.++ (re.* (re.+ (str.to_re "I"))) (re.++ (re.+ (re.* (str.to_re "J"))) (re.++ (re.+ (re.union (str.to_re "K") (str.to_re "L"))) (re.++ (re.union (re.* (str.to_re "M")) (re.union (str.to_re "NNN") (str.to_re "O"))) (re.++ (re.union (re.union (str.to_re "PP") (str.to_re "QQQ")) (re.union (str.to_re "R") (str.to_re "S"))) (re.++ (re.* (re.+ (str.to_re "TTT"))) (re.++ (re.+ (re.union (str.to_re "UUU") (str.to_re "VV"))) (re.++ (re.* (re.* (str.to_re "W"))) (re.++ (re.+ (re.union (str.to_re "X") (str.to_re "YY"))) (re.++ (re.* (re.+ (str.to_re "ZZZ"))) (re.++ (re.union (re.* (str.to_re "!!")) (re.* (str.to_re """"""""))) (re.++ (re.+ (re.union (str.to_re "###") (str.to_re "$$$"))) (re.++ (re.* (re.+ (str.to_re "%%"))) (re.++ (re.+ (re.* (str.to_re "&&"))) (re.+ (re.* (str.to_re "''")))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
