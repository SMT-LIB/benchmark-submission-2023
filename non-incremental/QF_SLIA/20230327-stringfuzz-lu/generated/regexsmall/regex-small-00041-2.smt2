(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (str.to_re "0") (str.to_re "1"))) (re.++ (re.union (re.+ (str.to_re "22")) (re.* (str.to_re "33"))) (re.++ (re.union (re.+ (str.to_re "444")) (re.+ (str.to_re "555"))) (re.++ (re.+ (re.+ (str.to_re "666"))) (re.++ (re.+ (re.union (str.to_re "777") (str.to_re "888"))) (re.++ (re.union (re.+ (str.to_re "9")) (re.+ (str.to_re "a"))) (re.++ (re.* (re.* (str.to_re "bbb"))) (re.++ (re.* (re.union (str.to_re "c") (str.to_re "dd"))) (re.++ (re.+ (re.+ (str.to_re "eee"))) (re.++ (re.union (re.* (str.to_re "ff")) (re.+ (str.to_re "ggg"))) (re.++ (re.+ (re.union (str.to_re "h") (str.to_re "ii"))) (re.++ (re.union (re.+ (str.to_re "jjj")) (re.union (str.to_re "kk") (str.to_re "lll"))) (re.++ (re.union (re.* (str.to_re "m")) (re.union (str.to_re "nn") (str.to_re "ooo"))) (re.++ (re.* (re.* (str.to_re "ppp"))) (re.++ (re.* (re.union (str.to_re "qq") (str.to_re "r"))) (re.++ (re.* (re.union (str.to_re "sss") (str.to_re "ttt"))) (re.++ (re.* (re.+ (str.to_re "uu"))) (re.++ (re.* (re.union (str.to_re "vvv") (str.to_re "www"))) (re.++ (re.union (re.* (str.to_re "xx")) (re.union (str.to_re "yyy") (str.to_re "zz"))) (re.++ (re.+ (re.+ (str.to_re "A"))) (re.++ (re.union (re.* (str.to_re "B")) (re.+ (str.to_re "C"))) (re.++ (re.+ (re.+ (str.to_re "DDD"))) (re.++ (re.union (re.+ (str.to_re "E")) (re.union (str.to_re "F") (str.to_re "G"))) (re.++ (re.+ (re.union (str.to_re "HH") (str.to_re "I"))) (re.++ (re.union (re.* (str.to_re "JJJ")) (re.* (str.to_re "K"))) (re.++ (re.+ (re.union (str.to_re "LL") (str.to_re "M"))) (re.++ (re.union (re.* (str.to_re "NN")) (re.+ (str.to_re "O"))) (re.++ (re.+ (re.union (str.to_re "PPP") (str.to_re "QQ"))) (re.++ (re.+ (re.union (str.to_re "RR") (str.to_re "S"))) (re.++ (re.* (re.union (str.to_re "TTT") (str.to_re "UUU"))) (re.++ (re.union (re.* (str.to_re "VV")) (re.+ (str.to_re "WW"))) (re.++ (re.union (re.* (str.to_re "X")) (re.union (str.to_re "Y") (str.to_re "Z"))) (re.++ (re.union (re.+ (str.to_re "!")) (re.* (str.to_re """"""))) (re.++ (re.* (re.* (str.to_re "#"))) (re.++ (re.union (re.* (str.to_re "$")) (re.* (str.to_re "%"))) (re.++ (re.+ (re.+ (str.to_re "&&"))) (re.++ (re.* (re.union (str.to_re "''") (str.to_re "(("))) (re.++ (re.* (re.+ (str.to_re "))"))) (re.++ (re.+ (re.union (str.to_re "*") (str.to_re "++"))) (re.++ (re.+ (re.+ (str.to_re ",,"))) (re.+ (re.+ (str.to_re "---")))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
