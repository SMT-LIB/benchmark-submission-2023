(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "0") (str.to_re "1"))) (re.++ (re.+ (re.union (str.to_re "2") (str.to_re "33"))) (re.++ (re.+ (re.union (str.to_re "4") (str.to_re "555"))) (re.++ (re.+ (re.+ (str.to_re "6"))) (re.++ (re.* (re.union (str.to_re "777") (str.to_re "88"))) (re.++ (re.union (re.* (str.to_re "999")) (re.* (str.to_re "a"))) (re.++ (re.union (re.union (str.to_re "bbb") (str.to_re "ccc")) (re.+ (str.to_re "ddd"))) (re.++ (re.union (re.+ (str.to_re "e")) (re.+ (str.to_re "fff"))) (re.++ (re.+ (re.* (str.to_re "g"))) (re.++ (re.union (re.union (str.to_re "hhh") (str.to_re "ii")) (re.+ (str.to_re "jjj"))) (re.++ (re.union (re.+ (str.to_re "k")) (re.+ (str.to_re "lll"))) (re.++ (re.+ (re.+ (str.to_re "m"))) (re.++ (re.* (re.+ (str.to_re "nn"))) (re.++ (re.union (re.* (str.to_re "oo")) (re.union (str.to_re "p") (str.to_re "qq"))) (re.++ (re.union (re.union (str.to_re "rrr") (str.to_re "s")) (re.* (str.to_re "tt"))) (re.++ (re.* (re.union (str.to_re "u") (str.to_re "v"))) (re.++ (re.* (re.* (str.to_re "ww"))) (re.++ (re.union (re.+ (str.to_re "x")) (re.* (str.to_re "yyy"))) (re.++ (re.* (re.+ (str.to_re "z"))) (re.++ (re.union (re.+ (str.to_re "A")) (re.union (str.to_re "B") (str.to_re "CCC"))) (re.++ (re.+ (re.* (str.to_re "D"))) (re.++ (re.union (re.* (str.to_re "EEE")) (re.union (str.to_re "FFF") (str.to_re "GG"))) (re.++ (re.+ (re.* (str.to_re "H"))) (re.++ (re.union (re.union (str.to_re "II") (str.to_re "JJ")) (re.* (str.to_re "KKK"))) (re.union (re.union (str.to_re "LL") (str.to_re "MM")) (re.* (str.to_re "N")))))))))))))))))))))))))))))
(check-sat)
(exit)
