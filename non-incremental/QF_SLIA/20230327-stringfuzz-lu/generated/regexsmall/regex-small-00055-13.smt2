(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "00") (str.to_re "1"))) (re.++ (re.+ (re.+ (str.to_re "22"))) (re.++ (re.union (re.+ (str.to_re "3")) (re.+ (str.to_re "44"))) (re.++ (re.union (re.* (str.to_re "55")) (re.* (str.to_re "66"))) (re.++ (re.+ (re.* (str.to_re "77"))) (re.++ (re.union (re.* (str.to_re "8")) (re.+ (str.to_re "999"))) (re.++ (re.+ (re.* (str.to_re "aa"))) (re.++ (re.+ (re.+ (str.to_re "bbb"))) (re.++ (re.union (re.+ (str.to_re "ccc")) (re.* (str.to_re "d"))) (re.++ (re.* (re.* (str.to_re "eee"))) (re.++ (re.* (re.union (str.to_re "ff") (str.to_re "g"))) (re.++ (re.union (re.+ (str.to_re "hh")) (re.union (str.to_re "i") (str.to_re "jj"))) (re.++ (re.union (re.* (str.to_re "k")) (re.+ (str.to_re "ll"))) (re.++ (re.+ (re.+ (str.to_re "mmm"))) (re.++ (re.* (re.+ (str.to_re "nn"))) (re.++ (re.union (re.+ (str.to_re "oo")) (re.* (str.to_re "ppp"))) (re.++ (re.* (re.* (str.to_re "qqq"))) (re.++ (re.* (re.+ (str.to_re "rr"))) (re.++ (re.* (re.union (str.to_re "sss") (str.to_re "tt"))) (re.++ (re.* (re.* (str.to_re "uuu"))) (re.++ (re.+ (re.* (str.to_re "v"))) (re.++ (re.union (re.+ (str.to_re "ww")) (re.union (str.to_re "xxx") (str.to_re "y"))) (re.++ (re.* (re.union (str.to_re "zzz") (str.to_re "AA"))) (re.++ (re.+ (re.union (str.to_re "B") (str.to_re "C"))) (re.++ (re.+ (re.+ (str.to_re "D"))) (re.++ (re.* (re.* (str.to_re "EEE"))) (re.++ (re.union (re.+ (str.to_re "F")) (re.+ (str.to_re "GG"))) (re.++ (re.union (re.* (str.to_re "H")) (re.union (str.to_re "I") (str.to_re "J"))) (re.++ (re.* (re.union (str.to_re "KK") (str.to_re "LLL"))) (re.++ (re.+ (re.union (str.to_re "MMM") (str.to_re "NN"))) (re.++ (re.union (re.* (str.to_re "OOO")) (re.* (str.to_re "P"))) (re.++ (re.* (re.union (str.to_re "QQ") (str.to_re "RRR"))) (re.++ (re.+ (re.+ (str.to_re "S"))) (re.++ (re.* (re.* (str.to_re "T"))) (re.++ (re.+ (re.union (str.to_re "UUU") (str.to_re "V"))) (re.++ (re.union (re.+ (str.to_re "W")) (re.* (str.to_re "X"))) (re.++ (re.* (re.+ (str.to_re "YY"))) (re.++ (re.* (re.+ (str.to_re "ZZ"))) (re.++ (re.+ (re.* (str.to_re "!"))) (re.++ (re.* (re.* (str.to_re """"""))) (re.++ (re.* (re.* (str.to_re "#"))) (re.++ (re.* (re.* (str.to_re "$$"))) (re.++ (re.union (re.union (str.to_re "%%") (str.to_re "&")) (re.* (str.to_re "''"))) (re.++ (re.* (re.+ (str.to_re "((("))) (re.++ (re.union (re.* (str.to_re "))")) (re.union (str.to_re "***") (str.to_re "+"))) (re.++ (re.union (re.* (str.to_re ",,,")) (re.* (str.to_re "-"))) (re.++ (re.union (re.+ (str.to_re ".")) (re.+ (str.to_re "///"))) (re.++ (re.union (re.union (str.to_re "::") (str.to_re ";;")) (re.+ (str.to_re "<<"))) (re.++ (re.+ (re.* (str.to_re "==="))) (re.++ (re.* (re.* (str.to_re ">"))) (re.++ (re.* (re.* (str.to_re "?"))) (re.++ (re.* (re.+ (str.to_re "@@"))) (re.++ (re.+ (re.* (str.to_re "["))) (re.++ (re.+ (re.+ (str.to_re "\\\\"))) (re.* (re.union (str.to_re "]]") (str.to_re "^^")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
