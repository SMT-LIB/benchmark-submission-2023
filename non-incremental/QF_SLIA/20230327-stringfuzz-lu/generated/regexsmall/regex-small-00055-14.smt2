(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (str.to_re "000") (str.to_re "1"))) (re.++ (re.+ (re.* (str.to_re "22"))) (re.++ (re.* (re.* (str.to_re "333"))) (re.++ (re.union (re.* (str.to_re "44")) (re.* (str.to_re "55"))) (re.++ (re.union (re.* (str.to_re "66")) (re.union (str.to_re "77") (str.to_re "8"))) (re.++ (re.* (re.+ (str.to_re "99"))) (re.++ (re.union (re.union (str.to_re "a") (str.to_re "b")) (re.+ (str.to_re "c"))) (re.++ (re.union (re.* (str.to_re "ddd")) (re.union (str.to_re "e") (str.to_re "f"))) (re.++ (re.union (re.+ (str.to_re "gg")) (re.* (str.to_re "h"))) (re.++ (re.* (re.* (str.to_re "ii"))) (re.++ (re.union (re.* (str.to_re "jjj")) (re.union (str.to_re "kkk") (str.to_re "lll"))) (re.++ (re.+ (re.union (str.to_re "mmm") (str.to_re "n"))) (re.++ (re.* (re.* (str.to_re "ooo"))) (re.++ (re.+ (re.union (str.to_re "p") (str.to_re "q"))) (re.++ (re.* (re.union (str.to_re "rrr") (str.to_re "ss"))) (re.++ (re.union (re.+ (str.to_re "ttt")) (re.+ (str.to_re "uu"))) (re.++ (re.+ (re.* (str.to_re "vvv"))) (re.++ (re.* (re.union (str.to_re "ww") (str.to_re "x"))) (re.++ (re.union (re.+ (str.to_re "yy")) (re.+ (str.to_re "z"))) (re.++ (re.union (re.+ (str.to_re "AAA")) (re.* (str.to_re "BB"))) (re.++ (re.+ (re.union (str.to_re "CC") (str.to_re "DDD"))) (re.++ (re.* (re.union (str.to_re "EE") (str.to_re "F"))) (re.++ (re.* (re.* (str.to_re "G"))) (re.++ (re.union (re.union (str.to_re "HHH") (str.to_re "I")) (re.* (str.to_re "JJJ"))) (re.++ (re.union (re.+ (str.to_re "K")) (re.union (str.to_re "LLL") (str.to_re "MMM"))) (re.++ (re.+ (re.union (str.to_re "NNN") (str.to_re "OO"))) (re.++ (re.+ (re.+ (str.to_re "PP"))) (re.++ (re.* (re.union (str.to_re "QQQ") (str.to_re "R"))) (re.++ (re.* (re.* (str.to_re "SSS"))) (re.++ (re.+ (re.union (str.to_re "T") (str.to_re "U"))) (re.++ (re.+ (re.+ (str.to_re "VVV"))) (re.++ (re.union (re.+ (str.to_re "W")) (re.* (str.to_re "X"))) (re.++ (re.+ (re.+ (str.to_re "YYY"))) (re.++ (re.* (re.union (str.to_re "ZZZ") (str.to_re "!!!"))) (re.++ (re.* (re.union (str.to_re """""") (str.to_re "###"))) (re.++ (re.* (re.+ (str.to_re "$"))) (re.++ (re.+ (re.* (str.to_re "%%"))) (re.++ (re.* (re.* (str.to_re "&&"))) (re.++ (re.union (re.* (str.to_re "'''")) (re.union (str.to_re "(((") (str.to_re "))"))) (re.++ (re.union (re.union (str.to_re "**") (str.to_re "+++")) (re.union (str.to_re ",") (str.to_re "--"))) (re.++ (re.union (re.union (str.to_re "..") (str.to_re "/")) (re.* (str.to_re ":"))) (re.++ (re.+ (re.union (str.to_re ";") (str.to_re "<"))) (re.++ (re.+ (re.+ (str.to_re "="))) (re.++ (re.* (re.union (str.to_re ">>>") (str.to_re "??"))) (re.++ (re.+ (re.union (str.to_re "@@") (str.to_re "[["))) (re.++ (re.+ (re.union (str.to_re "\\\\\\") (str.to_re "]"))) (re.++ (re.* (re.union (str.to_re "^") (str.to_re "__"))) (re.++ (re.+ (re.+ (str.to_re "`"))) (re.++ (re.* (re.union (str.to_re "{") (str.to_re "|"))) (re.++ (re.+ (re.union (str.to_re "}}") (str.to_re "~~~"))) (re.++ (re.+ (re.* (str.to_re "000"))) (re.++ (re.+ (re.* (str.to_re "1"))) (re.++ (re.+ (re.union (str.to_re "22") (str.to_re "33"))) (re.++ (re.union (re.+ (str.to_re "44")) (re.union (str.to_re "55") (str.to_re "6"))) (re.* (re.union (str.to_re "777") (str.to_re "888")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
