(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.union (str.to_re "0") (str.to_re "11")) (re.* (str.to_re "2"))) (re.++ (re.+ (re.* (str.to_re "33"))) (re.++ (re.* (re.* (str.to_re "4"))) (re.++ (re.union (re.+ (str.to_re "555")) (re.* (str.to_re "6"))) (re.++ (re.* (re.+ (str.to_re "77"))) (re.++ (re.+ (re.union (str.to_re "888") (str.to_re "99"))) (re.++ (re.* (re.+ (str.to_re "aaa"))) (re.++ (re.union (re.union (str.to_re "bbb") (str.to_re "cc")) (re.+ (str.to_re "dd"))) (re.++ (re.+ (re.* (str.to_re "ee"))) (re.++ (re.union (re.* (str.to_re "fff")) (re.union (str.to_re "ggg") (str.to_re "hhh"))) (re.++ (re.union (re.* (str.to_re "ii")) (re.+ (str.to_re "j"))) (re.++ (re.+ (re.+ (str.to_re "kk"))) (re.++ (re.union (re.* (str.to_re "lll")) (re.* (str.to_re "m"))) (re.++ (re.* (re.* (str.to_re "n"))) (re.++ (re.+ (re.+ (str.to_re "o"))) (re.++ (re.* (re.* (str.to_re "ppp"))) (re.++ (re.+ (re.* (str.to_re "qq"))) (re.++ (re.union (re.+ (str.to_re "r")) (re.* (str.to_re "s"))) (re.++ (re.+ (re.* (str.to_re "t"))) (re.++ (re.* (re.* (str.to_re "uuu"))) (re.++ (re.union (re.* (str.to_re "vvv")) (re.+ (str.to_re "ww"))) (re.++ (re.+ (re.* (str.to_re "xx"))) (re.++ (re.* (re.* (str.to_re "yy"))) (re.++ (re.union (re.+ (str.to_re "zz")) (re.* (str.to_re "A"))) (re.++ (re.+ (re.+ (str.to_re "BB"))) (re.++ (re.+ (re.union (str.to_re "CCC") (str.to_re "D"))) (re.++ (re.* (re.* (str.to_re "EEE"))) (re.++ (re.union (re.+ (str.to_re "FFF")) (re.* (str.to_re "G"))) (re.++ (re.* (re.+ (str.to_re "H"))) (re.++ (re.+ (re.* (str.to_re "III"))) (re.++ (re.* (re.union (str.to_re "JJ") (str.to_re "KK"))) (re.++ (re.union (re.union (str.to_re "L") (str.to_re "MMM")) (re.* (str.to_re "N"))) (re.++ (re.* (re.union (str.to_re "OO") (str.to_re "P"))) (re.++ (re.union (re.+ (str.to_re "QQ")) (re.* (str.to_re "R"))) (re.++ (re.+ (re.union (str.to_re "S") (str.to_re "T"))) (re.++ (re.+ (re.union (str.to_re "UU") (str.to_re "VV"))) (re.++ (re.* (re.* (str.to_re "W"))) (re.++ (re.+ (re.+ (str.to_re "XXX"))) (re.++ (re.union (re.+ (str.to_re "YY")) (re.union (str.to_re "Z") (str.to_re "!!!"))) (re.++ (re.union (re.+ (str.to_re """")) (re.* (str.to_re "###"))) (re.++ (re.union (re.* (str.to_re "$$$")) (re.* (str.to_re "%%"))) (re.++ (re.* (re.* (str.to_re "&&"))) (re.++ (re.union (re.+ (str.to_re "''")) (re.* (str.to_re "(("))) (re.++ (re.union (re.union (str.to_re ")))") (str.to_re "***")) (re.* (str.to_re "+"))) (re.++ (re.+ (re.* (str.to_re ",,"))) (re.++ (re.+ (re.+ (str.to_re "-"))) (re.++ (re.+ (re.union (str.to_re "..") (str.to_re "///"))) (re.++ (re.union (re.+ (str.to_re ":")) (re.* (str.to_re ";;"))) (re.union (re.* (str.to_re "<")) (re.* (str.to_re "===")))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
