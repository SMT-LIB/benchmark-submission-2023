(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "00"))) (re.++ (re.union (re.* (str.to_re "111")) (re.union (str.to_re "22") (str.to_re "33"))) (re.++ (re.+ (re.* (str.to_re "4"))) (re.++ (re.union (re.* (str.to_re "555")) (re.* (str.to_re "66"))) (re.++ (re.+ (re.union (str.to_re "7") (str.to_re "888"))) (re.++ (re.+ (re.* (str.to_re "999"))) (re.++ (re.union (re.+ (str.to_re "aa")) (re.union (str.to_re "b") (str.to_re "c"))) (re.++ (re.* (re.* (str.to_re "d"))) (re.++ (re.union (re.+ (str.to_re "e")) (re.* (str.to_re "fff"))) (re.++ (re.* (re.+ (str.to_re "gg"))) (re.++ (re.+ (re.+ (str.to_re "hhh"))) (re.++ (re.* (re.+ (str.to_re "ii"))) (re.++ (re.union (re.* (str.to_re "jj")) (re.+ (str.to_re "kk"))) (re.++ (re.union (re.* (str.to_re "l")) (re.+ (str.to_re "m"))) (re.++ (re.+ (re.+ (str.to_re "n"))) (re.++ (re.union (re.* (str.to_re "ooo")) (re.union (str.to_re "p") (str.to_re "qq"))) (re.++ (re.union (re.+ (str.to_re "r")) (re.* (str.to_re "ss"))) (re.++ (re.* (re.union (str.to_re "ttt") (str.to_re "u"))) (re.++ (re.+ (re.+ (str.to_re "v"))) (re.++ (re.union (re.* (str.to_re "www")) (re.union (str.to_re "xxx") (str.to_re "yyy"))) (re.++ (re.* (re.* (str.to_re "zz"))) (re.++ (re.+ (re.* (str.to_re "AAA"))) (re.++ (re.union (re.union (str.to_re "BBB") (str.to_re "CCC")) (re.union (str.to_re "D") (str.to_re "EE"))) (re.++ (re.* (re.+ (str.to_re "FFF"))) (re.++ (re.+ (re.* (str.to_re "GGG"))) (re.++ (re.+ (re.union (str.to_re "H") (str.to_re "I"))) (re.++ (re.union (re.+ (str.to_re "JJ")) (re.* (str.to_re "KKK"))) (re.++ (re.union (re.* (str.to_re "LLL")) (re.* (str.to_re "MM"))) (re.++ (re.union (re.union (str.to_re "NN") (str.to_re "O")) (re.+ (str.to_re "PP"))) (re.++ (re.* (re.+ (str.to_re "QQQ"))) (re.++ (re.union (re.union (str.to_re "R") (str.to_re "S")) (re.* (str.to_re "T"))) (re.++ (re.+ (re.* (str.to_re "UU"))) (re.++ (re.* (re.union (str.to_re "V") (str.to_re "W"))) (re.++ (re.+ (re.* (str.to_re "XXX"))) (re.++ (re.union (re.* (str.to_re "Y")) (re.* (str.to_re "ZZ"))) (re.++ (re.+ (re.* (str.to_re "!"))) (re.++ (re.union (re.+ (str.to_re """""""")) (re.union (str.to_re "###") (str.to_re "$$"))) (re.++ (re.+ (re.union (str.to_re "%") (str.to_re "&&&"))) (re.++ (re.union (re.* (str.to_re "'''")) (re.union (str.to_re "(((") (str.to_re ")"))) (re.++ (re.union (re.* (str.to_re "*")) (re.+ (str.to_re "++"))) (re.++ (re.+ (re.+ (str.to_re ",,"))) (re.++ (re.* (re.union (str.to_re "---") (str.to_re "."))) (re.++ (re.* (re.* (str.to_re "///"))) (re.++ (re.union (re.union (str.to_re ":::") (str.to_re ";;;")) (re.* (str.to_re "<<"))) (re.+ (re.union (str.to_re "==") (str.to_re ">>>")))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
