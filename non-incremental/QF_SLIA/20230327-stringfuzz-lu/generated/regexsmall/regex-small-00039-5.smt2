(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (str.to_re "00") (str.to_re "111"))) (re.++ (re.union (re.* (str.to_re "2")) (re.* (str.to_re "33"))) (re.++ (re.+ (re.union (str.to_re "4") (str.to_re "555"))) (re.++ (re.* (re.* (str.to_re "6"))) (re.++ (re.* (re.union (str.to_re "77") (str.to_re "88"))) (re.++ (re.union (re.+ (str.to_re "999")) (re.* (str.to_re "a"))) (re.++ (re.+ (re.+ (str.to_re "b"))) (re.++ (re.union (re.union (str.to_re "ccc") (str.to_re "dd")) (re.union (str.to_re "eee") (str.to_re "f"))) (re.++ (re.* (re.* (str.to_re "g"))) (re.++ (re.+ (re.* (str.to_re "hhh"))) (re.++ (re.union (re.+ (str.to_re "i")) (re.+ (str.to_re "j"))) (re.++ (re.union (re.* (str.to_re "k")) (re.+ (str.to_re "ll"))) (re.++ (re.union (re.union (str.to_re "m") (str.to_re "nnn")) (re.union (str.to_re "ooo") (str.to_re "ppp"))) (re.++ (re.+ (re.+ (str.to_re "qqq"))) (re.++ (re.* (re.+ (str.to_re "rr"))) (re.++ (re.* (re.* (str.to_re "ss"))) (re.++ (re.union (re.+ (str.to_re "tt")) (re.union (str.to_re "uu") (str.to_re "v"))) (re.++ (re.+ (re.+ (str.to_re "ww"))) (re.++ (re.union (re.* (str.to_re "x")) (re.* (str.to_re "y"))) (re.++ (re.* (re.+ (str.to_re "z"))) (re.++ (re.union (re.union (str.to_re "A") (str.to_re "BBB")) (re.* (str.to_re "CC"))) (re.++ (re.union (re.+ (str.to_re "D")) (re.* (str.to_re "EEE"))) (re.++ (re.union (re.* (str.to_re "FFF")) (re.+ (str.to_re "GGG"))) (re.++ (re.+ (re.union (str.to_re "HHH") (str.to_re "I"))) (re.++ (re.* (re.+ (str.to_re "JJ"))) (re.++ (re.union (re.union (str.to_re "K") (str.to_re "LLL")) (re.union (str.to_re "M") (str.to_re "NN"))) (re.++ (re.* (re.+ (str.to_re "OO"))) (re.++ (re.union (re.union (str.to_re "P") (str.to_re "QQ")) (re.+ (str.to_re "RR"))) (re.++ (re.union (re.union (str.to_re "S") (str.to_re "T")) (re.+ (str.to_re "U"))) (re.++ (re.* (re.union (str.to_re "VV") (str.to_re "W"))) (re.++ (re.* (re.* (str.to_re "X"))) (re.++ (re.+ (re.* (str.to_re "Y"))) (re.++ (re.+ (re.union (str.to_re "ZZZ") (str.to_re "!"))) (re.++ (re.union (re.+ (str.to_re """")) (re.union (str.to_re "#") (str.to_re "$"))) (re.++ (re.+ (re.* (str.to_re "%"))) (re.++ (re.union (re.+ (str.to_re "&&")) (re.* (str.to_re "''"))) (re.++ (re.+ (re.+ (str.to_re "("))) (re.++ (re.* (re.* (str.to_re ")))"))) (re.+ (re.* (str.to_re "**")))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
