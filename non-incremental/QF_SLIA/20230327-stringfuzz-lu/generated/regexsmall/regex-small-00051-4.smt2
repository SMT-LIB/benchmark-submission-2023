(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (str.to_re "0"))) (re.++ (re.* (re.union (str.to_re "1") (str.to_re "222"))) (re.++ (re.+ (re.union (str.to_re "333") (str.to_re "4"))) (re.++ (re.+ (re.+ (str.to_re "5"))) (re.++ (re.union (re.* (str.to_re "66")) (re.* (str.to_re "777"))) (re.++ (re.+ (re.* (str.to_re "8"))) (re.++ (re.+ (re.+ (str.to_re "9"))) (re.++ (re.+ (re.+ (str.to_re "aaa"))) (re.++ (re.+ (re.union (str.to_re "bbb") (str.to_re "cc"))) (re.++ (re.+ (re.union (str.to_re "ddd") (str.to_re "ee"))) (re.++ (re.+ (re.* (str.to_re "f"))) (re.++ (re.union (re.+ (str.to_re "g")) (re.+ (str.to_re "h"))) (re.++ (re.union (re.union (str.to_re "iii") (str.to_re "jj")) (re.* (str.to_re "kk"))) (re.++ (re.* (re.* (str.to_re "l"))) (re.++ (re.* (re.* (str.to_re "mm"))) (re.++ (re.+ (re.* (str.to_re "nn"))) (re.++ (re.union (re.* (str.to_re "oo")) (re.+ (str.to_re "p"))) (re.++ (re.union (re.* (str.to_re "qqq")) (re.+ (str.to_re "r"))) (re.++ (re.* (re.+ (str.to_re "s"))) (re.++ (re.union (re.* (str.to_re "t")) (re.+ (str.to_re "uuu"))) (re.++ (re.union (re.+ (str.to_re "vvv")) (re.union (str.to_re "ww") (str.to_re "x"))) (re.++ (re.* (re.union (str.to_re "y") (str.to_re "zzz"))) (re.++ (re.+ (re.union (str.to_re "A") (str.to_re "BB"))) (re.++ (re.union (re.union (str.to_re "CC") (str.to_re "DD")) (re.+ (str.to_re "EE"))) (re.++ (re.* (re.union (str.to_re "F") (str.to_re "G"))) (re.++ (re.+ (re.* (str.to_re "HH"))) (re.++ (re.+ (re.* (str.to_re "I"))) (re.++ (re.union (re.+ (str.to_re "J")) (re.* (str.to_re "KK"))) (re.++ (re.+ (re.+ (str.to_re "LL"))) (re.++ (re.* (re.* (str.to_re "MM"))) (re.++ (re.union (re.* (str.to_re "NN")) (re.+ (str.to_re "OO"))) (re.++ (re.union (re.* (str.to_re "PPP")) (re.* (str.to_re "QQ"))) (re.++ (re.+ (re.union (str.to_re "RR") (str.to_re "S"))) (re.++ (re.* (re.union (str.to_re "TTT") (str.to_re "U"))) (re.++ (re.union (re.+ (str.to_re "V")) (re.union (str.to_re "W") (str.to_re "XXX"))) (re.++ (re.* (re.union (str.to_re "YY") (str.to_re "ZZ"))) (re.++ (re.+ (re.+ (str.to_re "!!"))) (re.++ (re.union (re.+ (str.to_re """""")) (re.+ (str.to_re "##"))) (re.++ (re.* (re.union (str.to_re "$$") (str.to_re "%%"))) (re.++ (re.+ (re.union (str.to_re "&&") (str.to_re "''"))) (re.++ (re.union (re.union (str.to_re "(((") (str.to_re "))")) (re.* (str.to_re "***"))) (re.++ (re.* (re.+ (str.to_re "++"))) (re.++ (re.union (re.+ (str.to_re ",,")) (re.* (str.to_re "-"))) (re.++ (re.+ (re.union (str.to_re "..") (str.to_re "///"))) (re.++ (re.union (re.+ (str.to_re ":::")) (re.+ (str.to_re ";;;"))) (re.++ (re.union (re.union (str.to_re "<<") (str.to_re "=")) (re.* (str.to_re ">>>"))) (re.++ (re.* (re.+ (str.to_re "???"))) (re.++ (re.union (re.+ (str.to_re "@")) (re.* (str.to_re "[[["))) (re.++ (re.* (re.union (str.to_re "\\\\\\") (str.to_re "]]"))) (re.++ (re.* (re.+ (str.to_re "^"))) (re.+ (re.union (str.to_re "_") (str.to_re "`")))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
