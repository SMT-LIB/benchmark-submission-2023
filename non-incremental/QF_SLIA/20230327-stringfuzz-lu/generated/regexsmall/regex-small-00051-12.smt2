(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.* (str.to_re "00"))) (re.++ (re.+ (re.union (str.to_re "111") (str.to_re "22"))) (re.++ (re.+ (re.* (str.to_re "3"))) (re.++ (re.* (re.* (str.to_re "444"))) (re.++ (re.* (re.* (str.to_re "55"))) (re.++ (re.* (re.+ (str.to_re "666"))) (re.++ (re.* (re.+ (str.to_re "7"))) (re.++ (re.+ (re.+ (str.to_re "88"))) (re.++ (re.* (re.union (str.to_re "999") (str.to_re "aa"))) (re.++ (re.+ (re.* (str.to_re "bb"))) (re.++ (re.union (re.+ (str.to_re "cc")) (re.union (str.to_re "dd") (str.to_re "e"))) (re.++ (re.* (re.+ (str.to_re "fff"))) (re.++ (re.+ (re.+ (str.to_re "gg"))) (re.++ (re.union (re.+ (str.to_re "hh")) (re.* (str.to_re "ii"))) (re.++ (re.union (re.union (str.to_re "jj") (str.to_re "kk")) (re.+ (str.to_re "l"))) (re.++ (re.union (re.union (str.to_re "m") (str.to_re "n")) (re.union (str.to_re "o") (str.to_re "pp"))) (re.++ (re.* (re.* (str.to_re "q"))) (re.++ (re.union (re.+ (str.to_re "r")) (re.* (str.to_re "sss"))) (re.++ (re.* (re.+ (str.to_re "tt"))) (re.++ (re.union (re.+ (str.to_re "uuu")) (re.union (str.to_re "vvv") (str.to_re "www"))) (re.++ (re.union (re.* (str.to_re "xx")) (re.union (str.to_re "yyy") (str.to_re "zzz"))) (re.++ (re.* (re.union (str.to_re "AA") (str.to_re "BB"))) (re.++ (re.* (re.union (str.to_re "C") (str.to_re "D"))) (re.++ (re.union (re.* (str.to_re "E")) (re.union (str.to_re "FFF") (str.to_re "G"))) (re.++ (re.union (re.union (str.to_re "H") (str.to_re "I")) (re.* (str.to_re "JJ"))) (re.++ (re.union (re.union (str.to_re "KKK") (str.to_re "LLL")) (re.+ (str.to_re "MM"))) (re.++ (re.union (re.+ (str.to_re "N")) (re.+ (str.to_re "OOO"))) (re.++ (re.union (re.+ (str.to_re "PP")) (re.union (str.to_re "QQQ") (str.to_re "RR"))) (re.++ (re.union (re.* (str.to_re "SSS")) (re.union (str.to_re "T") (str.to_re "UUU"))) (re.++ (re.* (re.+ (str.to_re "VV"))) (re.++ (re.* (re.union (str.to_re "WW") (str.to_re "X"))) (re.++ (re.* (re.* (str.to_re "YYY"))) (re.++ (re.* (re.+ (str.to_re "Z"))) (re.++ (re.union (re.* (str.to_re "!!!")) (re.+ (str.to_re """"""))) (re.++ (re.* (re.* (str.to_re "#"))) (re.++ (re.union (re.+ (str.to_re "$")) (re.+ (str.to_re "%%%"))) (re.++ (re.* (re.+ (str.to_re "&&"))) (re.++ (re.union (re.* (str.to_re "'")) (re.* (str.to_re "((("))) (re.++ (re.union (re.union (str.to_re "))") (str.to_re "*")) (re.union (str.to_re "+") (str.to_re ",,,"))) (re.++ (re.+ (re.+ (str.to_re "---"))) (re.++ (re.* (re.+ (str.to_re "."))) (re.++ (re.* (re.* (str.to_re "/"))) (re.++ (re.+ (re.* (str.to_re ":::"))) (re.++ (re.union (re.* (str.to_re ";;")) (re.union (str.to_re "<") (str.to_re "="))) (re.++ (re.union (re.* (str.to_re ">>")) (re.* (str.to_re "??"))) (re.++ (re.union (re.* (str.to_re "@@@")) (re.* (str.to_re "[["))) (re.++ (re.union (re.union (str.to_re "\\\\\\") (str.to_re "]]")) (re.union (str.to_re "^^") (str.to_re "_"))) (re.++ (re.union (re.+ (str.to_re "`")) (re.union (str.to_re "{{{") (str.to_re "|||"))) (re.++ (re.* (re.union (str.to_re "}}}") (str.to_re "~~~"))) (re.++ (re.union (re.union (str.to_re "000") (str.to_re "111")) (re.+ (str.to_re "222"))) (re.+ (re.+ (str.to_re "33")))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
