(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "00"))) (re.++ (re.+ (re.+ (str.to_re "1"))) (re.++ (re.* (re.union (str.to_re "2") (str.to_re "333"))) (re.++ (re.union (re.+ (str.to_re "444")) (re.+ (str.to_re "555"))) (re.++ (re.+ (re.union (str.to_re "6") (str.to_re "77"))) (re.++ (re.union (re.* (str.to_re "888")) (re.union (str.to_re "999") (str.to_re "aaa"))) (re.++ (re.union (re.+ (str.to_re "b")) (re.union (str.to_re "ccc") (str.to_re "dd"))) (re.++ (re.* (re.union (str.to_re "e") (str.to_re "fff"))) (re.++ (re.union (re.union (str.to_re "ggg") (str.to_re "hh")) (re.+ (str.to_re "iii"))) (re.++ (re.union (re.+ (str.to_re "jj")) (re.union (str.to_re "k") (str.to_re "lll"))) (re.++ (re.union (re.+ (str.to_re "m")) (re.* (str.to_re "nnn"))) (re.++ (re.+ (re.union (str.to_re "o") (str.to_re "ppp"))) (re.++ (re.union (re.+ (str.to_re "qq")) (re.* (str.to_re "r"))) (re.++ (re.* (re.+ (str.to_re "sss"))) (re.++ (re.union (re.+ (str.to_re "ttt")) (re.union (str.to_re "uuu") (str.to_re "v"))) (re.++ (re.+ (re.union (str.to_re "www") (str.to_re "xx"))) (re.++ (re.union (re.union (str.to_re "yyy") (str.to_re "zz")) (re.+ (str.to_re "AA"))) (re.++ (re.+ (re.union (str.to_re "BB") (str.to_re "C"))) (re.++ (re.union (re.union (str.to_re "DDD") (str.to_re "EE")) (re.* (str.to_re "FFF"))) (re.++ (re.+ (re.+ (str.to_re "GGG"))) (re.++ (re.union (re.* (str.to_re "HH")) (re.* (str.to_re "III"))) (re.++ (re.union (re.* (str.to_re "J")) (re.union (str.to_re "KK") (str.to_re "LLL"))) (re.++ (re.* (re.union (str.to_re "MM") (str.to_re "NNN"))) (re.++ (re.+ (re.+ (str.to_re "O"))) (re.++ (re.+ (re.+ (str.to_re "P"))) (re.++ (re.* (re.+ (str.to_re "QQQ"))) (re.++ (re.+ (re.union (str.to_re "RR") (str.to_re "SSS"))) (re.++ (re.* (re.+ (str.to_re "TTT"))) (re.++ (re.* (re.* (str.to_re "U"))) (re.++ (re.+ (re.+ (str.to_re "VVV"))) (re.++ (re.* (re.+ (str.to_re "WW"))) (re.++ (re.union (re.+ (str.to_re "XXX")) (re.+ (str.to_re "YYY"))) (re.++ (re.union (re.+ (str.to_re "ZZ")) (re.* (str.to_re "!!"))) (re.++ (re.union (re.union (str.to_re """""") (str.to_re "###")) (re.union (str.to_re "$$") (str.to_re "%%"))) (re.++ (re.union (re.* (str.to_re "&")) (re.+ (str.to_re "'''"))) (re.++ (re.union (re.union (str.to_re "((") (str.to_re ")")) (re.* (str.to_re "***"))) (re.++ (re.union (re.* (str.to_re "++")) (re.+ (str.to_re ",,,"))) (re.++ (re.+ (re.+ (str.to_re "--"))) (re.++ (re.+ (re.* (str.to_re ".."))) (re.++ (re.union (re.* (str.to_re "///")) (re.* (str.to_re ":"))) (re.++ (re.+ (re.+ (str.to_re ";;;"))) (re.++ (re.* (re.+ (str.to_re "<"))) (re.++ (re.union (re.* (str.to_re "==")) (re.+ (str.to_re ">>>"))) (re.++ (re.union (re.+ (str.to_re "???")) (re.+ (str.to_re "@@@"))) (re.++ (re.union (re.* (str.to_re "[[")) (re.* (str.to_re "\\\\\\"))) (re.++ (re.* (re.union (str.to_re "]") (str.to_re "^"))) (re.++ (re.+ (re.+ (str.to_re "___"))) (re.++ (re.union (re.+ (str.to_re "``")) (re.+ (str.to_re "{{"))) (re.++ (re.+ (re.* (str.to_re "|"))) (re.++ (re.+ (re.+ (str.to_re "}"))) (re.* (re.union (str.to_re "~~") (str.to_re "0")))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
