(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "0"))) (re.++ (re.* (re.+ (str.to_re "11"))) (re.++ (re.union (re.+ (str.to_re "222")) (re.* (str.to_re "333"))) (re.++ (re.union (re.union (str.to_re "4") (str.to_re "555")) (re.union (str.to_re "66") (str.to_re "7"))) (re.++ (re.union (re.union (str.to_re "88") (str.to_re "9")) (re.union (str.to_re "aa") (str.to_re "b"))) (re.++ (re.union (re.union (str.to_re "c") (str.to_re "ddd")) (re.+ (str.to_re "ee"))) (re.++ (re.union (re.* (str.to_re "fff")) (re.union (str.to_re "g") (str.to_re "h"))) (re.++ (re.+ (re.* (str.to_re "iii"))) (re.++ (re.* (re.+ (str.to_re "j"))) (re.++ (re.* (re.+ (str.to_re "kk"))) (re.++ (re.union (re.* (str.to_re "lll")) (re.+ (str.to_re "m"))) (re.++ (re.* (re.union (str.to_re "nn") (str.to_re "o"))) (re.++ (re.+ (re.* (str.to_re "pp"))) (re.++ (re.+ (re.union (str.to_re "qqq") (str.to_re "r"))) (re.++ (re.union (re.union (str.to_re "ss") (str.to_re "ttt")) (re.+ (str.to_re "u"))) (re.++ (re.union (re.union (str.to_re "vvv") (str.to_re "w")) (re.+ (str.to_re "xx"))) (re.++ (re.+ (re.union (str.to_re "yyy") (str.to_re "zzz"))) (re.++ (re.+ (re.* (str.to_re "A"))) (re.++ (re.* (re.+ (str.to_re "B"))) (re.++ (re.union (re.* (str.to_re "CCC")) (re.+ (str.to_re "D"))) (re.++ (re.* (re.union (str.to_re "EE") (str.to_re "FFF"))) (re.++ (re.union (re.+ (str.to_re "GGG")) (re.union (str.to_re "HH") (str.to_re "I"))) (re.++ (re.+ (re.* (str.to_re "JJJ"))) (re.++ (re.union (re.* (str.to_re "KKK")) (re.union (str.to_re "L") (str.to_re "M"))) (re.++ (re.+ (re.+ (str.to_re "NN"))) (re.++ (re.* (re.+ (str.to_re "OO"))) (re.++ (re.+ (re.union (str.to_re "PP") (str.to_re "QQQ"))) (re.++ (re.+ (re.* (str.to_re "RRR"))) (re.++ (re.* (re.* (str.to_re "SSS"))) (re.++ (re.* (re.+ (str.to_re "T"))) (re.++ (re.union (re.+ (str.to_re "U")) (re.+ (str.to_re "VV"))) (re.++ (re.* (re.union (str.to_re "W") (str.to_re "X"))) (re.++ (re.union (re.union (str.to_re "YY") (str.to_re "Z")) (re.+ (str.to_re "!!"))) (re.++ (re.+ (re.* (str.to_re """"""""))) (re.++ (re.union (re.union (str.to_re "#") (str.to_re "$")) (re.* (str.to_re "%"))) (re.++ (re.union (re.* (str.to_re "&")) (re.union (str.to_re "'") (str.to_re "("))) (re.++ (re.+ (re.* (str.to_re ")))"))) (re.++ (re.* (re.+ (str.to_re "*"))) (re.union (re.* (str.to_re "++")) (re.+ (str.to_re ",,,")))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
