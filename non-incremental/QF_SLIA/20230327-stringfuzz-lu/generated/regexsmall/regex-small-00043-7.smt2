(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (str.to_re "00"))) (re.++ (re.+ (re.* (str.to_re "111"))) (re.++ (re.* (re.+ (str.to_re "222"))) (re.++ (re.* (re.union (str.to_re "3") (str.to_re "44"))) (re.++ (re.union (re.union (str.to_re "55") (str.to_re "66")) (re.* (str.to_re "777"))) (re.++ (re.+ (re.+ (str.to_re "888"))) (re.++ (re.union (re.+ (str.to_re "9")) (re.+ (str.to_re "a"))) (re.++ (re.union (re.union (str.to_re "bb") (str.to_re "cc")) (re.union (str.to_re "dd") (str.to_re "eee"))) (re.++ (re.union (re.* (str.to_re "fff")) (re.+ (str.to_re "gg"))) (re.++ (re.+ (re.+ (str.to_re "hh"))) (re.++ (re.+ (re.+ (str.to_re "ii"))) (re.++ (re.union (re.union (str.to_re "jj") (str.to_re "k")) (re.+ (str.to_re "ll"))) (re.++ (re.* (re.+ (str.to_re "mmm"))) (re.++ (re.* (re.+ (str.to_re "nnn"))) (re.++ (re.* (re.* (str.to_re "o"))) (re.++ (re.* (re.+ (str.to_re "pp"))) (re.++ (re.+ (re.union (str.to_re "qqq") (str.to_re "rr"))) (re.++ (re.* (re.* (str.to_re "s"))) (re.++ (re.* (re.+ (str.to_re "t"))) (re.++ (re.union (re.union (str.to_re "uu") (str.to_re "v")) (re.+ (str.to_re "w"))) (re.++ (re.union (re.* (str.to_re "xx")) (re.+ (str.to_re "y"))) (re.++ (re.union (re.union (str.to_re "zz") (str.to_re "AAA")) (re.* (str.to_re "B"))) (re.++ (re.union (re.+ (str.to_re "CCC")) (re.union (str.to_re "DD") (str.to_re "EEE"))) (re.++ (re.union (re.union (str.to_re "FFF") (str.to_re "G")) (re.+ (str.to_re "HHH"))) (re.++ (re.* (re.union (str.to_re "III") (str.to_re "JJ"))) (re.++ (re.union (re.+ (str.to_re "KK")) (re.* (str.to_re "LLL"))) (re.++ (re.* (re.union (str.to_re "MM") (str.to_re "NN"))) (re.++ (re.* (re.+ (str.to_re "O"))) (re.++ (re.+ (re.+ (str.to_re "PPP"))) (re.++ (re.union (re.+ (str.to_re "Q")) (re.+ (str.to_re "RR"))) (re.++ (re.* (re.union (str.to_re "SSS") (str.to_re "TTT"))) (re.++ (re.union (re.union (str.to_re "U") (str.to_re "V")) (re.union (str.to_re "W") (str.to_re "X"))) (re.++ (re.* (re.+ (str.to_re "YY"))) (re.++ (re.* (re.+ (str.to_re "ZZZ"))) (re.++ (re.union (re.union (str.to_re "!") (str.to_re """")) (re.* (str.to_re "#"))) (re.++ (re.union (re.* (str.to_re "$$")) (re.union (str.to_re "%%%") (str.to_re "&&&"))) (re.++ (re.union (re.* (str.to_re "'''")) (re.+ (str.to_re "("))) (re.++ (re.* (re.* (str.to_re "))"))) (re.++ (re.+ (re.union (str.to_re "***") (str.to_re "+"))) (re.++ (re.+ (re.+ (str.to_re ","))) (re.++ (re.union (re.union (str.to_re "--") (str.to_re "...")) (re.union (str.to_re "/") (str.to_re ":"))) (re.++ (re.+ (re.* (str.to_re ";;"))) (re.* (re.union (str.to_re "<") (str.to_re "=")))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
