(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (str.to_re "00")) (re.union (str.to_re "111") (str.to_re "222"))) (re.++ (re.+ (re.union (str.to_re "3") (str.to_re "4"))) (re.++ (re.+ (re.union (str.to_re "55") (str.to_re "666"))) (re.++ (re.union (re.* (str.to_re "777")) (re.union (str.to_re "88") (str.to_re "999"))) (re.++ (re.union (re.+ (str.to_re "aaa")) (re.union (str.to_re "bb") (str.to_re "cc"))) (re.++ (re.* (re.+ (str.to_re "d"))) (re.++ (re.+ (re.union (str.to_re "eee") (str.to_re "fff"))) (re.++ (re.* (re.union (str.to_re "ggg") (str.to_re "h"))) (re.++ (re.+ (re.+ (str.to_re "ii"))) (re.++ (re.* (re.union (str.to_re "j") (str.to_re "k"))) (re.++ (re.+ (re.union (str.to_re "lll") (str.to_re "m"))) (re.++ (re.+ (re.* (str.to_re "nnn"))) (re.++ (re.union (re.+ (str.to_re "o")) (re.+ (str.to_re "ppp"))) (re.++ (re.union (re.union (str.to_re "qqq") (str.to_re "rr")) (re.union (str.to_re "ss") (str.to_re "ttt"))) (re.++ (re.+ (re.union (str.to_re "uu") (str.to_re "vvv"))) (re.++ (re.* (re.* (str.to_re "w"))) (re.++ (re.* (re.union (str.to_re "xxx") (str.to_re "yy"))) (re.++ (re.union (re.union (str.to_re "zz") (str.to_re "A")) (re.+ (str.to_re "BB"))) (re.++ (re.+ (re.* (str.to_re "CCC"))) (re.++ (re.* (re.* (str.to_re "DDD"))) (re.++ (re.union (re.* (str.to_re "EEE")) (re.* (str.to_re "F"))) (re.++ (re.+ (re.+ (str.to_re "GGG"))) (re.++ (re.union (re.+ (str.to_re "HH")) (re.* (str.to_re "III"))) (re.++ (re.union (re.+ (str.to_re "JJJ")) (re.union (str.to_re "KKK") (str.to_re "LLL"))) (re.++ (re.union (re.* (str.to_re "MM")) (re.* (str.to_re "NNN"))) (re.++ (re.+ (re.* (str.to_re "OOO"))) (re.++ (re.+ (re.union (str.to_re "PP") (str.to_re "QQQ"))) (re.++ (re.union (re.union (str.to_re "RR") (str.to_re "S")) (re.* (str.to_re "T"))) (re.++ (re.union (re.+ (str.to_re "UUU")) (re.+ (str.to_re "V"))) (re.++ (re.union (re.+ (str.to_re "WW")) (re.+ (str.to_re "XXX"))) (re.++ (re.+ (re.* (str.to_re "YY"))) (re.++ (re.+ (re.union (str.to_re "ZZZ") (str.to_re "!!"))) (re.++ (re.+ (re.* (str.to_re """"""""))) (re.++ (re.+ (re.* (str.to_re "#"))) (re.++ (re.union (re.* (str.to_re "$$$")) (re.+ (str.to_re "%"))) (re.++ (re.* (re.+ (str.to_re "&&&"))) (re.* (re.* (str.to_re "'")))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
