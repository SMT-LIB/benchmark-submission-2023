(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (str.to_re "000")) (re.* (str.to_re "11"))) (re.++ (re.union (re.+ (str.to_re "222")) (re.+ (str.to_re "33"))) (re.++ (re.+ (re.+ (str.to_re "4"))) (re.++ (re.+ (re.* (str.to_re "555"))) (re.++ (re.+ (re.* (str.to_re "6"))) (re.++ (re.+ (re.+ (str.to_re "777"))) (re.++ (re.+ (re.* (str.to_re "88"))) (re.++ (re.union (re.* (str.to_re "999")) (re.union (str.to_re "aaa") (str.to_re "bb"))) (re.++ (re.+ (re.* (str.to_re "cc"))) (re.++ (re.+ (re.* (str.to_re "ddd"))) (re.++ (re.union (re.* (str.to_re "e")) (re.* (str.to_re "ff"))) (re.++ (re.* (re.+ (str.to_re "ggg"))) (re.++ (re.* (re.* (str.to_re "hhh"))) (re.++ (re.+ (re.+ (str.to_re "ii"))) (re.++ (re.union (re.+ (str.to_re "jjj")) (re.union (str.to_re "k") (str.to_re "lll"))) (re.++ (re.* (re.* (str.to_re "mmm"))) (re.++ (re.union (re.+ (str.to_re "n")) (re.+ (str.to_re "o"))) (re.++ (re.+ (re.* (str.to_re "p"))) (re.++ (re.union (re.* (str.to_re "q")) (re.union (str.to_re "rr") (str.to_re "ss"))) (re.++ (re.union (re.* (str.to_re "ttt")) (re.union (str.to_re "uuu") (str.to_re "vv"))) (re.++ (re.union (re.union (str.to_re "w") (str.to_re "xxx")) (re.* (str.to_re "yy"))) (re.++ (re.+ (re.+ (str.to_re "z"))) (re.++ (re.* (re.* (str.to_re "AA"))) (re.++ (re.union (re.* (str.to_re "BB")) (re.* (str.to_re "CC"))) (re.++ (re.+ (re.union (str.to_re "DDD") (str.to_re "E"))) (re.++ (re.union (re.+ (str.to_re "FFF")) (re.union (str.to_re "GG") (str.to_re "H"))) (re.++ (re.+ (re.* (str.to_re "I"))) (re.++ (re.+ (re.* (str.to_re "JJ"))) (re.++ (re.union (re.* (str.to_re "K")) (re.union (str.to_re "L") (str.to_re "M"))) (re.++ (re.* (re.* (str.to_re "NN"))) (re.++ (re.* (re.union (str.to_re "OOO") (str.to_re "PP"))) (re.++ (re.+ (re.* (str.to_re "QQ"))) (re.++ (re.union (re.union (str.to_re "R") (str.to_re "SS")) (re.union (str.to_re "TTT") (str.to_re "UU"))) (re.++ (re.+ (re.* (str.to_re "V"))) (re.++ (re.union (re.+ (str.to_re "WWW")) (re.union (str.to_re "XXX") (str.to_re "Y"))) (re.++ (re.union (re.union (str.to_re "Z") (str.to_re "!!")) (re.+ (str.to_re """"))) (re.++ (re.union (re.union (str.to_re "###") (str.to_re "$")) (re.* (str.to_re "%%"))) (re.++ (re.+ (re.union (str.to_re "&") (str.to_re "'''"))) (re.++ (re.+ (re.union (str.to_re "(") (str.to_re ")))"))) (re.++ (re.union (re.* (str.to_re "**")) (re.union (str.to_re "++") (str.to_re ","))) (re.++ (re.* (re.* (str.to_re "-"))) (re.++ (re.union (re.* (str.to_re ".")) (re.+ (str.to_re "//"))) (re.++ (re.+ (re.union (str.to_re "::") (str.to_re ";;"))) (re.++ (re.union (re.* (str.to_re "<<<")) (re.* (str.to_re "=="))) (re.++ (re.union (re.+ (str.to_re ">")) (re.union (str.to_re "??") (str.to_re "@@@"))) (re.++ (re.union (re.union (str.to_re "[[") (str.to_re "\\")) (re.* (str.to_re "]]"))) (re.++ (re.+ (re.union (str.to_re "^") (str.to_re "___"))) (re.++ (re.+ (re.* (str.to_re "``"))) (re.++ (re.union (re.+ (str.to_re "{")) (re.* (str.to_re "|"))) (re.++ (re.+ (re.* (str.to_re "}}"))) (re.+ (re.union (str.to_re "~~") (str.to_re "000")))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
