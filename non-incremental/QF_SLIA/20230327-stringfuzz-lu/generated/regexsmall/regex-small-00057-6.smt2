(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.union (str.to_re "000") (str.to_re "11")) (re.+ (str.to_re "2"))) (re.++ (re.union (re.+ (str.to_re "3")) (re.* (str.to_re "4"))) (re.++ (re.* (re.+ (str.to_re "55"))) (re.++ (re.union (re.+ (str.to_re "66")) (re.* (str.to_re "7"))) (re.++ (re.+ (re.* (str.to_re "8"))) (re.++ (re.+ (re.* (str.to_re "99"))) (re.++ (re.union (re.* (str.to_re "a")) (re.+ (str.to_re "bbb"))) (re.++ (re.+ (re.+ (str.to_re "ccc"))) (re.++ (re.+ (re.union (str.to_re "ddd") (str.to_re "ee"))) (re.++ (re.+ (re.* (str.to_re "ff"))) (re.++ (re.union (re.union (str.to_re "g") (str.to_re "h")) (re.union (str.to_re "iii") (str.to_re "jj"))) (re.++ (re.+ (re.* (str.to_re "kkk"))) (re.++ (re.+ (re.union (str.to_re "lll") (str.to_re "m"))) (re.++ (re.* (re.union (str.to_re "nn") (str.to_re "oo"))) (re.++ (re.union (re.union (str.to_re "p") (str.to_re "qq")) (re.* (str.to_re "r"))) (re.++ (re.* (re.+ (str.to_re "sss"))) (re.++ (re.* (re.+ (str.to_re "ttt"))) (re.++ (re.union (re.* (str.to_re "u")) (re.+ (str.to_re "vvv"))) (re.++ (re.+ (re.union (str.to_re "www") (str.to_re "xx"))) (re.++ (re.* (re.* (str.to_re "yyy"))) (re.++ (re.+ (re.* (str.to_re "zz"))) (re.++ (re.+ (re.* (str.to_re "AA"))) (re.++ (re.union (re.union (str.to_re "B") (str.to_re "CCC")) (re.* (str.to_re "DDD"))) (re.++ (re.+ (re.union (str.to_re "EEE") (str.to_re "FFF"))) (re.++ (re.union (re.union (str.to_re "G") (str.to_re "H")) (re.union (str.to_re "I") (str.to_re "J"))) (re.++ (re.+ (re.+ (str.to_re "KKK"))) (re.++ (re.union (re.union (str.to_re "LLL") (str.to_re "MM")) (re.+ (str.to_re "N"))) (re.++ (re.+ (re.* (str.to_re "OO"))) (re.++ (re.+ (re.+ (str.to_re "PPP"))) (re.++ (re.* (re.* (str.to_re "QQ"))) (re.++ (re.+ (re.+ (str.to_re "RRR"))) (re.++ (re.+ (re.union (str.to_re "SS") (str.to_re "TTT"))) (re.++ (re.union (re.+ (str.to_re "U")) (re.* (str.to_re "VVV"))) (re.++ (re.union (re.* (str.to_re "WWW")) (re.* (str.to_re "XX"))) (re.++ (re.* (re.* (str.to_re "YY"))) (re.++ (re.union (re.union (str.to_re "ZZZ") (str.to_re "!")) (re.* (str.to_re """"""))) (re.++ (re.union (re.+ (str.to_re "#")) (re.union (str.to_re "$$") (str.to_re "%%%"))) (re.++ (re.+ (re.union (str.to_re "&&&") (str.to_re "'"))) (re.++ (re.+ (re.* (str.to_re "("))) (re.++ (re.+ (re.* (str.to_re "))"))) (re.++ (re.* (re.* (str.to_re "***"))) (re.++ (re.* (re.union (str.to_re "+++") (str.to_re ","))) (re.++ (re.union (re.union (str.to_re "-") (str.to_re "...")) (re.* (str.to_re "///"))) (re.++ (re.+ (re.+ (str.to_re ":::"))) (re.++ (re.union (re.+ (str.to_re ";;")) (re.+ (str.to_re "<"))) (re.++ (re.* (re.union (str.to_re "===") (str.to_re ">"))) (re.++ (re.+ (re.union (str.to_re "??") (str.to_re "@"))) (re.++ (re.+ (re.* (str.to_re "[["))) (re.++ (re.+ (re.* (str.to_re "\\\\\\"))) (re.++ (re.+ (re.+ (str.to_re "]"))) (re.++ (re.* (re.union (str.to_re "^^") (str.to_re "__"))) (re.++ (re.+ (re.+ (str.to_re "`"))) (re.++ (re.* (re.+ (str.to_re "{{"))) (re.++ (re.union (re.+ (str.to_re "|")) (re.+ (str.to_re "}"))) (re.++ (re.+ (re.+ (str.to_re "~"))) (re.++ (re.union (re.+ (str.to_re "0")) (re.union (str.to_re "111") (str.to_re "2"))) (re.union (re.+ (str.to_re "33")) (re.+ (str.to_re "444")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
