(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (str.to_re "0"))) (re.++ (re.union (re.+ (str.to_re "11")) (re.* (str.to_re "2"))) (re.++ (re.* (re.+ (str.to_re "333"))) (re.++ (re.+ (re.+ (str.to_re "444"))) (re.++ (re.+ (re.union (str.to_re "55") (str.to_re "666"))) (re.++ (re.union (re.union (str.to_re "77") (str.to_re "888")) (re.+ (str.to_re "999"))) (re.++ (re.+ (re.+ (str.to_re "aaa"))) (re.++ (re.union (re.union (str.to_re "bbb") (str.to_re "cc")) (re.union (str.to_re "ddd") (str.to_re "eee"))) (re.++ (re.* (re.union (str.to_re "f") (str.to_re "gg"))) (re.++ (re.union (re.* (str.to_re "hhh")) (re.* (str.to_re "i"))) (re.++ (re.+ (re.union (str.to_re "j") (str.to_re "k"))) (re.++ (re.+ (re.union (str.to_re "l") (str.to_re "mm"))) (re.++ (re.+ (re.union (str.to_re "n") (str.to_re "o"))) (re.++ (re.union (re.+ (str.to_re "pp")) (re.* (str.to_re "qq"))) (re.++ (re.* (re.union (str.to_re "rrr") (str.to_re "s"))) (re.++ (re.union (re.union (str.to_re "ttt") (str.to_re "u")) (re.+ (str.to_re "vv"))) (re.++ (re.union (re.* (str.to_re "www")) (re.union (str.to_re "xx") (str.to_re "yyy"))) (re.++ (re.+ (re.union (str.to_re "z") (str.to_re "AA"))) (re.++ (re.* (re.union (str.to_re "B") (str.to_re "CC"))) (re.++ (re.union (re.+ (str.to_re "DD")) (re.+ (str.to_re "EE"))) (re.++ (re.+ (re.+ (str.to_re "FF"))) (re.++ (re.* (re.union (str.to_re "GG") (str.to_re "H"))) (re.++ (re.union (re.+ (str.to_re "III")) (re.* (str.to_re "JJJ"))) (re.++ (re.+ (re.* (str.to_re "KK"))) (re.++ (re.union (re.+ (str.to_re "LLL")) (re.* (str.to_re "M"))) (re.++ (re.union (re.union (str.to_re "N") (str.to_re "OO")) (re.+ (str.to_re "P"))) (re.++ (re.union (re.union (str.to_re "Q") (str.to_re "R")) (re.* (str.to_re "S"))) (re.++ (re.* (re.union (str.to_re "TT") (str.to_re "U"))) (re.++ (re.+ (re.* (str.to_re "V"))) (re.++ (re.+ (re.* (str.to_re "WW"))) (re.++ (re.union (re.* (str.to_re "XXX")) (re.union (str.to_re "YY") (str.to_re "Z"))) (re.++ (re.+ (re.union (str.to_re "!!") (str.to_re """"""))) (re.++ (re.* (re.+ (str.to_re "##"))) (re.++ (re.* (re.union (str.to_re "$") (str.to_re "%%%"))) (re.++ (re.* (re.+ (str.to_re "&&&"))) (re.++ (re.* (re.* (str.to_re "'''"))) (re.++ (re.union (re.* (str.to_re "(((")) (re.union (str.to_re ")))") (str.to_re "***"))) (re.++ (re.* (re.+ (str.to_re "+++"))) (re.++ (re.union (re.+ (str.to_re ",,,")) (re.* (str.to_re "-"))) (re.++ (re.+ (re.union (str.to_re ".") (str.to_re "/"))) (re.++ (re.* (re.+ (str.to_re "::"))) (re.++ (re.* (re.union (str.to_re ";;") (str.to_re "<<<"))) (re.++ (re.+ (re.union (str.to_re "===") (str.to_re ">>>"))) (re.++ (re.union (re.+ (str.to_re "??")) (re.+ (str.to_re "@"))) (re.++ (re.* (re.* (str.to_re "[["))) (re.++ (re.union (re.union (str.to_re "\\\\") (str.to_re "]]]")) (re.union (str.to_re "^") (str.to_re "_"))) (re.++ (re.* (re.* (str.to_re "```"))) (re.++ (re.+ (re.+ (str.to_re "{{{"))) (re.++ (re.union (re.union (str.to_re "||") (str.to_re "}}}")) (re.* (str.to_re "~~"))) (re.++ (re.union (re.+ (str.to_re "000")) (re.* (str.to_re "1"))) (re.++ (re.union (re.+ (str.to_re "22")) (re.* (str.to_re "3"))) (re.++ (re.+ (re.union (str.to_re "44") (str.to_re "5"))) (re.++ (re.union (re.+ (str.to_re "66")) (re.union (str.to_re "77") (str.to_re "8"))) (re.++ (re.* (re.union (str.to_re "999") (str.to_re "a"))) (re.union (re.+ (str.to_re "bbb")) (re.+ (str.to_re "c")))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)
(exit)
