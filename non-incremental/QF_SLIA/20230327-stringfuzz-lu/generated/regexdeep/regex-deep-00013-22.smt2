(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (re.+ (re.* (re.* (re.union (re.union (re.* (re.+ (re.+ (re.+ (re.* (re.union (str.to_re "00") (str.to_re "1"))))))) (re.union (re.* (re.union (re.+ (re.* (re.union (str.to_re "2") (str.to_re "33")))) (re.union (re.union (re.* (str.to_re "444")) (re.* (str.to_re "55"))) (re.* (re.* (str.to_re "666")))))) (re.* (re.* (re.* (re.union (re.+ (str.to_re "7")) (re.union (str.to_re "888") (str.to_re "99")))))))) (re.+ (re.* (re.+ (re.union (re.+ (re.+ (re.* (str.to_re "aaa")))) (re.+ (re.+ (re.* (str.to_re "b"))))))))))))) (re.union (re.* (re.* (re.union (re.union (re.* (re.+ (re.+ (re.+ (re.+ (re.* (re.* (str.to_re "c")))))))) (re.union (re.* (re.union (re.* (re.union (re.* (re.union (str.to_re "dd") (str.to_re "e"))) (re.union (re.* (str.to_re "fff")) (re.+ (str.to_re "gg"))))) (re.union (re.+ (re.* (re.union (str.to_re "h") (str.to_re "iii")))) (re.union (re.+ (re.union (str.to_re "jj") (str.to_re "kkk"))) (re.union (re.union (str.to_re "l") (str.to_re "mmm")) (re.* (str.to_re "n"))))))) (re.* (re.* (re.union (re.union (re.+ (re.+ (str.to_re "oo"))) (re.+ (re.+ (str.to_re "pp")))) (re.* (re.* (re.* (str.to_re "q"))))))))) (re.+ (re.union (re.* (re.+ (re.union (re.* (re.+ (re.* (str.to_re "rrr")))) (re.+ (re.union (re.* (str.to_re "s")) (re.* (str.to_re "ttt"))))))) (re.* (re.union (re.* (re.* (re.+ (re.+ (str.to_re "uu"))))) (re.* (re.* (re.* (re.union (str.to_re "v") (str.to_re "ww")))))))))))) (re.union (re.* (re.* (re.union (re.* (re.union (re.union (re.* (re.+ (re.union (re.+ (str.to_re "xxx")) (re.+ (str.to_re "y"))))) (re.union (re.* (re.* (re.union (str.to_re "zz") (str.to_re "AAA")))) (re.+ (re.+ (re.* (str.to_re "B")))))) (re.+ (re.* (re.+ (re.* (re.+ (str.to_re "CCC")))))))) (re.+ (re.union (re.+ (re.union (re.* (re.* (re.+ (str.to_re "DDD")))) (re.* (re.* (re.+ (str.to_re "EEE")))))) (re.+ (re.* (re.union (re.+ (re.+ (str.to_re "F"))) (re.* (re.+ (str.to_re "GG"))))))))))) (re.+ (re.union (re.union (re.union (re.+ (re.+ (re.* (re.union (re.union (re.* (str.to_re "HH")) (re.union (str.to_re "I") (str.to_re "JJ"))) (re.+ (re.* (str.to_re "KKK"))))))) (re.union (re.union (re.+ (re.* (re.union (re.union (str.to_re "L") (str.to_re "MMM")) (re.+ (str.to_re "N"))))) (re.* (re.union (re.* (re.+ (str.to_re "OO"))) (re.union (re.+ (str.to_re "P")) (re.+ (str.to_re "QQQ")))))) (re.union (re.union (re.+ (re.* (re.* (str.to_re "RR")))) (re.+ (re.+ (re.union (str.to_re "SSS") (str.to_re "TT"))))) (re.+ (re.union (re.union (re.+ (str.to_re "UUU")) (re.union (str.to_re "VVV") (str.to_re "WW"))) (re.+ (re.+ (str.to_re "XXX")))))))) (re.* (re.* (re.+ (re.* (re.+ (re.union (re.union (str.to_re "YY") (str.to_re "Z")) (re.union (str.to_re "!!") (str.to_re """"""""))))))))) (re.* (re.+ (re.* (re.+ (re.* (re.* (re.* (re.union (str.to_re "##") (str.to_re "$$$")))))))))))))) (re.+ (re.+ (re.* (re.+ (re.union (re.+ (re.union (re.* (re.+ (re.union (re.union (re.+ (re.* (str.to_re "%%%"))) (re.+ (re.* (str.to_re "&")))) (re.union (re.* (re.* (str.to_re "'"))) (re.* (re.+ (str.to_re "((("))))))) (re.* (re.union (re.+ (re.* (re.* (re.union (str.to_re "))") (str.to_re "**"))))) (re.* (re.union (re.union (re.union (str.to_re "+++") (str.to_re ",,,")) (re.union (str.to_re "---") (str.to_re "."))) (re.+ (re.+ (str.to_re "///"))))))))) (re.union (re.union (re.* (re.* (re.+ (re.+ (re.* (re.union (str.to_re "::") (str.to_re ";;"))))))) (re.union (re.* (re.union (re.* (re.union (re.union (str.to_re "<") (str.to_re "=")) (re.union (str.to_re ">>>") (str.to_re "???")))) (re.+ (re.union (re.+ (str.to_re "@@@")) (re.* (str.to_re "[[[")))))) (re.union (re.+ (re.+ (re.+ (re.* (str.to_re "\\\\"))))) (re.+ (re.+ (re.+ (re.union (str.to_re "]]]") (str.to_re "^")))))))) (re.+ (re.* (re.+ (re.+ (re.* (re.+ (re.* (str.to_re "__")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
