(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.union (re.+ (re.* (re.* (re.+ (re.+ (re.* (re.union (re.+ (str.to_re "0")) (re.+ (str.to_re "111"))))))))) (re.union (re.* (re.union (re.* (re.* (re.union (re.union (re.* (str.to_re "22")) (re.union (str.to_re "33") (str.to_re "4"))) (re.* (re.* (str.to_re "5")))))) (re.+ (re.+ (re.* (re.* (re.+ (str.to_re "66")))))))) (re.union (re.* (re.* (re.* (re.* (re.* (re.* (str.to_re "7"))))))) (re.* (re.union (re.+ (re.* (re.+ (re.* (str.to_re "88"))))) (re.union (re.union (re.+ (re.+ (str.to_re "9"))) (re.* (re.+ (str.to_re "aaa")))) (re.+ (re.union (re.union (str.to_re "b") (str.to_re "ccc")) (re.+ (str.to_re "d")))))))))) (re.* (re.* (re.* (re.+ (re.union (re.union (re.union (re.union (re.union (str.to_re "eee") (str.to_re "ff")) (re.* (str.to_re "g"))) (re.+ (re.union (str.to_re "h") (str.to_re "iii")))) (re.* (re.* (re.* (str.to_re "jj"))))) (re.+ (re.union (re.+ (re.union (str.to_re "kk") (str.to_re "lll"))) (re.* (re.union (str.to_re "m") (str.to_re "n"))))))))))) (re.union (re.* (re.union (re.* (re.+ (re.* (re.+ (re.* (re.union (re.* (str.to_re "ooo")) (re.+ (str.to_re "ppp")))))))) (re.union (re.* (re.union (re.union (re.union (re.union (re.* (str.to_re "q")) (re.+ (str.to_re "rr"))) (re.union (re.* (str.to_re "ss")) (re.union (str.to_re "tt") (str.to_re "u")))) (re.+ (re.* (re.* (str.to_re "vvv"))))) (re.union (re.+ (re.* (re.* (str.to_re "www")))) (re.* (re.+ (re.* (str.to_re "x"))))))) (re.+ (re.* (re.union (re.union (re.union (re.+ (str.to_re "y")) (re.union (str.to_re "zzz") (str.to_re "A"))) (re.+ (re.* (str.to_re "B")))) (re.* (re.+ (re.* (str.to_re "CC")))))))))) (re.+ (re.* (re.+ (re.+ (re.* (re.* (re.union (re.+ (re.* (str.to_re "DDD"))) (re.* (re.union (str.to_re "EEE") (str.to_re "F"))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
