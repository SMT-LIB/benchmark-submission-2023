(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (re.union (re.union (re.union (re.union (re.* (re.union (re.union (re.* (re.union (str.to_re "00") (str.to_re "1"))) (re.* (re.* (str.to_re "2")))) (re.+ (re.* (re.* (str.to_re "33")))))) (re.union (re.* (re.+ (re.* (re.+ (str.to_re "4"))))) (re.+ (re.+ (re.+ (re.union (str.to_re "555") (str.to_re "666"))))))) (re.union (re.* (re.union (re.+ (re.union (re.* (str.to_re "777")) (re.+ (str.to_re "888")))) (re.* (re.* (re.union (str.to_re "999") (str.to_re "aa")))))) (re.union (re.* (re.union (re.+ (re.+ (str.to_re "bbb"))) (re.* (re.+ (str.to_re "c"))))) (re.+ (re.* (re.union (re.+ (str.to_re "d")) (re.union (str.to_re "e") (str.to_re "f")))))))) (re.union (re.+ (re.+ (re.* (re.+ (re.union (re.union (str.to_re "ggg") (str.to_re "h")) (re.union (str.to_re "iii") (str.to_re "jjj"))))))) (re.+ (re.union (re.+ (re.union (re.* (re.+ (str.to_re "k"))) (re.+ (re.+ (str.to_re "lll"))))) (re.union (re.* (re.+ (re.+ (str.to_re "mmm")))) (re.* (re.+ (re.* (str.to_re "nnn"))))))))) (re.+ (re.+ (re.+ (re.union (re.* (re.* (re.union (re.union (str.to_re "o") (str.to_re "pp")) (re.union (str.to_re "qqq") (str.to_re "rrr"))))) (re.union (re.+ (re.union (re.union (str.to_re "s") (str.to_re "ttt")) (re.+ (str.to_re "u")))) (re.+ (re.+ (re.* (str.to_re "v")))))))))) (re.* (re.* (re.+ (re.* (re.union (re.+ (re.+ (re.union (re.+ (str.to_re "www")) (re.* (str.to_re "xx"))))) (re.union (re.union (re.+ (re.union (str.to_re "yyy") (str.to_re "zz"))) (re.* (re.+ (str.to_re "AA")))) (re.* (re.+ (re.+ (str.to_re "BBB")))))))))))) (re.union (re.* (re.union (re.* (re.+ (re.+ (re.union (re.union (re.+ (re.* (re.* (str.to_re "CCC")))) (re.union (re.union (re.* (str.to_re "DDD")) (re.+ (str.to_re "EE"))) (re.union (re.union (str.to_re "FF") (str.to_re "G")) (re.+ (str.to_re "HHH"))))) (re.+ (re.+ (re.* (re.union (str.to_re "II") (str.to_re "J"))))))))) (re.+ (re.* (re.union (re.+ (re.+ (re.* (re.+ (re.* (str.to_re "K")))))) (re.union (re.union (re.* (re.union (re.* (str.to_re "L")) (re.union (str.to_re "MMM") (str.to_re "NN")))) (re.* (re.union (re.* (str.to_re "O")) (re.+ (str.to_re "P"))))) (re.+ (re.+ (re.* (re.union (str.to_re "QQ") (str.to_re "RRR"))))))))))) (re.union (re.+ (re.union (re.* (re.+ (re.union (re.union (re.* (re.union (re.union (str.to_re "S") (str.to_re "TTT")) (re.* (str.to_re "UUU")))) (re.+ (re.union (re.union (str.to_re "VVV") (str.to_re "WWW")) (re.* (str.to_re "XXX"))))) (re.+ (re.+ (re.union (re.union (str.to_re "YYY") (str.to_re "ZZZ")) (re.* (str.to_re "!")))))))) (re.union (re.+ (re.* (re.* (re.* (re.* (re.union (str.to_re """""""") (str.to_re "###"))))))) (re.* (re.union (re.+ (re.union (re.* (re.+ (str.to_re "$"))) (re.union (re.+ (str.to_re "%%%")) (re.union (str.to_re "&") (str.to_re "'''"))))) (re.+ (re.union (re.union (re.+ (str.to_re "(((")) (re.union (str.to_re ")))") (str.to_re "***"))) (re.union (re.+ (str.to_re "+++")) (re.union (str.to_re ",") (str.to_re "---")))))))))) (re.+ (re.+ (re.+ (re.* (re.* (re.* (re.* (re.* (re.* (str.to_re "...")))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
