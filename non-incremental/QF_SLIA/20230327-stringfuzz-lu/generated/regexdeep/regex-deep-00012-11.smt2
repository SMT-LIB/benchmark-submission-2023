(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (re.+ (re.union (re.+ (re.+ (re.* (re.union (re.union (re.+ (re.+ (re.union (str.to_re "00") (str.to_re "111")))) (re.union (re.union (re.union (str.to_re "22") (str.to_re "333")) (re.union (str.to_re "44") (str.to_re "5"))) (re.* (re.union (str.to_re "6") (str.to_re "777"))))) (re.+ (re.+ (re.* (re.union (str.to_re "88") (str.to_re "9"))))))))) (re.* (re.union (re.* (re.+ (re.* (re.+ (re.+ (re.+ (str.to_re "aaa"))))))) (re.+ (re.union (re.+ (re.union (re.* (re.union (str.to_re "bb") (str.to_re "c"))) (re.+ (re.+ (str.to_re "dd"))))) (re.union (re.* (re.union (re.+ (str.to_re "ee")) (re.+ (str.to_re "fff")))) (re.* (re.* (re.union (str.to_re "gg") (str.to_re "hh"))))))))))) (re.* (re.+ (re.* (re.* (re.+ (re.* (re.union (re.+ (re.union (re.+ (str.to_re "iii")) (re.+ (str.to_re "jj")))) (re.union (re.union (re.* (str.to_re "k")) (re.union (str.to_re "l") (str.to_re "mmm"))) (re.union (re.+ (str.to_re "nn")) (re.union (str.to_re "ooo") (str.to_re "pp"))))))))))))) (re.union (re.+ (re.union (re.union (re.union (re.+ (re.+ (re.union (re.+ (re.+ (re.union (re.* (str.to_re "qq")) (re.+ (str.to_re "rrr"))))) (re.+ (re.union (re.* (re.* (str.to_re "s"))) (re.union (re.* (str.to_re "tt")) (re.+ (str.to_re "u")))))))) (re.+ (re.* (re.+ (re.+ (re.+ (re.+ (re.* (str.to_re "vv"))))))))) (re.+ (re.union (re.* (re.union (re.* (re.* (re.* (re.* (str.to_re "www"))))) (re.* (re.* (re.* (re.union (str.to_re "xx") (str.to_re "y"))))))) (re.+ (re.* (re.+ (re.* (re.+ (re.+ (str.to_re "z")))))))))) (re.union (re.+ (re.union (re.union (re.+ (re.+ (re.union (re.+ (re.union (str.to_re "A") (str.to_re "B"))) (re.+ (re.union (str.to_re "C") (str.to_re "D")))))) (re.* (re.* (re.+ (re.+ (re.+ (str.to_re "E"))))))) (re.+ (re.+ (re.union (re.+ (re.* (re.union (str.to_re "F") (str.to_re "GGG")))) (re.union (re.* (re.* (str.to_re "HHH"))) (re.* (re.union (str.to_re "I") (str.to_re "J"))))))))) (re.* (re.union (re.union (re.union (re.+ (re.union (re.* (re.+ (str.to_re "KKK"))) (re.* (re.+ (str.to_re "LLL"))))) (re.+ (re.+ (re.+ (re.union (str.to_re "MM") (str.to_re "NN")))))) (re.union (re.* (re.union (re.+ (re.union (str.to_re "OOO") (str.to_re "PP"))) (re.union (re.union (str.to_re "QQ") (str.to_re "R")) (re.* (str.to_re "SS"))))) (re.* (re.union (re.+ (re.union (str.to_re "TT") (str.to_re "UUU"))) (re.union (re.* (str.to_re "VV")) (re.union (str.to_re "WW") (str.to_re "X"))))))) (re.+ (re.union (re.* (re.+ (re.* (re.union (str.to_re "Y") (str.to_re "Z"))))) (re.+ (re.union (re.union (re.union (str.to_re "!!") (str.to_re """""""")) (re.+ (str.to_re "###"))) (re.union (re.* (str.to_re "$")) (re.union (str.to_re "%") (str.to_re "&&&")))))))))))) (re.union (re.* (re.* (re.union (re.* (re.+ (re.+ (re.union (re.* (re.* (re.union (str.to_re "''") (str.to_re "(((")))) (re.union (re.+ (re.+ (str.to_re ")))"))) (re.* (re.* (str.to_re "**")))))))) (re.union (re.* (re.union (re.* (re.union (re.* (re.+ (str.to_re "++"))) (re.union (re.union (str.to_re ",,,") (str.to_re "--")) (re.* (str.to_re "..."))))) (re.+ (re.* (re.+ (re.union (str.to_re "///") (str.to_re "::"))))))) (re.+ (re.+ (re.union (re.union (re.+ (re.union (str.to_re ";;") (str.to_re "<<"))) (re.+ (re.+ (str.to_re "===")))) (re.union (re.* (re.union (str.to_re ">>") (str.to_re "???"))) (re.* (re.+ (str.to_re "@@@"))))))))))) (re.+ (re.union (re.union (re.* (re.* (re.union (re.+ (re.union (re.* (re.* (str.to_re "["))) (re.union (re.* (str.to_re "\\\\\\")) (re.+ (str.to_re "]]]"))))) (re.+ (re.* (re.union (re.union (str.to_re "^") (str.to_re "_")) (re.* (str.to_re "``")))))))) (re.+ (re.+ (re.* (re.* (re.* (re.+ (re.union (str.to_re "{{") (str.to_re "|"))))))))) (re.+ (re.union (re.+ (re.* (re.union (re.union (re.union (re.* (str.to_re "}}")) (re.+ (str.to_re "~~"))) (re.* (re.union (str.to_re "00") (str.to_re "11")))) (re.+ (re.+ (re.* (str.to_re "222"))))))) (re.* (re.+ (re.union (re.union (re.* (re.+ (str.to_re "33"))) (re.union (re.* (str.to_re "44")) (re.+ (str.to_re "5")))) (re.* (re.union (re.+ (str.to_re "666")) (re.* (str.to_re "777"))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
