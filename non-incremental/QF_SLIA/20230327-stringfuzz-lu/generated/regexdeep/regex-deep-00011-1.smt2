(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (re.* (re.+ (re.* (re.union (re.* (re.union (re.union (re.union (re.union (str.to_re "0") (str.to_re "1")) (re.union (str.to_re "22") (str.to_re "33"))) (re.union (re.* (str.to_re "44")) (re.* (str.to_re "55")))) (re.* (re.union (re.* (str.to_re "6")) (re.+ (str.to_re "777")))))) (re.* (re.* (re.* (re.* (re.* (str.to_re "8")))))))))) (re.union (re.+ (re.+ (re.union (re.* (re.union (re.+ (re.union (re.+ (str.to_re "9")) (re.+ (str.to_re "a")))) (re.union (re.union (re.union (str.to_re "bbb") (str.to_re "cc")) (re.* (str.to_re "d"))) (re.+ (re.+ (str.to_re "e")))))) (re.+ (re.* (re.+ (re.+ (re.union (str.to_re "fff") (str.to_re "g"))))))))) (re.union (re.* (re.* (re.union (re.union (re.+ (re.union (re.* (str.to_re "h")) (re.union (str.to_re "i") (str.to_re "jjj")))) (re.* (re.union (re.+ (str.to_re "kk")) (re.union (str.to_re "l") (str.to_re "mmm"))))) (re.+ (re.union (re.+ (re.union (str.to_re "n") (str.to_re "ooo"))) (re.union (re.* (str.to_re "p")) (re.* (str.to_re "qqq")))))))) (re.union (re.* (re.* (re.+ (re.union (re.+ (re.union (str.to_re "rrr") (str.to_re "ss"))) (re.* (re.* (str.to_re "tt"))))))) (re.+ (re.+ (re.+ (re.+ (re.* (re.+ (str.to_re "u")))))))))))) (re.union (re.+ (re.+ (re.union (re.union (re.* (re.* (re.union (re.+ (re.* (re.+ (str.to_re "vv")))) (re.+ (re.+ (re.union (str.to_re "ww") (str.to_re "x"))))))) (re.+ (re.union (re.+ (re.union (re.union (re.+ (str.to_re "yyy")) (re.* (str.to_re "zzz"))) (re.+ (re.* (str.to_re "AAA"))))) (re.* (re.union (re.+ (re.* (str.to_re "B"))) (re.union (re.* (str.to_re "C")) (re.+ (str.to_re "DDD")))))))) (re.union (re.* (re.+ (re.* (re.union (re.+ (re.* (str.to_re "EEE"))) (re.* (re.* (str.to_re "F"))))))) (re.+ (re.union (re.* (re.union (re.union (re.+ (str.to_re "GG")) (re.+ (str.to_re "H"))) (re.* (re.+ (str.to_re "I"))))) (re.union (re.+ (re.union (re.+ (str.to_re "J")) (re.+ (str.to_re "KK")))) (re.* (re.* (re.+ (str.to_re "L"))))))))))) (re.union (re.* (re.+ (re.union (re.+ (re.union (re.* (re.+ (re.union (re.+ (str.to_re "M")) (re.union (str.to_re "NNN") (str.to_re "OOO"))))) (re.+ (re.+ (re.+ (re.union (str.to_re "PPP") (str.to_re "QQQ"))))))) (re.* (re.union (re.union (re.* (re.* (re.* (str.to_re "RRR")))) (re.+ (re.union (re.+ (str.to_re "SS")) (re.union (str.to_re "TTT") (str.to_re "UU"))))) (re.+ (re.+ (re.* (re.* (str.to_re "VVV")))))))))) (re.* (re.* (re.union (re.union (re.* (re.* (re.union (re.* (re.* (str.to_re "W"))) (re.+ (re.+ (str.to_re "X")))))) (re.union (re.* (re.+ (re.+ (re.* (str.to_re "Y"))))) (re.+ (re.* (re.+ (re.+ (str.to_re "ZZZ"))))))) (re.+ (re.+ (re.+ (re.union (re.+ (re.+ (str.to_re "!!!"))) (re.+ (re.* (str.to_re """""")))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
