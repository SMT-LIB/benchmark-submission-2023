(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (re.union (re.+ (re.* (re.* (re.* (re.+ (re.union (re.union (re.+ (re.* (re.union (str.to_re "000") (str.to_re "111")))) (re.union (re.+ (re.* (str.to_re "2"))) (re.+ (re.* (str.to_re "33"))))) (re.* (re.* (re.union (re.+ (str.to_re "4")) (re.+ (str.to_re "555"))))))))))) (re.union (re.+ (re.* (re.* (re.* (re.+ (re.+ (re.+ (re.+ (re.union (str.to_re "66") (str.to_re "777")))))))))) (re.union (re.+ (re.+ (re.* (re.union (re.union (re.* (re.* (re.+ (str.to_re "8")))) (re.+ (re.union (re.* (str.to_re "999")) (re.* (str.to_re "aa"))))) (re.+ (re.* (re.union (re.union (str.to_re "bbb") (str.to_re "c")) (re.union (str.to_re "dd") (str.to_re "e"))))))))) (re.+ (re.* (re.+ (re.+ (re.+ (re.union (re.* (re.union (str.to_re "ff") (str.to_re "g"))) (re.union (re.* (str.to_re "h")) (re.+ (str.to_re "i")))))))))))) (re.union (re.* (re.+ (re.* (re.union (re.union (re.+ (re.union (re.* (re.* (re.* (str.to_re "jjj")))) (re.+ (re.* (re.+ (str.to_re "k")))))) (re.union (re.union (re.* (re.union (re.* (str.to_re "ll")) (re.* (str.to_re "mmm")))) (re.* (re.+ (re.+ (str.to_re "nn"))))) (re.* (re.+ (re.* (re.+ (str.to_re "ooo"))))))) (re.+ (re.union (re.union (re.+ (re.+ (re.union (str.to_re "p") (str.to_re "q")))) (re.+ (re.+ (re.* (str.to_re "rrr"))))) (re.+ (re.+ (re.+ (re.union (str.to_re "s") (str.to_re "ttt"))))))))))) (re.union (re.union (re.* (re.+ (re.* (re.* (re.union (re.+ (re.union (re.* (str.to_re "uu")) (re.union (str.to_re "vv") (str.to_re "www")))) (re.* (re.* (re.+ (str.to_re "xx"))))))))) (re.+ (re.* (re.+ (re.+ (re.+ (re.* (re.+ (re.union (str.to_re "y") (str.to_re "zz")))))))))) (re.union (re.union (re.* (re.union (re.union (re.+ (re.* (re.union (re.+ (str.to_re "A")) (re.* (str.to_re "BBB"))))) (re.union (re.union (re.* (re.+ (str.to_re "CCC"))) (re.union (re.union (str.to_re "D") (str.to_re "EEE")) (re.+ (str.to_re "F")))) (re.union (re.union (re.union (str.to_re "G") (str.to_re "HH")) (re.+ (str.to_re "II"))) (re.+ (re.* (str.to_re "JJ")))))) (re.+ (re.union (re.* (re.* (re.+ (str.to_re "K")))) (re.union (re.union (re.union (str.to_re "LL") (str.to_re "MMM")) (re.+ (str.to_re "N"))) (re.+ (re.+ (str.to_re "O")))))))) (re.+ (re.+ (re.* (re.+ (re.union (re.+ (re.union (str.to_re "P") (str.to_re "Q"))) (re.+ (re.+ (str.to_re "R"))))))))) (re.+ (re.* (re.union (re.union (re.+ (re.+ (re.union (re.* (str.to_re "SS")) (re.+ (str.to_re "T"))))) (re.+ (re.union (re.+ (re.+ (str.to_re "U"))) (re.union (re.* (str.to_re "VV")) (re.union (str.to_re "WWW") (str.to_re "XXX")))))) (re.+ (re.* (re.+ (re.union (re.+ (str.to_re "YYY")) (re.+ (str.to_re "Z")))))))))))))) (re.* (re.* (re.+ (re.* (re.+ (re.union (re.* (re.+ (re.union (re.union (re.+ (re.+ (re.* (str.to_re "!")))) (re.+ (re.union (re.union (str.to_re """") (str.to_re "#")) (re.union (str.to_re "$$$") (str.to_re "%%"))))) (re.+ (re.union (re.+ (re.+ (str.to_re "&&"))) (re.+ (re.* (str.to_re "''")))))))) (re.union (re.union (re.+ (re.* (re.+ (re.union (re.union (str.to_re "(") (str.to_re ")))")) (re.+ (str.to_re "***")))))) (re.* (re.* (re.+ (re.union (re.union (str.to_re "+++") (str.to_re ",,,")) (re.+ (str.to_re "--"))))))) (re.union (re.* (re.+ (re.union (re.union (re.* (str.to_re "..")) (re.+ (str.to_re "///"))) (re.union (re.union (str.to_re ":::") (str.to_re ";")) (re.union (str.to_re "<") (str.to_re "===")))))) (re.union (re.* (re.+ (re.union (re.* (str.to_re ">>")) (re.union (str.to_re "??") (str.to_re "@@"))))) (re.union (re.union (re.* (re.* (str.to_re "[[["))) (re.* (re.union (str.to_re "\\\\") (str.to_re "]]]")))) (re.+ (re.+ (re.* (str.to_re "^^")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
