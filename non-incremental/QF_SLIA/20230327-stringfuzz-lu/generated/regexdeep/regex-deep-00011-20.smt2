(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (re.union (re.+ (re.+ (re.union (re.+ (re.+ (re.* (re.union (re.+ (str.to_re "0")) (re.union (str.to_re "1") (str.to_re "2")))))) (re.+ (re.union (re.+ (re.* (re.* (str.to_re "33")))) (re.* (re.union (re.union (str.to_re "444") (str.to_re "55")) (re.union (str.to_re "6") (str.to_re "777"))))))))) (re.* (re.+ (re.union (re.* (re.union (re.+ (re.union (re.* (str.to_re "8")) (re.* (str.to_re "999")))) (re.+ (re.+ (re.* (str.to_re "aaa")))))) (re.union (re.union (re.+ (re.* (re.union (str.to_re "bb") (str.to_re "ccc")))) (re.* (re.+ (re.* (str.to_re "dd"))))) (re.+ (re.union (re.+ (re.* (str.to_re "ee"))) (re.* (re.* (str.to_re "ff")))))))))))) (re.union (re.+ (re.union (re.* (re.+ (re.union (re.+ (re.* (re.union (re.union (re.union (str.to_re "gg") (str.to_re "hhh")) (re.+ (str.to_re "i"))) (re.* (re.union (str.to_re "jjj") (str.to_re "k")))))) (re.union (re.union (re.union (re.+ (re.union (str.to_re "lll") (str.to_re "mm"))) (re.* (re.* (str.to_re "nn")))) (re.union (re.* (re.+ (str.to_re "oo"))) (re.* (re.* (str.to_re "p"))))) (re.union (re.* (re.* (re.union (str.to_re "q") (str.to_re "rrr")))) (re.+ (re.* (re.+ (str.to_re "s"))))))))) (re.union (re.+ (re.* (re.union (re.union (re.* (re.union (re.* (str.to_re "tt")) (re.+ (str.to_re "u")))) (re.union (re.union (re.+ (str.to_re "vv")) (re.+ (str.to_re "www"))) (re.* (re.+ (str.to_re "xx"))))) (re.+ (re.+ (re.+ (re.+ (str.to_re "yyy")))))))) (re.union (re.* (re.union (re.* (re.+ (re.+ (re.union (str.to_re "z") (str.to_re "A"))))) (re.+ (re.+ (re.+ (re.union (str.to_re "B") (str.to_re "C"))))))) (re.union (re.union (re.* (re.* (re.* (re.union (str.to_re "DD") (str.to_re "EE"))))) (re.union (re.union (re.+ (re.+ (str.to_re "FF"))) (re.+ (re.union (str.to_re "G") (str.to_re "HHH")))) (re.* (re.* (re.+ (str.to_re "III")))))) (re.+ (re.+ (re.* (re.union (re.union (str.to_re "JJJ") (str.to_re "KKK")) (re.+ (str.to_re "L"))))))))))) (re.union (re.+ (re.+ (re.union (re.+ (re.* (re.+ (re.* (re.+ (re.+ (str.to_re "MMM"))))))) (re.+ (re.* (re.union (re.* (re.union (re.union (str.to_re "NNN") (str.to_re "OOO")) (re.+ (str.to_re "P")))) (re.+ (re.+ (re.+ (str.to_re "QQ")))))))))) (re.union (re.* (re.* (re.* (re.* (re.union (re.* (re.* (re.union (str.to_re "RRR") (str.to_re "S")))) (re.+ (re.union (re.union (str.to_re "TTT") (str.to_re "UU")) (re.* (str.to_re "VV"))))))))) (re.union (re.* (re.* (re.+ (re.union (re.* (re.+ (re.* (str.to_re "WW")))) (re.+ (re.* (re.union (str.to_re "XXX") (str.to_re "Y")))))))) (re.union (re.union (re.union (re.union (re.union (re.union (re.+ (str.to_re "ZZ")) (re.union (str.to_re "!") (str.to_re """"""))) (re.union (re.+ (str.to_re "##")) (re.* (str.to_re "$$$")))) (re.union (re.+ (re.* (str.to_re "%%"))) (re.* (re.* (str.to_re "&&&"))))) (re.+ (re.+ (re.+ (re.* (str.to_re "''")))))) (re.+ (re.+ (re.union (re.union (re.* (str.to_re "(((")) (re.union (str.to_re ")))") (str.to_re "***"))) (re.* (re.+ (str.to_re "++"))))))) (re.union (re.* (re.* (re.union (re.+ (re.* (str.to_re ",,,"))) (re.* (re.+ (str.to_re "---")))))) (re.union (re.+ (re.union (re.union (re.+ (str.to_re "...")) (re.union (str.to_re "/") (str.to_re ":::"))) (re.union (re.* (str.to_re ";;")) (re.union (str.to_re "<") (str.to_re "="))))) (re.* (re.* (re.union (re.union (str.to_re ">>") (str.to_re "??")) (re.+ (str.to_re "@")))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
