(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (re.* (re.+ (re.* (re.* (re.union (re.* (re.* (re.union (re.union (str.to_re "0") (str.to_re "1")) (re.+ (str.to_re "2"))))) (re.union (re.* (re.union (re.+ (str.to_re "33")) (re.* (str.to_re "444")))) (re.+ (re.* (re.+ (str.to_re "55"))))))))))) (re.union (re.* (re.* (re.+ (re.union (re.union (re.* (re.* (re.union (re.union (str.to_re "66") (str.to_re "7")) (re.* (str.to_re "888"))))) (re.union (re.+ (re.+ (re.+ (str.to_re "999")))) (re.* (re.* (re.+ (str.to_re "a")))))) (re.* (re.* (re.+ (re.* (re.* (str.to_re "bbb")))))))))) (re.+ (re.union (re.+ (re.* (re.* (re.* (re.union (re.union (re.union (str.to_re "c") (str.to_re "dd")) (re.* (str.to_re "ee"))) (re.union (re.* (str.to_re "ff")) (re.union (str.to_re "gg") (str.to_re "hhh")))))))) (re.union (re.+ (re.union (re.union (re.union (re.+ (re.* (str.to_re "i"))) (re.+ (re.* (str.to_re "jjj")))) (re.union (re.union (re.+ (str.to_re "kkk")) (re.* (str.to_re "ll"))) (re.+ (re.union (str.to_re "mmm") (str.to_re "nnn"))))) (re.* (re.+ (re.union (re.* (str.to_re "o")) (re.+ (str.to_re "ppp"))))))) (re.* (re.union (re.union (re.* (re.* (re.union (str.to_re "qq") (str.to_re "rr")))) (re.+ (re.+ (re.union (str.to_re "s") (str.to_re "ttt"))))) (re.+ (re.union (re.union (re.union (str.to_re "uu") (str.to_re "vvv")) (re.+ (str.to_re "www"))) (re.+ (re.* (str.to_re "x")))))))))))) (re.* (re.* (re.+ (re.union (re.union (re.union (re.union (re.union (re.union (re.+ (re.* (str.to_re "yyy"))) (re.+ (re.* (str.to_re "zz")))) (re.union (re.* (re.union (str.to_re "AAA") (str.to_re "BB"))) (re.union (re.* (str.to_re "CCC")) (re.union (str.to_re "DD") (str.to_re "EE"))))) (re.union (re.* (re.union (re.union (str.to_re "FF") (str.to_re "GG")) (re.* (str.to_re "HH")))) (re.+ (re.* (re.+ (str.to_re "II")))))) (re.union (re.* (re.+ (re.+ (re.+ (str.to_re "J"))))) (re.+ (re.* (re.union (re.* (str.to_re "KK")) (re.union (str.to_re "L") (str.to_re "MM"))))))) (re.union (re.union (re.* (re.+ (re.union (re.+ (str.to_re "N")) (re.+ (str.to_re "OO"))))) (re.+ (re.+ (re.* (re.+ (str.to_re "PP")))))) (re.* (re.union (re.union (re.union (re.* (str.to_re "QQ")) (re.* (str.to_re "RR"))) (re.* (re.+ (str.to_re "SSS")))) (re.* (re.+ (re.+ (str.to_re "TT")))))))) (re.union (re.* (re.* (re.+ (re.* (re.union (re.+ (str.to_re "UU")) (re.* (str.to_re "VV"))))))) (re.union (re.+ (re.union (re.union (re.union (re.+ (str.to_re "W")) (re.union (str.to_re "XX") (str.to_re "YY"))) (re.union (re.+ (str.to_re "ZZ")) (re.union (str.to_re "!") (str.to_re """""""")))) (re.+ (re.+ (re.+ (str.to_re "#")))))) (re.+ (re.* (re.union (re.+ (re.+ (str.to_re "$$$"))) (re.+ (re.+ (str.to_re "%%")))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
