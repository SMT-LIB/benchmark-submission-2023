(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (re.+ (re.* (re.+ (re.* (re.union (re.union (re.+ (str.to_re "00")) (re.* (str.to_re "11"))) (re.union (re.+ (str.to_re "222")) (re.union (str.to_re "33") (str.to_re "444")))))))) (re.union (re.* (re.union (re.union (re.* (re.union (re.* (str.to_re "55")) (re.+ (str.to_re "666")))) (re.union (re.union (re.union (str.to_re "77") (str.to_re "888")) (re.union (str.to_re "99") (str.to_re "a"))) (re.* (re.+ (str.to_re "bb"))))) (re.+ (re.* (re.union (re.union (str.to_re "cc") (str.to_re "d")) (re.+ (str.to_re "e"))))))) (re.union (re.* (re.* (re.+ (re.* (re.+ (str.to_re "ff")))))) (re.+ (re.union (re.+ (re.union (re.* (str.to_re "g")) (re.+ (str.to_re "h")))) (re.* (re.union (re.* (str.to_re "iii")) (re.+ (str.to_re "jj")))))))))) (re.* (re.union (re.* (re.union (re.union (re.union (re.* (re.* (re.* (str.to_re "kk")))) (re.* (re.union (re.+ (str.to_re "ll")) (re.+ (str.to_re "mmm"))))) (re.+ (re.union (re.union (re.union (str.to_re "nn") (str.to_re "o")) (re.union (str.to_re "p") (str.to_re "qqq"))) (re.+ (re.union (str.to_re "rrr") (str.to_re "ss")))))) (re.union (re.+ (re.union (re.* (re.* (str.to_re "t"))) (re.union (re.+ (str.to_re "u")) (re.union (str.to_re "v") (str.to_re "ww"))))) (re.union (re.* (re.+ (re.+ (str.to_re "xxx")))) (re.union (re.union (re.+ (str.to_re "y")) (re.union (str.to_re "zzz") (str.to_re "AA"))) (re.union (re.* (str.to_re "B")) (re.union (str.to_re "CCC") (str.to_re "D")))))))) (re.+ (re.+ (re.+ (re.+ (re.+ (re.+ (re.union (str.to_re "EE") (str.to_re "FF")))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
