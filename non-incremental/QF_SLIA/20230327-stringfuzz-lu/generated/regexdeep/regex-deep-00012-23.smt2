(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (re.union (re.union (re.* (re.+ (re.union (re.+ (re.* (re.union (re.union (re.+ (str.to_re "00")) (re.union (str.to_re "111") (str.to_re "2"))) (re.+ (re.* (str.to_re "33")))))) (re.union (re.union (re.union (re.+ (re.union (str.to_re "4") (str.to_re "5"))) (re.+ (re.* (str.to_re "666")))) (re.* (re.+ (re.+ (str.to_re "7"))))) (re.union (re.* (re.+ (re.union (str.to_re "8") (str.to_re "999")))) (re.* (re.union (re.+ (str.to_re "a")) (re.union (str.to_re "bb") (str.to_re "ccc"))))))))) (re.* (re.+ (re.union (re.union (re.* (re.+ (re.* (re.union (str.to_re "d") (str.to_re "eee"))))) (re.* (re.* (re.+ (re.+ (str.to_re "f")))))) (re.+ (re.union (re.+ (re.union (re.union (str.to_re "gg") (str.to_re "h")) (re.union (str.to_re "ii") (str.to_re "j")))) (re.+ (re.* (re.union (str.to_re "kkk") (str.to_re "ll")))))))))) (re.* (re.+ (re.* (re.* (re.* (re.+ (re.+ (re.* (re.* (str.to_re "mm")))))))))))) (re.* (re.* (re.union (re.union (re.* (re.* (re.* (re.* (re.union (re.union (re.union (str.to_re "n") (str.to_re "ooo")) (re.* (str.to_re "p"))) (re.union (re.union (str.to_re "qqq") (str.to_re "rr")) (re.+ (str.to_re "s")))))))) (re.union (re.union (re.union (re.+ (re.* (re.+ (re.* (str.to_re "t"))))) (re.union (re.+ (re.+ (re.union (str.to_re "uu") (str.to_re "vvv")))) (re.union (re.+ (re.* (str.to_re "www"))) (re.* (re.* (str.to_re "x")))))) (re.+ (re.* (re.union (re.union (re.* (str.to_re "yyy")) (re.union (str.to_re "zz") (str.to_re "AAA"))) (re.union (re.* (str.to_re "B")) (re.union (str.to_re "CC") (str.to_re "D"))))))) (re.union (re.* (re.+ (re.+ (re.* (re.union (str.to_re "E") (str.to_re "FFF")))))) (re.union (re.union (re.* (re.* (re.* (str.to_re "GGG")))) (re.+ (re.union (re.* (str.to_re "HH")) (re.+ (str.to_re "I"))))) (re.+ (re.union (re.union (re.+ (str.to_re "JJ")) (re.union (str.to_re "K") (str.to_re "L"))) (re.union (re.union (str.to_re "MM") (str.to_re "NNN")) (re.union (str.to_re "OO") (str.to_re "PPP"))))))))) (re.+ (re.+ (re.+ (re.+ (re.+ (re.* (re.union (re.union (str.to_re "QQQ") (str.to_re "RR")) (re.+ (str.to_re "S"))))))))))))) (re.union (re.union (re.+ (re.* (re.* (re.union (re.union (re.union (re.+ (re.+ (re.* (re.* (str.to_re "TT"))))) (re.+ (re.union (re.union (re.+ (str.to_re "UU")) (re.union (str.to_re "VV") (str.to_re "W"))) (re.* (re.* (str.to_re "X")))))) (re.union (re.union (re.+ (re.* (re.+ (str.to_re "Y")))) (re.+ (re.+ (re.+ (str.to_re "Z"))))) (re.+ (re.* (re.union (re.* (str.to_re "!!!")) (re.union (str.to_re """""""") (str.to_re "###"))))))) (re.* (re.* (re.+ (re.* (re.union (re.union (str.to_re "$") (str.to_re "%")) (re.* (str.to_re "&"))))))))))) (re.+ (re.union (re.* (re.+ (re.+ (re.union (re.* (re.+ (re.union (re.union (str.to_re "''") (str.to_re "(")) (re.union (str.to_re "))") (str.to_re "**"))))) (re.union (re.union (re.union (re.union (str.to_re "+") (str.to_re ",,,")) (re.union (str.to_re "--") (str.to_re "..."))) (re.+ (re.union (str.to_re "//") (str.to_re ":::")))) (re.+ (re.+ (re.+ (str.to_re ";;"))))))))) (re.* (re.union (re.* (re.+ (re.* (re.* (re.+ (re.+ (str.to_re "<<"))))))) (re.* (re.union (re.union (re.union (re.+ (re.+ (str.to_re "=="))) (re.* (re.union (str.to_re ">>>") (str.to_re "??")))) (re.union (re.* (re.* (str.to_re "@"))) (re.* (re.+ (str.to_re "[["))))) (re.* (re.union (re.+ (re.union (str.to_re "\\\\") (str.to_re "]]"))) (re.union (re.+ (str.to_re "^")) (re.* (str.to_re "__")))))))))))) (re.* (re.* (re.union (re.union (re.* (re.+ (re.* (re.+ (re.* (re.union (re.* (str.to_re "`")) (re.union (str.to_re "{{") (str.to_re "|||")))))))) (re.+ (re.* (re.+ (re.+ (re.union (re.union (re.* (str.to_re "}}}")) (re.* (str.to_re "~~~"))) (re.* (re.union (str.to_re "00") (str.to_re "1"))))))))) (re.+ (re.* (re.union (re.* (re.+ (re.union (re.union (re.+ (str.to_re "222")) (re.+ (str.to_re "333"))) (re.union (re.union (str.to_re "444") (str.to_re "55")) (re.union (str.to_re "666") (str.to_re "77")))))) (re.union (re.* (re.+ (re.* (re.* (str.to_re "88"))))) (re.+ (re.* (re.* (re.* (str.to_re "9"))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
