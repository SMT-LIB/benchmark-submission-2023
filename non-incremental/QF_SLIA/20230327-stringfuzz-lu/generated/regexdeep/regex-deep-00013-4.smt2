(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (re.union (re.+ (re.union (re.* (re.* (re.union (re.* (re.* (re.+ (re.* (re.* (str.to_re "0")))))) (re.* (re.union (re.* (re.* (re.+ (str.to_re "11")))) (re.+ (re.+ (re.+ (str.to_re "2"))))))))) (re.union (re.union (re.union (re.+ (re.union (re.+ (re.+ (re.union (str.to_re "33") (str.to_re "4")))) (re.* (re.* (re.* (str.to_re "555")))))) (re.union (re.+ (re.* (re.* (re.union (str.to_re "666") (str.to_re "7"))))) (re.+ (re.+ (re.+ (re.+ (str.to_re "88"))))))) (re.* (re.+ (re.union (re.* (re.union (re.* (str.to_re "999")) (re.union (str.to_re "aa") (str.to_re "b")))) (re.+ (re.union (re.* (str.to_re "cc")) (re.union (str.to_re "d") (str.to_re "ee")))))))) (re.union (re.* (re.union (re.union (re.union (re.union (re.* (str.to_re "f")) (re.* (str.to_re "gg"))) (re.union (re.union (str.to_re "hhh") (str.to_re "ii")) (re.union (str.to_re "j") (str.to_re "kk")))) (re.+ (re.+ (re.union (str.to_re "ll") (str.to_re "mm"))))) (re.union (re.+ (re.+ (re.* (str.to_re "nnn")))) (re.union (re.+ (re.+ (str.to_re "o"))) (re.union (re.+ (str.to_re "ppp")) (re.union (str.to_re "qqq") (str.to_re "rrr"))))))) (re.union (re.+ (re.+ (re.* (re.+ (re.* (str.to_re "s")))))) (re.+ (re.* (re.* (re.union (re.* (str.to_re "tt")) (re.+ (str.to_re "u"))))))))))) (re.union (re.+ (re.union (re.union (re.+ (re.union (re.* (re.+ (re.+ (re.* (str.to_re "vvv"))))) (re.* (re.* (re.union (re.* (str.to_re "ww")) (re.* (str.to_re "x"))))))) (re.union (re.union (re.* (re.* (re.* (re.* (str.to_re "y"))))) (re.union (re.+ (re.union (re.+ (str.to_re "z")) (re.union (str.to_re "A") (str.to_re "BBB")))) (re.+ (re.union (re.union (str.to_re "CC") (str.to_re "D")) (re.* (str.to_re "EE")))))) (re.+ (re.* (re.* (re.union (re.* (str.to_re "FF")) (re.* (str.to_re "GG")))))))) (re.union (re.* (re.* (re.union (re.union (re.* (re.+ (str.to_re "HH"))) (re.* (re.union (str.to_re "II") (str.to_re "JJ")))) (re.* (re.* (re.union (str.to_re "KK") (str.to_re "LLL"))))))) (re.* (re.union (re.* (re.union (re.* (re.union (str.to_re "M") (str.to_re "NNN"))) (re.union (re.+ (str.to_re "OOO")) (re.* (str.to_re "PP"))))) (re.union (re.* (re.* (re.* (str.to_re "Q")))) (re.union (re.union (re.* (str.to_re "RRR")) (re.union (str.to_re "S") (str.to_re "T"))) (re.union (re.+ (str.to_re "U")) (re.+ (str.to_re "VV")))))))))) (re.union (re.* (re.* (re.* (re.+ (re.+ (re.union (re.+ (re.+ (str.to_re "W"))) (re.* (re.union (str.to_re "XX") (str.to_re "YY"))))))))) (re.union (re.union (re.* (re.union (re.* (re.* (re.union (re.union (str.to_re "ZZ") (str.to_re "!!!")) (re.+ (str.to_re """"""))))) (re.* (re.union (re.+ (re.* (str.to_re "##"))) (re.+ (re.union (str.to_re "$$$") (str.to_re "%"))))))) (re.* (re.+ (re.union (re.union (re.* (re.* (str.to_re "&"))) (re.union (re.+ (str.to_re "''")) (re.+ (str.to_re "(")))) (re.union (re.+ (re.+ (str.to_re ")))"))) (re.union (re.union (str.to_re "***") (str.to_re "+++")) (re.+ (str.to_re ",,")))))))) (re.union (re.+ (re.+ (re.* (re.* (re.union (re.+ (str.to_re "-")) (re.* (str.to_re ".."))))))) (re.union (re.* (re.* (re.union (re.+ (re.+ (str.to_re "//"))) (re.* (re.union (str.to_re ":") (str.to_re ";;;")))))) (re.union (re.+ (re.+ (re.* (re.union (str.to_re "<<") (str.to_re "=="))))) (re.union (re.* (re.* (re.* (str.to_re ">>")))) (re.+ (re.union (re.+ (str.to_re "??")) (re.union (str.to_re "@@@") (str.to_re "[[")))))))))))))) (re.* (re.* (re.+ (re.* (re.union (re.* (re.+ (re.+ (re.union (re.+ (re.union (re.union (re.+ (str.to_re "\\")) (re.+ (str.to_re "]"))) (re.* (re.+ (str.to_re "^^"))))) (re.* (re.+ (re.union (re.+ (str.to_re "_")) (re.+ (str.to_re "`"))))))))) (re.* (re.union (re.union (re.+ (re.+ (re.+ (re.* (re.+ (str.to_re "{{{")))))) (re.+ (re.+ (re.union (re.+ (re.union (str.to_re "|") (str.to_re "}}"))) (re.* (re.union (str.to_re "~") (str.to_re "00"))))))) (re.union (re.* (re.* (re.* (re.union (re.* (str.to_re "11")) (re.+ (str.to_re "222")))))) (re.* (re.* (re.* (re.union (re.union (str.to_re "333") (str.to_re "4")) (re.+ (str.to_re "555")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
