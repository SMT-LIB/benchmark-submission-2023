(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (re.* (re.+ (re.+ (re.+ (re.union (re.+ (re.* (re.+ (str.to_re "0")))) (re.+ (re.* (re.union (str.to_re "11") (str.to_re "2"))))))))) (re.* (re.union (re.+ (re.union (re.union (re.* (re.* (re.* (str.to_re "3")))) (re.+ (re.union (re.* (str.to_re "44")) (re.union (str.to_re "5") (str.to_re "66"))))) (re.* (re.union (re.+ (re.+ (str.to_re "77"))) (re.union (re.+ (str.to_re "8")) (re.union (str.to_re "9") (str.to_re "a"))))))) (re.* (re.* (re.* (re.union (re.union (re.* (str.to_re "bb")) (re.+ (str.to_re "cc"))) (re.* (re.+ (str.to_re "dd"))))))))))) (re.+ (re.union (re.* (re.union (re.* (re.union (re.union (re.+ (re.union (re.union (str.to_re "ee") (str.to_re "fff")) (re.* (str.to_re "ggg")))) (re.+ (re.+ (re.union (str.to_re "hh") (str.to_re "iii"))))) (re.union (re.* (re.+ (re.* (str.to_re "jj")))) (re.* (re.union (re.* (str.to_re "kkk")) (re.+ (str.to_re "lll"))))))) (re.+ (re.union (re.* (re.+ (re.+ (re.* (str.to_re "mmm"))))) (re.+ (re.union (re.+ (re.+ (str.to_re "nnn"))) (re.union (re.union (str.to_re "oo") (str.to_re "pp")) (re.* (str.to_re "qqq"))))))))) (re.+ (re.union (re.union (re.* (re.+ (re.* (re.* (re.+ (str.to_re "rr")))))) (re.union (re.+ (re.union (re.+ (re.union (str.to_re "s") (str.to_re "ttt"))) (re.* (re.union (str.to_re "uuu") (str.to_re "vv"))))) (re.* (re.union (re.+ (re.+ (str.to_re "ww"))) (re.* (re.+ (str.to_re "x"))))))) (re.* (re.union (re.union (re.+ (re.* (re.+ (str.to_re "y")))) (re.* (re.union (re.* (str.to_re "zzz")) (re.+ (str.to_re "A"))))) (re.+ (re.+ (re.+ (re.+ (str.to_re "B"))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
