(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (re.* (re.* (re.+ (re.union (re.union (re.+ (re.union (re.union (re.union (re.+ (re.+ (re.+ (str.to_re "0")))) (re.* (re.+ (re.* (str.to_re "11"))))) (re.union (re.+ (re.+ (re.+ (str.to_re "2")))) (re.+ (re.union (re.+ (str.to_re "333")) (re.union (str.to_re "444") (str.to_re "55")))))) (re.union (re.union (re.+ (re.+ (re.union (str.to_re "66") (str.to_re "7")))) (re.+ (re.union (re.union (str.to_re "888") (str.to_re "999")) (re.+ (str.to_re "a"))))) (re.* (re.union (re.* (re.union (str.to_re "bbb") (str.to_re "ccc"))) (re.+ (re.+ (str.to_re "ddd")))))))) (re.* (re.* (re.union (re.+ (re.union (re.union (re.union (str.to_re "e") (str.to_re "f")) (re.+ (str.to_re "g"))) (re.union (re.* (str.to_re "hh")) (re.* (str.to_re "iii"))))) (re.union (re.* (re.+ (re.union (str.to_re "jjj") (str.to_re "kkk")))) (re.+ (re.* (re.+ (str.to_re "ll"))))))))) (re.* (re.+ (re.+ (re.+ (re.+ (re.* (re.+ (re.* (str.to_re "mm"))))))))))))))) (re.* (re.* (re.union (re.* (re.* (re.union (re.union (re.+ (re.* (re.* (re.union (re.+ (re.* (re.union (str.to_re "nn") (str.to_re "oo")))) (re.+ (re.+ (re.union (str.to_re "pp") (str.to_re "q")))))))) (re.* (re.union (re.* (re.+ (re.* (re.+ (re.+ (str.to_re "rr")))))) (re.union (re.* (re.* (re.* (re.* (str.to_re "s"))))) (re.* (re.union (re.+ (re.+ (str.to_re "tt"))) (re.* (re.+ (str.to_re "u"))))))))) (re.+ (re.* (re.+ (re.* (re.union (re.* (re.union (re.* (str.to_re "v")) (re.* (str.to_re "www")))) (re.union (re.+ (re.* (str.to_re "x"))) (re.+ (re.union (str.to_re "y") (str.to_re "z")))))))))))) (re.* (re.+ (re.+ (re.* (re.union (re.union (re.* (re.* (re.+ (re.union (re.+ (str.to_re "AA")) (re.+ (str.to_re "BBB")))))) (re.union (re.+ (re.union (re.* (re.union (str.to_re "CC") (str.to_re "D"))) (re.union (re.+ (str.to_re "EE")) (re.+ (str.to_re "FF"))))) (re.union (re.+ (re.* (re.+ (str.to_re "GGG")))) (re.union (re.+ (re.union (str.to_re "HH") (str.to_re "III"))) (re.* (re.union (str.to_re "J") (str.to_re "KKK"))))))) (re.* (re.union (re.+ (re.union (re.union (re.+ (str.to_re "LL")) (re.* (str.to_re "MMM"))) (re.union (re.union (str.to_re "NNN") (str.to_re "OOO")) (re.union (str.to_re "PP") (str.to_re "Q"))))) (re.+ (re.union (re.union (re.+ (str.to_re "RRR")) (re.union (str.to_re "SS") (str.to_re "TT"))) (re.* (re.* (str.to_re "U"))))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
