(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (re.union (re.+ (re.union (re.+ (re.union (re.+ (re.* (re.+ (str.to_re "00")))) (re.union (re.+ (re.+ (str.to_re "11"))) (re.* (re.* (str.to_re "222")))))) (re.union (re.+ (re.+ (re.+ (re.+ (str.to_re "3"))))) (re.* (re.+ (re.+ (re.+ (str.to_re "444")))))))) (re.+ (re.union (re.union (re.union (re.union (re.* (re.union (str.to_re "55") (str.to_re "666"))) (re.+ (re.+ (str.to_re "7")))) (re.* (re.+ (re.union (str.to_re "88") (str.to_re "99"))))) (re.+ (re.* (re.union (re.+ (str.to_re "aaa")) (re.union (str.to_re "bbb") (str.to_re "c")))))) (re.union (re.union (re.union (re.* (re.union (str.to_re "d") (str.to_re "ee"))) (re.+ (re.+ (str.to_re "f")))) (re.* (re.union (re.union (str.to_re "g") (str.to_re "hhh")) (re.union (str.to_re "iii") (str.to_re "jjj"))))) (re.+ (re.union (re.+ (re.* (str.to_re "kk"))) (re.* (re.+ (str.to_re "l"))))))))) (re.union (re.union (re.* (re.* (re.union (re.+ (re.* (re.union (str.to_re "mm") (str.to_re "nn")))) (re.union (re.* (re.* (str.to_re "oo"))) (re.+ (re.+ (str.to_re "ppp"))))))) (re.union (re.+ (re.union (re.+ (re.union (re.+ (str.to_re "qqq")) (re.+ (str.to_re "rrr")))) (re.* (re.* (re.union (str.to_re "sss") (str.to_re "tt")))))) (re.union (re.+ (re.+ (re.+ (re.union (str.to_re "uuu") (str.to_re "v"))))) (re.union (re.union (re.+ (re.+ (str.to_re "w"))) (re.* (re.* (str.to_re "x")))) (re.union (re.* (re.union (str.to_re "yyy") (str.to_re "zz"))) (re.* (re.+ (str.to_re "AA")))))))) (re.* (re.union (re.union (re.union (re.+ (re.+ (re.* (str.to_re "B")))) (re.* (re.+ (re.+ (str.to_re "CCC"))))) (re.* (re.union (re.* (re.+ (str.to_re "DD"))) (re.union (re.union (str.to_re "EEE") (str.to_re "FFF")) (re.union (str.to_re "GG") (str.to_re "HHH")))))) (re.* (re.+ (re.+ (re.union (re.+ (str.to_re "II")) (re.* (str.to_re "JJJ"))))))))))) (re.+ (re.+ (re.* (re.union (re.* (re.+ (re.union (re.union (re.+ (re.union (str.to_re "KK") (str.to_re "L"))) (re.* (re.+ (str.to_re "M")))) (re.* (re.+ (re.union (str.to_re "N") (str.to_re "OO"))))))) (re.* (re.union (re.* (re.* (re.+ (re.union (str.to_re "PP") (str.to_re "QQ"))))) (re.* (re.union (re.+ (re.* (str.to_re "R"))) (re.union (re.+ (str.to_re "S")) (re.union (str.to_re "T") (str.to_re "UU"))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
