(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (re.union (re.+ (re.union (re.* (re.* (re.* (re.* (re.+ (re.union (re.union (re.union (str.to_re "000") (str.to_re "11")) (re.* (str.to_re "2"))) (re.* (re.+ (str.to_re "333"))))))))) (re.+ (re.+ (re.* (re.union (re.* (re.* (re.* (re.+ (str.to_re "4"))))) (re.* (re.* (re.union (re.* (str.to_re "5")) (re.+ (str.to_re "66"))))))))))) (re.union (re.union (re.* (re.+ (re.* (re.union (re.union (re.union (re.* (re.+ (str.to_re "777"))) (re.* (re.* (str.to_re "88")))) (re.* (re.+ (re.union (str.to_re "999") (str.to_re "aaa"))))) (re.+ (re.+ (re.* (re.+ (str.to_re "bb"))))))))) (re.union (re.* (re.+ (re.* (re.* (re.union (re.* (re.union (str.to_re "c") (str.to_re "ddd"))) (re.+ (re.union (str.to_re "ee") (str.to_re "ff")))))))) (re.union (re.union (re.* (re.union (re.* (re.* (re.* (str.to_re "g")))) (re.+ (re.union (re.union (str.to_re "hh") (str.to_re "i")) (re.union (str.to_re "jjj") (str.to_re "kkk")))))) (re.union (re.union (re.* (re.* (re.* (str.to_re "lll")))) (re.* (re.union (re.+ (str.to_re "mm")) (re.* (str.to_re "n"))))) (re.union (re.union (re.union (re.union (str.to_re "oo") (str.to_re "pp")) (re.* (str.to_re "qqq"))) (re.union (re.union (str.to_re "rr") (str.to_re "sss")) (re.* (str.to_re "t")))) (re.union (re.+ (re.union (str.to_re "uu") (str.to_re "vvv"))) (re.union (re.* (str.to_re "ww")) (re.union (str.to_re "xx") (str.to_re "yyy"))))))) (re.* (re.* (re.+ (re.+ (re.union (re.* (str.to_re "zzz")) (re.union (str.to_re "AA") (str.to_re "BBB")))))))))) (re.* (re.union (re.* (re.* (re.union (re.* (re.* (re.* (re.+ (str.to_re "CC"))))) (re.union (re.+ (re.union (re.* (str.to_re "D")) (re.+ (str.to_re "EEE")))) (re.* (re.union (re.union (str.to_re "FF") (str.to_re "GG")) (re.+ (str.to_re "HH")))))))) (re.union (re.+ (re.+ (re.+ (re.* (re.+ (re.union (str.to_re "I") (str.to_re "JJ"))))))) (re.+ (re.+ (re.+ (re.+ (re.+ (re.+ (str.to_re "KKK")))))))))))) (re.+ (re.+ (re.+ (re.+ (re.+ (re.union (re.union (re.+ (re.+ (re.+ (re.* (str.to_re "LL"))))) (re.* (re.+ (re.* (re.union (str.to_re "MM") (str.to_re "NN")))))) (re.+ (re.* (re.+ (re.union (re.union (str.to_re "OOO") (str.to_re "PP")) (re.* (str.to_re "QQ")))))))))))))) (re.+ (re.union (re.union (re.* (re.union (re.union (re.* (re.+ (re.+ (re.union (re.* (re.* (re.union (str.to_re "R") (str.to_re "S")))) (re.+ (re.* (re.+ (str.to_re "T")))))))) (re.union (re.* (re.+ (re.+ (re.+ (re.+ (re.* (str.to_re "U"))))))) (re.+ (re.union (re.* (re.+ (re.union (re.* (str.to_re "VV")) (re.+ (str.to_re "WW"))))) (re.+ (re.+ (re.+ (re.* (str.to_re "XXX"))))))))) (re.* (re.+ (re.+ (re.* (re.union (re.+ (re.+ (re.* (str.to_re "Y")))) (re.+ (re.union (re.union (str.to_re "ZZZ") (str.to_re "!!")) (re.+ (str.to_re """"""))))))))))) (re.* (re.union (re.* (re.union (re.union (re.* (re.union (re.* (re.union (re.+ (str.to_re "###")) (re.+ (str.to_re "$$")))) (re.+ (re.union (re.union (str.to_re "%%%") (str.to_re "&&&")) (re.union (str.to_re "'''") (str.to_re "(((")))))) (re.* (re.+ (re.* (re.* (re.+ (str.to_re "))"))))))) (re.* (re.* (re.union (re.union (re.+ (re.* (str.to_re "***"))) (re.+ (re.+ (str.to_re "++")))) (re.+ (re.* (re.* (str.to_re ",,,"))))))))) (re.+ (re.+ (re.+ (re.* (re.+ (re.union (re.+ (re.union (str.to_re "--") (str.to_re ".."))) (re.+ (re.+ (str.to_re "/")))))))))))) (re.union (re.* (re.* (re.union (re.* (re.* (re.+ (re.union (re.* (re.* (re.* (str.to_re "::")))) (re.* (re.+ (re.+ (str.to_re ";;;")))))))) (re.* (re.+ (re.* (re.* (re.union (re.* (re.+ (str.to_re "<"))) (re.+ (re.union (str.to_re "=") (str.to_re ">>"))))))))))) (re.* (re.union (re.* (re.union (re.+ (re.+ (re.union (re.union (re.+ (re.* (str.to_re "?"))) (re.union (re.union (str.to_re "@") (str.to_re "[[")) (re.+ (str.to_re "\\\\\\")))) (re.* (re.+ (re.+ (str.to_re "]"))))))) (re.* (re.union (re.+ (re.union (re.union (re.+ (str.to_re "^^^")) (re.* (str.to_re "_"))) (re.* (re.* (str.to_re "```"))))) (re.+ (re.union (re.* (re.+ (str.to_re "{{{"))) (re.+ (re.+ (str.to_re "|||"))))))))) (re.union (re.* (re.union (re.* (re.* (re.+ (re.union (re.+ (str.to_re "}}")) (re.* (str.to_re "~~")))))) (re.+ (re.* (re.union (re.+ (re.* (str.to_re "0"))) (re.* (re.+ (str.to_re "1")))))))) (re.+ (re.union (re.* (re.+ (re.union (re.* (re.+ (str.to_re "222"))) (re.* (re.+ (str.to_re "3")))))) (re.union (re.union (re.union (re.+ (re.union (str.to_re "44") (str.to_re "555"))) (re.union (re.union (str.to_re "666") (str.to_re "777")) (re.* (str.to_re "8")))) (re.union (re.+ (re.union (str.to_re "999") (str.to_re "aaa"))) (re.union (re.+ (str.to_re "b")) (re.union (str.to_re "ccc") (str.to_re "d"))))) (re.* (re.union (re.union (re.+ (str.to_re "e")) (re.+ (str.to_re "f"))) (re.union (re.union (str.to_re "ggg") (str.to_re "h")) (re.+ (str.to_re "iii")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
