(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (re.union (re.* (re.* (re.union (re.+ (re.+ (re.union (re.union (re.union (str.to_re "000") (str.to_re "111")) (re.union (str.to_re "22") (str.to_re "333"))) (re.union (re.union (str.to_re "444") (str.to_re "555")) (re.union (str.to_re "666") (str.to_re "7")))))) (re.union (re.union (re.+ (re.* (re.* (str.to_re "88")))) (re.union (re.union (re.+ (str.to_re "999")) (re.+ (str.to_re "a"))) (re.* (re.+ (str.to_re "b"))))) (re.union (re.union (re.* (re.union (str.to_re "cc") (str.to_re "dd"))) (re.union (re.union (str.to_re "ee") (str.to_re "f")) (re.* (str.to_re "ggg")))) (re.* (re.union (re.union (str.to_re "h") (str.to_re "iii")) (re.union (str.to_re "jj") (str.to_re "kkk"))))))))) (re.+ (re.* (re.* (re.+ (re.+ (re.+ (re.union (re.union (str.to_re "ll") (str.to_re "m")) (re.+ (str.to_re "nn"))))))))))) (re.union (re.* (re.* (re.* (re.+ (re.union (re.* (re.+ (re.+ (re.+ (str.to_re "o"))))) (re.union (re.+ (re.* (re.* (str.to_re "pp")))) (re.union (re.union (re.union (str.to_re "qqq") (str.to_re "rrr")) (re.+ (str.to_re "sss"))) (re.union (re.* (str.to_re "ttt")) (re.* (str.to_re "uuu")))))))))) (re.+ (re.union (re.* (re.union (re.+ (re.* (re.union (re.* (re.union (str.to_re "vvv") (str.to_re "w"))) (re.union (re.+ (str.to_re "xxx")) (re.union (str.to_re "y") (str.to_re "zzz")))))) (re.+ (re.union (re.* (re.union (re.union (str.to_re "A") (str.to_re "B")) (re.* (str.to_re "CCC")))) (re.+ (re.union (re.* (str.to_re "DD")) (re.+ (str.to_re "EE")))))))) (re.union (re.* (re.union (re.* (re.+ (re.+ (re.* (str.to_re "FFF"))))) (re.* (re.* (re.union (re.* (str.to_re "GG")) (re.+ (str.to_re "HH"))))))) (re.* (re.+ (re.* (re.* (re.* (re.* (str.to_re "II")))))))))))) (re.* (re.+ (re.+ (re.* (re.* (re.* (re.union (re.* (re.* (re.union (re.* (str.to_re "JJJ")) (re.* (str.to_re "KK"))))) (re.+ (re.* (re.union (re.union (str.to_re "L") (str.to_re "M")) (re.union (str.to_re "N") (str.to_re "O")))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
