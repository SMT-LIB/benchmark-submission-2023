(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.union (re.union (re.union (re.+ (re.* (re.+ (re.union (re.union (re.+ (str.to_re "000")) (re.+ (str.to_re "11"))) (re.+ (re.* (str.to_re "2"))))))) (re.+ (re.+ (re.union (re.+ (re.* (re.+ (str.to_re "33")))) (re.union (re.* (re.+ (str.to_re "4"))) (re.* (re.union (str.to_re "555") (str.to_re "6")))))))) (re.+ (re.+ (re.union (re.union (re.+ (re.* (re.union (str.to_re "777") (str.to_re "8")))) (re.union (re.* (re.+ (str.to_re "9"))) (re.union (re.+ (str.to_re "aa")) (re.union (str.to_re "bbb") (str.to_re "cc"))))) (re.+ (re.+ (re.* (re.+ (str.to_re "ddd"))))))))) (re.* (re.* (re.union (re.* (re.union (re.+ (re.+ (re.+ (str.to_re "ee")))) (re.+ (re.* (re.union (str.to_re "ff") (str.to_re "g")))))) (re.+ (re.union (re.+ (re.union (re.+ (str.to_re "h")) (re.union (str.to_re "ii") (str.to_re "jjj")))) (re.union (re.+ (re.* (str.to_re "kkk"))) (re.union (re.+ (str.to_re "ll")) (re.* (str.to_re "mm")))))))))) (re.union (re.union (re.union (re.+ (re.* (re.+ (re.union (re.+ (re.* (str.to_re "n"))) (re.* (re.+ (str.to_re "o"))))))) (re.+ (re.* (re.* (re.union (re.+ (re.+ (str.to_re "pp"))) (re.union (re.* (str.to_re "qqq")) (re.union (str.to_re "rr") (str.to_re "s")))))))) (re.union (re.union (re.* (re.* (re.union (re.+ (re.union (str.to_re "tt") (str.to_re "u"))) (re.* (re.* (str.to_re "vv")))))) (re.union (re.+ (re.* (re.+ (re.+ (str.to_re "w"))))) (re.* (re.* (re.+ (re.+ (str.to_re "xxx"))))))) (re.+ (re.union (re.+ (re.+ (re.* (re.+ (str.to_re "y"))))) (re.* (re.* (re.+ (re.+ (str.to_re "zz"))))))))) (re.* (re.union (re.* (re.+ (re.union (re.+ (re.+ (re.* (str.to_re "AAA")))) (re.union (re.* (re.+ (str.to_re "BB"))) (re.union (re.+ (str.to_re "CCC")) (re.* (str.to_re "D"))))))) (re.* (re.+ (re.* (re.* (re.* (re.union (str.to_re "E") (str.to_re "FF"))))))))))) (re.* (re.union (re.* (re.* (re.* (re.* (re.union (re.union (re.+ (re.union (str.to_re "G") (str.to_re "HH"))) (re.* (re.union (str.to_re "II") (str.to_re "JJ")))) (re.* (re.* (re.union (str.to_re "K") (str.to_re "LLL"))))))))) (re.+ (re.* (re.union (re.* (re.* (re.union (re.* (re.* (str.to_re "M"))) (re.+ (re.+ (str.to_re "NNN")))))) (re.union (re.* (re.+ (re.* (re.union (str.to_re "OO") (str.to_re "PPP"))))) (re.* (re.+ (re.* (re.+ (str.to_re "QQQ"))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
