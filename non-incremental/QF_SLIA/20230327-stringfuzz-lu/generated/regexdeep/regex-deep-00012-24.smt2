(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (re.union (re.union (re.union (re.+ (re.* (re.* (re.+ (re.union (re.* (re.union (str.to_re "000") (str.to_re "111"))) (re.* (re.* (str.to_re "2")))))))) (re.+ (re.+ (re.+ (re.* (re.+ (re.+ (re.union (str.to_re "3") (str.to_re "444"))))))))) (re.* (re.union (re.* (re.* (re.+ (re.* (re.+ (re.* (str.to_re "55"))))))) (re.* (re.* (re.+ (re.union (re.* (re.+ (str.to_re "66"))) (re.union (re.+ (str.to_re "77")) (re.+ (str.to_re "888")))))))))) (re.+ (re.* (re.union (re.union (re.union (re.+ (re.* (re.* (re.+ (str.to_re "9"))))) (re.* (re.+ (re.union (re.union (str.to_re "aa") (str.to_re "bb")) (re.* (str.to_re "c")))))) (re.union (re.union (re.+ (re.* (re.+ (str.to_re "ddd")))) (re.+ (re.* (re.+ (str.to_re "ee"))))) (re.* (re.+ (re.union (re.+ (str.to_re "fff")) (re.* (str.to_re "gg"))))))) (re.+ (re.union (re.* (re.+ (re.+ (re.* (str.to_re "h"))))) (re.union (re.+ (re.+ (re.* (str.to_re "ii")))) (re.union (re.union (re.union (str.to_re "j") (str.to_re "kkk")) (re.+ (str.to_re "ll"))) (re.+ (re.* (str.to_re "mm"))))))))))))) (re.union (re.union (re.* (re.union (re.* (re.+ (re.* (re.* (re.* (re.+ (re.union (re.+ (str.to_re "nn")) (re.* (str.to_re "ooo"))))))))) (re.+ (re.union (re.+ (re.union (re.* (re.* (re.+ (re.* (str.to_re "pp"))))) (re.+ (re.* (re.union (re.+ (str.to_re "qq")) (re.+ (str.to_re "r"))))))) (re.union (re.union (re.union (re.* (re.+ (re.union (str.to_re "sss") (str.to_re "ttt")))) (re.union (re.union (re.+ (str.to_re "u")) (re.+ (str.to_re "v"))) (re.union (re.* (str.to_re "www")) (re.union (str.to_re "x") (str.to_re "yyy"))))) (re.union (re.* (re.union (re.union (str.to_re "zz") (str.to_re "AAA")) (re.+ (str.to_re "BBB")))) (re.+ (re.* (re.* (str.to_re "C")))))) (re.union (re.+ (re.* (re.+ (re.union (str.to_re "DDD") (str.to_re "E"))))) (re.+ (re.union (re.union (re.* (str.to_re "FFF")) (re.union (str.to_re "GGG") (str.to_re "HH"))) (re.union (re.* (str.to_re "III")) (re.* (str.to_re "JJJ"))))))))))) (re.* (re.union (re.+ (re.* (re.+ (re.* (re.* (re.* (re.* (re.+ (str.to_re "K"))))))))) (re.+ (re.* (re.* (re.* (re.+ (re.* (re.* (re.union (str.to_re "LL") (str.to_re "M")))))))))))) (re.* (re.* (re.* (re.+ (re.+ (re.union (re.union (re.+ (re.* (re.union (re.* (str.to_re "NNN")) (re.+ (str.to_re "O"))))) (re.union (re.union (re.+ (re.union (str.to_re "PPP") (str.to_re "Q"))) (re.+ (re.+ (str.to_re "RR")))) (re.union (re.union (re.+ (str.to_re "SSS")) (re.union (str.to_re "T") (str.to_re "U"))) (re.* (re.union (str.to_re "V") (str.to_re "W")))))) (re.+ (re.union (re.+ (re.+ (re.* (str.to_re "XX")))) (re.union (re.* (re.union (str.to_re "YYY") (str.to_re "ZZZ"))) (re.* (re.* (str.to_re "!!"))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
