(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.union (re.union (re.+ (re.* (re.union (re.union (re.union (re.+ (str.to_re "0")) (re.+ (str.to_re "1"))) (re.* (re.+ (str.to_re "22")))) (re.union (re.+ (re.* (str.to_re "333"))) (re.* (re.* (str.to_re "4"))))))) (re.* (re.union (re.* (re.+ (re.* (re.+ (str.to_re "5"))))) (re.union (re.* (re.+ (re.union (str.to_re "66") (str.to_re "777")))) (re.+ (re.* (re.union (str.to_re "888") (str.to_re "999")))))))) (re.+ (re.union (re.* (re.* (re.union (re.* (re.+ (str.to_re "aa"))) (re.union (re.+ (str.to_re "bbb")) (re.* (str.to_re "cc")))))) (re.+ (re.+ (re.+ (re.+ (re.+ (str.to_re "ddd"))))))))) (re.union (re.+ (re.+ (re.union (re.+ (re.* (re.union (re.+ (str.to_re "eee")) (re.union (str.to_re "f") (str.to_re "gg"))))) (re.union (re.* (re.union (re.union (str.to_re "hh") (str.to_re "iii")) (re.+ (str.to_re "jj")))) (re.union (re.+ (re.* (str.to_re "kkk"))) (re.union (re.+ (str.to_re "lll")) (re.+ (str.to_re "mmm")))))))) (re.* (re.union (re.union (re.+ (re.union (re.+ (re.union (str.to_re "n") (str.to_re "o"))) (re.+ (re.* (str.to_re "pp"))))) (re.* (re.+ (re.union (re.* (str.to_re "qq")) (re.union (str.to_re "r") (str.to_re "ss")))))) (re.+ (re.union (re.union (re.union (re.union (str.to_re "ttt") (str.to_re "uuu")) (re.* (str.to_re "v"))) (re.* (re.+ (str.to_re "ww")))) (re.+ (re.* (re.union (str.to_re "x") (str.to_re "yyy")))))))))) (re.union (re.union (re.* (re.union (re.* (re.union (re.union (re.+ (re.union (str.to_re "z") (str.to_re "AA"))) (re.+ (re.+ (str.to_re "BB")))) (re.+ (re.union (re.union (str.to_re "CC") (str.to_re "DDD")) (re.* (str.to_re "E")))))) (re.union (re.* (re.* (re.* (re.+ (str.to_re "FFF"))))) (re.* (re.+ (re.union (re.+ (str.to_re "G")) (re.+ (str.to_re "H")))))))) (re.+ (re.union (re.+ (re.+ (re.+ (re.union (re.+ (str.to_re "II")) (re.union (str.to_re "JJ") (str.to_re "KK")))))) (re.union (re.* (re.* (re.union (re.+ (str.to_re "L")) (re.+ (str.to_re "MMM"))))) (re.* (re.+ (re.* (re.union (str.to_re "NNN") (str.to_re "O"))))))))) (re.+ (re.* (re.* (re.union (re.+ (re.* (re.* (re.+ (str.to_re "PPP"))))) (re.+ (re.+ (re.* (re.* (str.to_re "QQ")))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
