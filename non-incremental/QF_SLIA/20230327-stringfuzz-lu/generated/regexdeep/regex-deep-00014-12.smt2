(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (re.+ (re.* (re.union (re.+ (re.union (re.+ (re.+ (re.+ (re.union (re.* (re.union (re.* (str.to_re "0")) (re.* (str.to_re "11")))) (re.union (re.+ (re.* (str.to_re "2"))) (re.union (re.+ (str.to_re "333")) (re.+ (str.to_re "44")))))))) (re.union (re.union (re.union (re.+ (re.* (re.+ (re.+ (str.to_re "55"))))) (re.union (re.union (re.+ (re.+ (str.to_re "66"))) (re.union (re.+ (str.to_re "77")) (re.* (str.to_re "888")))) (re.* (re.union (re.union (str.to_re "9") (str.to_re "aaa")) (re.* (str.to_re "bb")))))) (re.* (re.* (re.* (re.* (re.+ (str.to_re "ccc"))))))) (re.+ (re.+ (re.union (re.union (re.* (re.union (str.to_re "ddd") (str.to_re "eee"))) (re.+ (re.* (str.to_re "fff")))) (re.+ (re.* (re.+ (str.to_re "gg")))))))))) (re.+ (re.+ (re.union (re.+ (re.+ (re.* (re.union (re.* (re.union (str.to_re "hhh") (str.to_re "iii"))) (re.+ (re.union (str.to_re "jjj") (str.to_re "k"))))))) (re.* (re.+ (re.union (re.union (re.union (re.* (str.to_re "ll")) (re.* (str.to_re "mm"))) (re.* (re.+ (str.to_re "nn")))) (re.union (re.* (re.+ (str.to_re "oo"))) (re.* (re.union (str.to_re "pp") (str.to_re "q")))))))))))))) (re.* (re.* (re.+ (re.* (re.* (re.+ (re.union (re.union (re.+ (re.* (re.union (re.* (re.+ (str.to_re "r"))) (re.+ (re.* (str.to_re "ss")))))) (re.* (re.union (re.union (re.+ (re.+ (str.to_re "t"))) (re.union (re.union (str.to_re "uuu") (str.to_re "vvv")) (re.+ (str.to_re "ww")))) (re.union (re.+ (re.union (str.to_re "x") (str.to_re "yyy"))) (re.* (re.union (str.to_re "zz") (str.to_re "AA"))))))) (re.+ (re.* (re.union (re.union (re.+ (re.* (str.to_re "B"))) (re.* (re.union (str.to_re "C") (str.to_re "DDD")))) (re.* (re.union (re.union (str.to_re "EEE") (str.to_re "FFF")) (re.* (str.to_re "GGG"))))))))))))))) (re.+ (re.* (re.* (re.* (re.+ (re.+ (re.* (re.+ (re.* (re.union (re.* (re.+ (re.+ (re.+ (str.to_re "HHH"))))) (re.union (re.* (re.+ (re.+ (str.to_re "I")))) (re.* (re.union (re.union (str.to_re "JJ") (str.to_re "KKK")) (re.* (str.to_re "LL"))))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
