(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (re.+ (re.+ (re.* (re.+ (re.union (re.+ (re.* (re.* (re.+ (re.union (re.union (re.union (str.to_re "000") (str.to_re "11")) (re.union (str.to_re "2") (str.to_re "3"))) (re.+ (re.+ (str.to_re "4")))))))) (re.* (re.* (re.+ (re.union (re.+ (re.union (re.* (str.to_re "555")) (re.+ (str.to_re "6")))) (re.union (re.+ (re.union (str.to_re "7") (str.to_re "8"))) (re.* (re.* (str.to_re "999"))))))))))))))) (re.union (re.+ (re.* (re.union (re.* (re.* (re.* (re.union (re.* (re.+ (re.union (re.* (re.* (re.* (str.to_re "aa")))) (re.union (re.+ (re.union (str.to_re "bb") (str.to_re "ccc"))) (re.+ (re.* (str.to_re "ddd"))))))) (re.+ (re.+ (re.* (re.+ (re.union (re.union (str.to_re "ee") (str.to_re "ff")) (re.+ (str.to_re "g"))))))))))) (re.union (re.* (re.+ (re.* (re.+ (re.* (re.+ (re.* (re.* (re.+ (str.to_re "h")))))))))) (re.* (re.* (re.union (re.union (re.+ (re.+ (re.+ (re.+ (re.union (str.to_re "iii") (str.to_re "jj")))))) (re.union (re.union (re.+ (re.* (re.union (str.to_re "kk") (str.to_re "ll")))) (re.* (re.union (re.+ (str.to_re "m")) (re.+ (str.to_re "nn"))))) (re.+ (re.union (re.+ (re.+ (str.to_re "oo"))) (re.union (re.* (str.to_re "p")) (re.union (str.to_re "qqq") (str.to_re "rrr"))))))) (re.+ (re.+ (re.+ (re.+ (re.+ (re.* (str.to_re "sss")))))))))))))) (re.union (re.union (re.* (re.union (re.* (re.union (re.+ (re.+ (re.* (re.+ (re.union (re.union (re.union (str.to_re "t") (str.to_re "u")) (re.* (str.to_re "v"))) (re.* (re.union (str.to_re "ww") (str.to_re "xx")))))))) (re.+ (re.* (re.* (re.union (re.union (re.union (re.union (str.to_re "yy") (str.to_re "zzz")) (re.* (str.to_re "AAA"))) (re.union (re.+ (str.to_re "BB")) (re.* (str.to_re "CC")))) (re.+ (re.* (re.union (str.to_re "DD") (str.to_re "EEE")))))))))) (re.+ (re.* (re.union (re.* (re.union (re.* (re.+ (re.+ (re.+ (str.to_re "F"))))) (re.* (re.* (re.union (re.+ (str.to_re "G")) (re.+ (str.to_re "H"))))))) (re.union (re.+ (re.* (re.+ (re.* (re.+ (str.to_re "I")))))) (re.+ (re.* (re.union (re.union (re.* (str.to_re "JJJ")) (re.* (str.to_re "KK"))) (re.+ (re.union (str.to_re "L") (str.to_re "M")))))))))))) (re.* (re.* (re.+ (re.+ (re.+ (re.union (re.* (re.* (re.* (re.+ (re.+ (str.to_re "NN")))))) (re.* (re.+ (re.union (re.* (re.union (str.to_re "OOO") (str.to_re "PPP"))) (re.+ (re.union (str.to_re "Q") (str.to_re "RRR"))))))))))))) (re.union (re.union (re.+ (re.* (re.+ (re.+ (re.+ (re.union (re.* (re.union (re.+ (re.+ (str.to_re "SSS"))) (re.+ (re.+ (str.to_re "TT"))))) (re.+ (re.+ (re.union (re.* (str.to_re "U")) (re.* (str.to_re "V"))))))))))) (re.union (re.+ (re.union (re.+ (re.* (re.+ (re.union (re.* (re.* (re.+ (str.to_re "WWW")))) (re.union (re.union (re.+ (str.to_re "XX")) (re.+ (str.to_re "Y"))) (re.* (re.union (str.to_re "Z") (str.to_re "!")))))))) (re.* (re.+ (re.union (re.+ (re.* (re.union (re.union (str.to_re """""""") (str.to_re "###")) (re.+ (str.to_re "$$"))))) (re.union (re.* (re.+ (re.* (str.to_re "%%%")))) (re.union (re.+ (re.+ (str.to_re "&"))) (re.* (re.union (str.to_re "'") (str.to_re "(")))))))))) (re.union (re.* (re.+ (re.* (re.* (re.union (re.* (re.union (re.union (str.to_re ")))") (str.to_re "***")) (re.* (str.to_re "++")))) (re.union (re.+ (re.union (str.to_re ",,") (str.to_re "---"))) (re.union (re.+ (str.to_re ".")) (re.* (str.to_re "/"))))))))) (re.+ (re.+ (re.* (re.union (re.union (re.union (re.+ (re.* (str.to_re ":"))) (re.+ (re.+ (str.to_re ";;")))) (re.union (re.union (re.union (str.to_re "<<<") (str.to_re "===")) (re.+ (str.to_re ">>"))) (re.+ (re.+ (str.to_re "???"))))) (re.union (re.* (re.union (re.union (str.to_re "@") (str.to_re "[[[")) (re.* (str.to_re "\\\\")))) (re.* (re.union (re.union (str.to_re "]") (str.to_re "^")) (re.* (str.to_re "___")))))))))))) (re.+ (re.union (re.* (re.union (re.+ (re.+ (re.union (re.+ (re.* (re.+ (re.* (str.to_re "``"))))) (re.union (re.+ (re.* (re.* (str.to_re "{{{")))) (re.+ (re.+ (re.* (str.to_re "|||")))))))) (re.* (re.+ (re.+ (re.+ (re.* (re.+ (re.+ (str.to_re "}}}")))))))))) (re.* (re.* (re.union (re.* (re.* (re.union (re.union (re.* (re.* (str.to_re "~~~"))) (re.* (re.* (str.to_re "000")))) (re.* (re.+ (re.* (str.to_re "111"))))))) (re.+ (re.union (re.union (re.+ (re.* (re.+ (str.to_re "222")))) (re.+ (re.+ (re.* (str.to_re "333"))))) (re.* (re.union (re.+ (re.union (str.to_re "444") (str.to_re "555"))) (re.* (re.+ (str.to_re "6"))))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
