(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (re.union (re.+ (re.union (re.+ (re.* (re.* (re.+ (re.* (re.union (re.+ (re.* (re.* (str.to_re "0")))) (re.union (re.+ (re.* (str.to_re "111"))) (re.+ (re.* (str.to_re "222")))))))))) (re.+ (re.union (re.+ (re.+ (re.union (re.* (re.union (re.+ (re.* (str.to_re "3"))) (re.* (re.+ (str.to_re "44"))))) (re.union (re.* (re.union (re.+ (str.to_re "55")) (re.* (str.to_re "6")))) (re.union (re.* (re.+ (str.to_re "7"))) (re.* (re.+ (str.to_re "88")))))))) (re.+ (re.union (re.+ (re.union (re.union (re.+ (re.* (str.to_re "999"))) (re.union (re.union (str.to_re "aaa") (str.to_re "bbb")) (re.* (str.to_re "cc")))) (re.* (re.* (re.* (str.to_re "ddd")))))) (re.union (re.+ (re.+ (re.* (re.union (str.to_re "ee") (str.to_re "fff"))))) (re.* (re.union (re.union (re.+ (str.to_re "g")) (re.union (str.to_re "h") (str.to_re "iii"))) (re.+ (re.+ (str.to_re "j")))))))))))) (re.* (re.* (re.* (re.union (re.* (re.* (re.+ (re.+ (re.+ (re.union (re.* (str.to_re "kk")) (re.* (str.to_re "l")))))))) (re.* (re.union (re.+ (re.union (re.+ (re.union (re.* (str.to_re "mmm")) (re.* (str.to_re "nn")))) (re.+ (re.+ (re.+ (str.to_re "oo")))))) (re.+ (re.+ (re.+ (re.* (re.union (str.to_re "pp") (str.to_re "qqq"))))))))))))))) (re.* (re.+ (re.union (re.+ (re.union (re.union (re.+ (re.union (re.union (re.+ (re.union (re.* (re.* (re.union (str.to_re "r") (str.to_re "ss")))) (re.+ (re.* (re.union (str.to_re "ttt") (str.to_re "u")))))) (re.* (re.* (re.union (re.* (re.union (str.to_re "vv") (str.to_re "www"))) (re.* (re.+ (str.to_re "xxx"))))))) (re.* (re.union (re.+ (re.* (re.* (re.union (str.to_re "yy") (str.to_re "z"))))) (re.* (re.union (re.* (re.* (str.to_re "AAA"))) (re.+ (re.union (str.to_re "BB") (str.to_re "CC"))))))))) (re.union (re.+ (re.* (re.union (re.* (re.+ (re.* (re.* (str.to_re "DDD"))))) (re.+ (re.union (re.union (re.union (str.to_re "E") (str.to_re "FF")) (re.* (str.to_re "GGG"))) (re.+ (re.+ (str.to_re "HHH")))))))) (re.* (re.* (re.+ (re.union (re.+ (re.* (re.* (str.to_re "II")))) (re.union (re.+ (re.+ (str.to_re "JJ"))) (re.* (re.* (str.to_re "KK")))))))))) (re.+ (re.union (re.* (re.+ (re.* (re.union (re.* (re.* (re.* (str.to_re "L")))) (re.* (re.+ (re.+ (str.to_re "MMM")))))))) (re.union (re.* (re.union (re.+ (re.* (re.union (re.* (str.to_re "NNN")) (re.* (str.to_re "OOO"))))) (re.* (re.union (re.+ (re.union (str.to_re "PP") (str.to_re "QQQ"))) (re.* (re.union (str.to_re "RRR") (str.to_re "SS"))))))) (re.union (re.+ (re.* (re.+ (re.union (re.union (str.to_re "T") (str.to_re "UU")) (re.+ (str.to_re "V")))))) (re.* (re.* (re.+ (re.+ (re.+ (str.to_re "W")))))))))))) (re.+ (re.* (re.+ (re.* (re.* (re.* (re.union (re.+ (re.+ (re.* (re.* (str.to_re "XXX"))))) (re.* (re.+ (re.* (re.* (str.to_re "Y"))))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
