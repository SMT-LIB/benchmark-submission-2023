(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (re.union (re.* (re.* (re.* (re.* (re.* (re.+ (re.union (re.union (re.+ (re.union (str.to_re "00") (str.to_re "1"))) (re.* (re.+ (str.to_re "2")))) (re.* (re.union (re.* (str.to_re "333")) (re.+ (str.to_re "4"))))))))))) (re.union (re.union (re.union (re.union (re.union (re.* (re.+ (re.union (re.union (re.* (str.to_re "55")) (re.* (str.to_re "666"))) (re.union (re.+ (str.to_re "7")) (re.union (str.to_re "888") (str.to_re "99")))))) (re.+ (re.* (re.* (re.union (re.union (str.to_re "aa") (str.to_re "bb")) (re.+ (str.to_re "ccc"))))))) (re.union (re.union (re.+ (re.+ (re.union (re.* (str.to_re "ddd")) (re.union (str.to_re "e") (str.to_re "f"))))) (re.* (re.* (re.union (re.union (str.to_re "g") (str.to_re "hh")) (re.* (str.to_re "ii")))))) (re.* (re.+ (re.* (re.+ (re.+ (str.to_re "jjj")))))))) (re.* (re.union (re.+ (re.+ (re.* (re.+ (re.+ (str.to_re "kkk")))))) (re.+ (re.union (re.union (re.union (re.union (str.to_re "ll") (str.to_re "mm")) (re.* (str.to_re "nnn"))) (re.+ (re.+ (str.to_re "ooo")))) (re.* (re.union (re.+ (str.to_re "p")) (re.+ (str.to_re "qq"))))))))) (re.union (re.* (re.* (re.* (re.+ (re.+ (re.union (re.+ (str.to_re "rr")) (re.union (str.to_re "sss") (str.to_re "tt")))))))) (re.* (re.+ (re.* (re.+ (re.+ (re.union (re.+ (str.to_re "uu")) (re.+ (str.to_re "v")))))))))) (re.* (re.+ (re.+ (re.* (re.+ (re.union (re.+ (re.union (re.* (str.to_re "www")) (re.+ (str.to_re "xxx")))) (re.* (re.* (re.* (str.to_re "yy")))))))))))))) (re.+ (re.+ (re.* (re.* (re.* (re.+ (re.+ (re.union (re.* (re.+ (re.union (re.+ (re.* (str.to_re "z"))) (re.* (re.* (str.to_re "A")))))) (re.+ (re.union (re.+ (re.+ (re.* (str.to_re "B")))) (re.union (re.* (re.+ (str.to_re "CC"))) (re.union (re.union (str.to_re "DDD") (str.to_re "EEE")) (re.+ (str.to_re "FFF")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
