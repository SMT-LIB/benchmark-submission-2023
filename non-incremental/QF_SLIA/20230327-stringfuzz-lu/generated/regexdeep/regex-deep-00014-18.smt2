(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (re.* (re.+ (re.* (re.* (re.union (re.* (re.union (re.union (re.+ (re.union (re.+ (re.union (str.to_re "0") (str.to_re "1"))) (re.+ (re.* (str.to_re "222"))))) (re.* (re.union (re.+ (re.+ (str.to_re "333"))) (re.* (re.union (str.to_re "44") (str.to_re "55")))))) (re.+ (re.union (re.+ (re.* (re.+ (str.to_re "666")))) (re.+ (re.+ (re.* (str.to_re "77")))))))) (re.union (re.+ (re.+ (re.+ (re.+ (re.+ (re.+ (str.to_re "8"))))))) (re.+ (re.union (re.union (re.union (re.* (re.+ (str.to_re "999"))) (re.+ (re.* (str.to_re "aaa")))) (re.union (re.union (re.union (str.to_re "bbb") (str.to_re "ccc")) (re.* (str.to_re "d"))) (re.union (re.union (str.to_re "eee") (str.to_re "fff")) (re.union (str.to_re "ggg") (str.to_re "hhh"))))) (re.union (re.+ (re.* (re.* (str.to_re "i")))) (re.union (re.+ (re.union (str.to_re "jjj") (str.to_re "kk"))) (re.* (re.+ (str.to_re "lll"))))))))))))))) (re.+ (re.+ (re.+ (re.union (re.* (re.* (re.union (re.* (re.union (re.+ (re.union (re.union (re.* (re.union (str.to_re "mmm") (str.to_re "nn"))) (re.union (re.union (str.to_re "oo") (str.to_re "p")) (re.+ (str.to_re "qq")))) (re.union (re.+ (re.* (str.to_re "rrr"))) (re.* (re.+ (str.to_re "s")))))) (re.* (re.union (re.union (re.union (re.+ (str.to_re "t")) (re.* (str.to_re "uuu"))) (re.+ (re.* (str.to_re "v")))) (re.union (re.+ (re.union (str.to_re "w") (str.to_re "x"))) (re.+ (re.+ (str.to_re "yy")))))))) (re.+ (re.* (re.+ (re.+ (re.union (re.+ (re.+ (str.to_re "zzz"))) (re.union (re.* (str.to_re "AAA")) (re.union (str.to_re "BB") (str.to_re "CCC"))))))))))) (re.* (re.union (re.+ (re.union (re.+ (re.+ (re.* (re.union (re.+ (re.+ (str.to_re "DD"))) (re.union (re.* (str.to_re "EEE")) (re.union (str.to_re "FFF") (str.to_re "GGG"))))))) (re.+ (re.+ (re.+ (re.+ (re.* (re.+ (str.to_re "H"))))))))) (re.+ (re.union (re.union (re.+ (re.union (re.* (re.union (re.union (str.to_re "I") (str.to_re "JJJ")) (re.* (str.to_re "KK")))) (re.* (re.union (re.+ (str.to_re "L")) (re.* (str.to_re "MM")))))) (re.union (re.+ (re.* (re.* (re.union (str.to_re "NN") (str.to_re "O"))))) (re.+ (re.+ (re.union (re.* (str.to_re "PP")) (re.* (str.to_re "QQQ"))))))) (re.+ (re.+ (re.union (re.union (re.* (re.+ (str.to_re "R"))) (re.union (re.union (str.to_re "S") (str.to_re "T")) (re.union (str.to_re "UUU") (str.to_re "VVV")))) (re.+ (re.+ (re.+ (str.to_re "WW"))))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
