(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (re.* (re.+ (re.union (re.+ (re.* (re.union (re.union (re.* (re.+ (re.* (re.* (str.to_re "00"))))) (re.+ (re.+ (re.* (re.+ (str.to_re "11")))))) (re.+ (re.+ (re.union (re.+ (re.* (str.to_re "22"))) (re.+ (re.+ (str.to_re "3"))))))))) (re.* (re.+ (re.+ (re.* (re.+ (re.* (re.union (re.union (str.to_re "44") (str.to_re "5")) (re.+ (str.to_re "666")))))))))))) (re.union (re.+ (re.* (re.* (re.* (re.* (re.union (re.* (re.union (re.union (re.+ (str.to_re "7")) (re.+ (str.to_re "88"))) (re.+ (re.union (str.to_re "99") (str.to_re "aaa"))))) (re.union (re.union (re.* (re.* (str.to_re "bb"))) (re.+ (re.union (str.to_re "cc") (str.to_re "d")))) (re.+ (re.union (re.* (str.to_re "eee")) (re.union (str.to_re "ff") (str.to_re "g"))))))))))) (re.union (re.union (re.+ (re.* (re.union (re.union (re.* (re.union (re.+ (re.+ (str.to_re "hhh"))) (re.union (re.+ (str.to_re "ii")) (re.* (str.to_re "jj"))))) (re.* (re.union (re.* (re.union (str.to_re "k") (str.to_re "l"))) (re.union (re.union (str.to_re "m") (str.to_re "nn")) (re.+ (str.to_re "oo")))))) (re.+ (re.* (re.union (re.* (re.+ (str.to_re "ppp"))) (re.+ (re.union (str.to_re "qqq") (str.to_re "rr"))))))))) (re.union (re.* (re.* (re.+ (re.union (re.+ (re.+ (re.* (str.to_re "sss")))) (re.+ (re.* (re.union (str.to_re "ttt") (str.to_re "u")))))))) (re.+ (re.union (re.+ (re.union (re.+ (re.* (re.* (str.to_re "vvv")))) (re.* (re.+ (re.union (str.to_re "w") (str.to_re "xx")))))) (re.* (re.union (re.* (re.+ (re.+ (str.to_re "yyy")))) (re.* (re.+ (re.union (str.to_re "z") (str.to_re "A")))))))))) (re.* (re.* (re.+ (re.* (re.union (re.+ (re.+ (re.+ (re.* (str.to_re "BB"))))) (re.+ (re.* (re.+ (re.+ (str.to_re "CC")))))))))))))) (re.* (re.+ (re.union (re.+ (re.* (re.+ (re.+ (re.+ (re.union (re.union (re.union (re.* (re.union (str.to_re "DDD") (str.to_re "EEE"))) (re.union (re.+ (str.to_re "FF")) (re.* (str.to_re "G")))) (re.+ (re.* (re.* (str.to_re "HHH"))))) (re.* (re.+ (re.union (re.* (str.to_re "III")) (re.* (str.to_re "JJJ"))))))))))) (re.union (re.+ (re.+ (re.* (re.union (re.union (re.+ (re.union (re.union (re.+ (str.to_re "KK")) (re.union (str.to_re "L") (str.to_re "M"))) (re.union (re.+ (str.to_re "NN")) (re.+ (str.to_re "OOO"))))) (re.union (re.union (re.* (re.union (str.to_re "PPP") (str.to_re "Q"))) (re.* (re.* (str.to_re "RR")))) (re.+ (re.* (re.* (str.to_re "S")))))) (re.union (re.* (re.union (re.* (re.union (str.to_re "T") (str.to_re "UUU"))) (re.* (re.* (str.to_re "VV"))))) (re.+ (re.+ (re.+ (re.* (str.to_re "WW")))))))))) (re.union (re.union (re.* (re.union (re.union (re.union (re.* (re.* (re.* (str.to_re "XXX")))) (re.union (re.* (re.+ (str.to_re "YY"))) (re.* (re.union (str.to_re "ZZ") (str.to_re "!!"))))) (re.+ (re.union (re.+ (re.+ (str.to_re """"""""))) (re.union (re.union (str.to_re "#") (str.to_re "$$")) (re.* (str.to_re "%%")))))) (re.union (re.union (re.+ (re.+ (re.+ (str.to_re "&&&")))) (re.union (re.* (re.* (str.to_re "''"))) (re.* (re.* (str.to_re "((("))))) (re.* (re.* (re.* (re.* (str.to_re "))")))))))) (re.* (re.union (re.union (re.union (re.+ (re.+ (re.* (str.to_re "*")))) (re.+ (re.union (re.+ (str.to_re "+")) (re.* (str.to_re ","))))) (re.+ (re.* (re.* (re.union (str.to_re "--") (str.to_re "..")))))) (re.union (re.* (re.* (re.union (re.* (str.to_re "/")) (re.* (str.to_re "::"))))) (re.+ (re.union (re.+ (re.union (str.to_re ";") (str.to_re "<"))) (re.* (re.+ (str.to_re "="))))))))) (re.+ (re.union (re.+ (re.* (re.union (re.* (re.* (re.union (str.to_re ">") (str.to_re "?")))) (re.+ (re.+ (re.+ (str.to_re "@@@"))))))) (re.union (re.+ (re.* (re.* (re.+ (re.union (str.to_re "[[") (str.to_re "\\\\\\")))))) (re.union (re.union (re.+ (re.* (re.union (str.to_re "]]") (str.to_re "^^")))) (re.+ (re.* (re.+ (str.to_re "_"))))) (re.* (re.union (re.+ (re.* (str.to_re "`"))) (re.* (re.* (str.to_re "{")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
