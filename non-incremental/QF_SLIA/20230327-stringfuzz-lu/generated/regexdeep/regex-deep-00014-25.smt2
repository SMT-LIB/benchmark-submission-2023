(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.+ (re.union (re.union (re.+ (re.union (re.* (re.+ (re.+ (re.union (re.union (re.+ (re.* (re.union (str.to_re "000") (str.to_re "1")))) (re.union (re.union (re.+ (str.to_re "222")) (re.+ (str.to_re "33"))) (re.+ (re.union (str.to_re "444") (str.to_re "55"))))) (re.union (re.union (re.* (re.+ (str.to_re "666"))) (re.union (re.+ (str.to_re "777")) (re.* (str.to_re "88")))) (re.* (re.union (re.union (str.to_re "999") (str.to_re "a")) (re.+ (str.to_re "bb"))))))))) (re.* (re.+ (re.union (re.union (re.* (re.+ (re.+ (re.+ (str.to_re "c"))))) (re.* (re.union (re.union (re.+ (str.to_re "d")) (re.* (str.to_re "e"))) (re.* (re.* (str.to_re "f")))))) (re.* (re.* (re.union (re.* (re.+ (str.to_re "ggg"))) (re.union (re.* (str.to_re "h")) (re.+ (str.to_re "i"))))))))))) (re.* (re.* (re.* (re.union (re.union (re.+ (re.* (re.* (re.union (re.+ (str.to_re "j")) (re.+ (str.to_re "k")))))) (re.union (re.union (re.+ (re.union (re.union (str.to_re "lll") (str.to_re "mm")) (re.union (str.to_re "nn") (str.to_re "oo")))) (re.+ (re.* (re.* (str.to_re "p"))))) (re.union (re.+ (re.* (re.+ (str.to_re "qq")))) (re.* (re.* (re.* (str.to_re "r"))))))) (re.+ (re.* (re.union (re.+ (re.* (re.* (str.to_re "sss")))) (re.+ (re.+ (re.+ (str.to_re "ttt")))))))))))) (re.union (re.* (re.+ (re.union (re.* (re.union (re.* (re.+ (re.union (re.* (re.+ (str.to_re "uu"))) (re.* (re.union (str.to_re "vv") (str.to_re "www")))))) (re.+ (re.union (re.+ (re.union (re.* (str.to_re "xx")) (re.union (str.to_re "y") (str.to_re "zz")))) (re.+ (re.union (re.* (str.to_re "AAA")) (re.* (str.to_re "BB")))))))) (re.* (re.union (re.union (re.* (re.* (re.* (re.* (str.to_re "CC"))))) (re.* (re.+ (re.union (re.+ (str.to_re "DD")) (re.+ (str.to_re "EE")))))) (re.* (re.* (re.union (re.union (re.* (str.to_re "FF")) (re.+ (str.to_re "G"))) (re.union (re.union (str.to_re "H") (str.to_re "III")) (re.+ (str.to_re "J"))))))))))) (re.+ (re.union (re.union (re.+ (re.union (re.* (re.* (re.* (re.+ (re.* (str.to_re "KKK")))))) (re.* (re.* (re.+ (re.union (re.+ (str.to_re "LL")) (re.union (str.to_re "MMM") (str.to_re "NNN")))))))) (re.* (re.+ (re.* (re.+ (re.* (re.* (re.* (str.to_re "OO"))))))))) (re.union (re.* (re.+ (re.* (re.+ (re.* (re.union (re.+ (str.to_re "PPP")) (re.+ (str.to_re "QQ")))))))) (re.+ (re.union (re.+ (re.union (re.* (re.union (re.union (str.to_re "RR") (str.to_re "SS")) (re.* (str.to_re "TT")))) (re.union (re.union (re.+ (str.to_re "UU")) (re.union (str.to_re "V") (str.to_re "W"))) (re.union (re.union (str.to_re "XX") (str.to_re "Y")) (re.* (str.to_re "ZZ")))))) (re.+ (re.+ (re.union (re.+ (re.union (str.to_re "!") (str.to_re """"""""))) (re.* (re.+ (str.to_re "###"))))))))))))))) (re.+ (re.+ (re.* (re.union (re.union (re.+ (re.union (re.+ (re.* (re.+ (re.* (re.* (re.union (re.+ (str.to_re "$$")) (re.union (str.to_re "%") (str.to_re "&")))))))) (re.union (re.union (re.+ (re.* (re.* (re.+ (re.+ (str.to_re "''")))))) (re.* (re.+ (re.* (re.+ (re.union (str.to_re "(((") (str.to_re "))"))))))) (re.union (re.union (re.+ (re.* (re.union (re.* (str.to_re "*")) (re.union (str.to_re "+") (str.to_re ",,,"))))) (re.union (re.union (re.union (re.+ (str.to_re "---")) (re.* (str.to_re "..."))) (re.union (re.+ (str.to_re "/")) (re.+ (str.to_re ":::")))) (re.* (re.* (re.* (str.to_re ";;")))))) (re.* (re.+ (re.* (re.+ (re.* (str.to_re "<<")))))))))) (re.+ (re.+ (re.union (re.union (re.+ (re.+ (re.union (re.* (re.+ (str.to_re "=="))) (re.+ (re.+ (str.to_re ">>>")))))) (re.* (re.+ (re.union (re.* (re.union (str.to_re "??") (str.to_re "@@@"))) (re.union (re.union (str.to_re "[[[") (str.to_re "\\\\")) (re.+ (str.to_re "]"))))))) (re.+ (re.+ (re.+ (re.+ (re.* (re.* (str.to_re "^^^"))))))))))) (re.+ (re.* (re.union (re.* (re.+ (re.* (re.+ (re.union (re.union (re.union (str.to_re "__") (str.to_re "``")) (re.* (str.to_re "{{"))) (re.union (re.union (str.to_re "|||") (str.to_re "}}}")) (re.* (str.to_re "~")))))))) (re.+ (re.* (re.+ (re.* (re.* (re.union (re.union (str.to_re "000") (str.to_re "111")) (re.+ (str.to_re "22"))))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
