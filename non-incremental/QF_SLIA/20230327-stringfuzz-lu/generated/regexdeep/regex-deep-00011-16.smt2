(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (re.* (re.+ (re.+ (re.+ (re.union (re.union (re.union (re.* (re.union (str.to_re "0") (str.to_re "111"))) (re.union (re.+ (str.to_re "2")) (re.* (str.to_re "3")))) (re.union (re.union (re.+ (str.to_re "4")) (re.union (str.to_re "555") (str.to_re "6"))) (re.+ (re.union (str.to_re "77") (str.to_re "8"))))) (re.+ (re.+ (re.+ (re.union (str.to_re "9") (str.to_re "aaa")))))))))))) (re.union (re.+ (re.* (re.* (re.union (re.+ (re.* (re.union (re.* (re.+ (re.+ (str.to_re "bbb")))) (re.* (re.* (re.+ (str.to_re "cc"))))))) (re.* (re.union (re.union (re.+ (re.* (re.union (str.to_re "ddd") (str.to_re "eee")))) (re.* (re.+ (re.union (str.to_re "fff") (str.to_re "g"))))) (re.union (re.union (re.* (re.union (str.to_re "hhh") (str.to_re "iii"))) (re.union (re.union (str.to_re "jjj") (str.to_re "k")) (re.+ (str.to_re "ll")))) (re.union (re.* (re.+ (str.to_re "mmm"))) (re.union (re.* (str.to_re "nnn")) (re.union (str.to_re "o") (str.to_re "pp"))))))))))) (re.+ (re.union (re.union (re.union (re.+ (re.+ (re.union (re.* (re.+ (re.+ (str.to_re "qqq")))) (re.* (re.* (re.* (str.to_re "rr"))))))) (re.+ (re.* (re.* (re.+ (re.union (re.union (str.to_re "s") (str.to_re "ttt")) (re.union (str.to_re "uu") (str.to_re "vvv")))))))) (re.* (re.* (re.* (re.+ (re.union (re.+ (re.union (str.to_re "ww") (str.to_re "xx"))) (re.union (re.union (str.to_re "yy") (str.to_re "zzz")) (re.union (str.to_re "A") (str.to_re "B"))))))))) (re.union (re.* (re.* (re.union (re.* (re.union (re.union (re.union (str.to_re "C") (str.to_re "DD")) (re.union (str.to_re "EEE") (str.to_re "FFF"))) (re.+ (re.+ (str.to_re "G"))))) (re.+ (re.* (re.+ (re.* (str.to_re "HHH")))))))) (re.union (re.union (re.+ (re.+ (re.+ (re.* (re.* (str.to_re "III")))))) (re.union (re.* (re.* (re.+ (re.+ (str.to_re "JJ"))))) (re.union (re.* (re.* (re.+ (str.to_re "K")))) (re.+ (re.* (re.union (str.to_re "L") (str.to_re "MMM"))))))) (re.+ (re.* (re.* (re.+ (re.+ (re.union (str.to_re "NNN") (str.to_re "O")))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
