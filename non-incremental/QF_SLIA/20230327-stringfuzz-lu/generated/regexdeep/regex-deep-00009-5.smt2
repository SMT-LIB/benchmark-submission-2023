(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (re.* (re.+ (re.union (re.+ (re.+ (re.+ (re.+ (str.to_re "00"))))) (re.* (re.union (re.+ (re.* (str.to_re "1"))) (re.+ (re.union (str.to_re "22") (str.to_re "3"))))))))) (re.union (re.union (re.union (re.union (re.union (re.+ (re.union (re.+ (str.to_re "44")) (re.+ (str.to_re "55")))) (re.+ (re.* (re.* (str.to_re "666"))))) (re.union (re.* (re.* (re.+ (str.to_re "777")))) (re.union (re.+ (re.union (str.to_re "8") (str.to_re "9"))) (re.+ (re.union (str.to_re "a") (str.to_re "b")))))) (re.* (re.* (re.+ (re.union (re.* (str.to_re "ccc")) (re.union (str.to_re "ddd") (str.to_re "ee"))))))) (re.* (re.union (re.+ (re.* (re.union (re.+ (str.to_re "f")) (re.+ (str.to_re "ggg"))))) (re.union (re.union (re.union (re.* (str.to_re "hhh")) (re.* (str.to_re "ii"))) (re.* (re.* (str.to_re "jj")))) (re.union (re.* (re.union (str.to_re "kkk") (str.to_re "ll"))) (re.union (re.union (str.to_re "m") (str.to_re "nn")) (re.union (str.to_re "oo") (str.to_re "pp")))))))) (re.union (re.+ (re.* (re.+ (re.+ (re.+ (re.+ (str.to_re "q"))))))) (re.+ (re.+ (re.* (re.union (re.+ (re.union (str.to_re "rrr") (str.to_re "s"))) (re.* (re.union (str.to_re "t") (str.to_re "u")))))))))) (re.union (re.union (re.+ (re.union (re.* (re.* (re.+ (re.+ (re.+ (str.to_re "v")))))) (re.* (re.* (re.* (re.union (re.+ (str.to_re "www")) (re.+ (str.to_re "xx")))))))) (re.* (re.union (re.* (re.union (re.union (re.+ (re.union (str.to_re "y") (str.to_re "z"))) (re.* (re.+ (str.to_re "AA")))) (re.union (re.union (re.union (str.to_re "B") (str.to_re "C")) (re.* (str.to_re "DDD"))) (re.union (re.+ (str.to_re "EEE")) (re.* (str.to_re "FF")))))) (re.union (re.union (re.+ (re.+ (re.+ (str.to_re "GG")))) (re.* (re.+ (re.+ (str.to_re "HH"))))) (re.+ (re.+ (re.+ (re.* (str.to_re "III"))))))))) (re.+ (re.union (re.union (re.union (re.union (re.* (re.union (re.union (str.to_re "J") (str.to_re "KK")) (re.* (str.to_re "LLL")))) (re.union (re.union (re.+ (str.to_re "MMM")) (re.* (str.to_re "NN"))) (re.+ (re.+ (str.to_re "O"))))) (re.union (re.* (re.* (re.* (str.to_re "P")))) (re.+ (re.union (re.+ (str.to_re "QQQ")) (re.* (str.to_re "R")))))) (re.union (re.* (re.+ (re.union (re.+ (str.to_re "S")) (re.union (str.to_re "TT") (str.to_re "UUU"))))) (re.* (re.+ (re.+ (re.+ (str.to_re "VVV"))))))) (re.+ (re.+ (re.+ (re.+ (re.* (re.union (str.to_re "WWW") (str.to_re "XX")))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
