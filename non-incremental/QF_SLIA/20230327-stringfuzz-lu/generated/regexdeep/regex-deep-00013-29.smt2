(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (re.+ (re.+ (re.* (re.+ (re.+ (re.union (re.union (re.+ (re.* (re.union (re.+ (str.to_re "0")) (re.union (str.to_re "111") (str.to_re "222"))))) (re.union (re.union (re.* (re.union (str.to_re "333") (str.to_re "4"))) (re.* (re.+ (str.to_re "555")))) (re.+ (re.+ (re.union (str.to_re "666") (str.to_re "77")))))) (re.* (re.+ (re.+ (re.* (re.union (str.to_re "888") (str.to_re "99")))))))))))) (re.union (re.* (re.union (re.* (re.+ (re.+ (re.union (re.* (re.* (re.union (re.* (str.to_re "aaa")) (re.+ (str.to_re "bb"))))) (re.+ (re.* (re.* (re.union (str.to_re "cc") (str.to_re "d"))))))))) (re.union (re.union (re.+ (re.* (re.* (re.union (re.* (re.+ (str.to_re "e"))) (re.+ (re.* (str.to_re "ff"))))))) (re.+ (re.* (re.union (re.+ (re.union (re.union (str.to_re "ggg") (str.to_re "h")) (re.+ (str.to_re "i")))) (re.+ (re.union (re.+ (str.to_re "jjj")) (re.* (str.to_re "k")))))))) (re.union (re.+ (re.+ (re.+ (re.+ (re.union (re.union (str.to_re "ll") (str.to_re "m")) (re.* (str.to_re "nnn"))))))) (re.union (re.union (re.* (re.union (re.* (re.union (str.to_re "ooo") (str.to_re "pp"))) (re.* (re.* (str.to_re "qqq"))))) (re.* (re.+ (re.* (re.union (str.to_re "rr") (str.to_re "s")))))) (re.union (re.+ (re.* (re.* (re.* (str.to_re "tt"))))) (re.union (re.+ (re.+ (re.union (str.to_re "uu") (str.to_re "vv")))) (re.* (re.union (re.+ (str.to_re "ww")) (re.* (str.to_re "xxx"))))))))))) (re.* (re.+ (re.* (re.+ (re.union (re.+ (re.union (re.union (re.* (re.+ (str.to_re "yyy"))) (re.* (re.+ (str.to_re "z")))) (re.union (re.* (re.+ (str.to_re "AA"))) (re.union (re.* (str.to_re "B")) (re.union (str.to_re "CC") (str.to_re "DDD")))))) (re.union (re.union (re.* (re.union (re.* (str.to_re "EEE")) (re.+ (str.to_re "F")))) (re.* (re.+ (re.* (str.to_re "G"))))) (re.* (re.union (re.* (re.+ (str.to_re "HH"))) (re.union (re.+ (str.to_re "III")) (re.* (str.to_re "J")))))))))))))) (re.union (re.* (re.+ (re.* (re.* (re.+ (re.union (re.* (re.* (re.union (re.+ (re.* (re.* (str.to_re "KK")))) (re.* (re.* (re.* (str.to_re "LL"))))))) (re.+ (re.* (re.+ (re.union (re.union (re.+ (str.to_re "MM")) (re.+ (str.to_re "NNN"))) (re.* (re.union (str.to_re "O") (str.to_re "P"))))))))))))) (re.* (re.union (re.union (re.* (re.union (re.+ (re.* (re.* (re.* (re.union (re.union (re.* (str.to_re "QQ")) (re.union (str.to_re "RR") (str.to_re "SS"))) (re.union (re.* (str.to_re "TT")) (re.union (str.to_re "UU") (str.to_re "VV")))))))) (re.* (re.union (re.+ (re.union (re.+ (re.union (re.* (str.to_re "WW")) (re.union (str.to_re "X") (str.to_re "YY")))) (re.+ (re.+ (re.+ (str.to_re "Z")))))) (re.+ (re.union (re.+ (re.* (re.+ (str.to_re "!!!")))) (re.* (re.+ (re.union (str.to_re """") (str.to_re "#")))))))))) (re.+ (re.union (re.union (re.* (re.* (re.+ (re.* (re.+ (re.union (str.to_re "$$$") (str.to_re "%%%"))))))) (re.union (re.* (re.union (re.union (re.union (re.* (str.to_re "&")) (re.+ (str.to_re "'"))) (re.+ (re.* (str.to_re "((")))) (re.* (re.+ (re.+ (str.to_re "))")))))) (re.* (re.* (re.+ (re.union (re.* (str.to_re "***")) (re.* (str.to_re "+")))))))) (re.union (re.+ (re.+ (re.+ (re.+ (re.union (re.union (str.to_re ",,,") (str.to_re "--")) (re.union (str.to_re "..") (str.to_re "///"))))))) (re.union (re.* (re.+ (re.* (re.+ (re.union (str.to_re "::") (str.to_re ";;")))))) (re.* (re.+ (re.* (re.+ (re.+ (str.to_re "<<"))))))))))) (re.+ (re.+ (re.* (re.union (re.* (re.* (re.+ (re.+ (re.* (re.union (str.to_re "=") (str.to_re ">>>"))))))) (re.* (re.* (re.+ (re.+ (re.union (re.+ (str.to_re "???")) (re.* (str.to_re "@@@")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
