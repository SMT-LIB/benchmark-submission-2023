(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (re.union (re.* (re.* (re.* (re.+ (re.* (re.* (re.union (re.union (re.+ (re.union (str.to_re "000") (str.to_re "1"))) (re.+ (re.+ (str.to_re "22")))) (re.* (re.union (re.union (str.to_re "333") (str.to_re "44")) (re.+ (str.to_re "5"))))))))))) (re.* (re.+ (re.+ (re.+ (re.+ (re.+ (re.+ (re.union (re.union (re.* (str.to_re "66")) (re.* (str.to_re "77"))) (re.union (re.* (str.to_re "888")) (re.union (str.to_re "9") (str.to_re "aa")))))))))))))) (re.* (re.+ (re.* (re.union (re.union (re.union (re.+ (re.union (re.union (re.+ (re.union (re.+ (re.+ (str.to_re "bbb"))) (re.union (re.union (str.to_re "ccc") (str.to_re "dd")) (re.* (str.to_re "eee"))))) (re.* (re.union (re.union (re.union (str.to_re "ff") (str.to_re "g")) (re.+ (str.to_re "h"))) (re.* (re.* (str.to_re "iii")))))) (re.+ (re.* (re.union (re.* (re.union (str.to_re "jjj") (str.to_re "k"))) (re.+ (re.union (str.to_re "lll") (str.to_re "m")))))))) (re.union (re.union (re.* (re.* (re.union (re.* (re.+ (str.to_re "nn"))) (re.union (re.union (str.to_re "ooo") (str.to_re "pp")) (re.union (str.to_re "qq") (str.to_re "rr")))))) (re.union (re.union (re.+ (re.union (re.+ (str.to_re "s")) (re.+ (str.to_re "ttt")))) (re.+ (re.+ (re.+ (str.to_re "u"))))) (re.union (re.* (re.* (re.union (str.to_re "v") (str.to_re "w")))) (re.* (re.+ (re.+ (str.to_re "xxx"))))))) (re.union (re.union (re.+ (re.* (re.union (re.union (str.to_re "yy") (str.to_re "zz")) (re.+ (str.to_re "A"))))) (re.union (re.+ (re.* (re.* (str.to_re "BBB")))) (re.union (re.* (re.+ (str.to_re "CC"))) (re.+ (re.union (str.to_re "DDD") (str.to_re "EEE")))))) (re.+ (re.+ (re.+ (re.+ (re.union (str.to_re "FFF") (str.to_re "GGG"))))))))) (re.+ (re.union (re.* (re.+ (re.* (re.+ (re.* (re.* (str.to_re "HH"))))))) (re.union (re.+ (re.union (re.union (re.union (re.union (str.to_re "I") (str.to_re "J")) (re.+ (str.to_re "K"))) (re.union (re.+ (str.to_re "LL")) (re.union (str.to_re "MM") (str.to_re "NNN")))) (re.* (re.+ (re.+ (str.to_re "O")))))) (re.+ (re.+ (re.union (re.+ (re.union (str.to_re "P") (str.to_re "QQQ"))) (re.* (re.* (str.to_re "RR")))))))))) (re.union (re.* (re.* (re.* (re.union (re.+ (re.+ (re.union (re.* (str.to_re "SSS")) (re.+ (str.to_re "T"))))) (re.+ (re.union (re.* (re.+ (str.to_re "U"))) (re.* (re.union (str.to_re "VVV") (str.to_re "WWW"))))))))) (re.+ (re.union (re.+ (re.+ (re.union (re.+ (re.* (re.* (str.to_re "XX")))) (re.union (re.* (re.* (str.to_re "Y"))) (re.union (re.* (str.to_re "ZZ")) (re.+ (str.to_re "!"))))))) (re.* (re.* (re.union (re.+ (re.+ (re.+ (str.to_re """""")))) (re.* (re.+ (re.* (str.to_re "##")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
