(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.union (re.union (re.+ (re.+ (re.* (re.* (re.+ (re.+ (re.union (str.to_re "00") (str.to_re "11")))))))) (re.+ (re.+ (re.union (re.union (re.union (re.+ (re.union (str.to_re "22") (str.to_re "33"))) (re.+ (re.* (str.to_re "4")))) (re.* (re.* (re.* (str.to_re "555"))))) (re.* (re.* (re.union (re.* (str.to_re "666")) (re.union (str.to_re "777") (str.to_re "88"))))))))) (re.union (re.* (re.+ (re.union (re.+ (re.union (re.union (re.union (str.to_re "99") (str.to_re "a")) (re.* (str.to_re "bb"))) (re.union (re.* (str.to_re "cc")) (re.+ (str.to_re "d"))))) (re.* (re.* (re.* (re.union (str.to_re "ee") (str.to_re "ff")))))))) (re.union (re.+ (re.* (re.* (re.union (re.union (re.* (str.to_re "ggg")) (re.+ (str.to_re "h"))) (re.+ (re.* (str.to_re "i"))))))) (re.union (re.union (re.union (re.+ (re.union (re.* (str.to_re "j")) (re.+ (str.to_re "kkk")))) (re.+ (re.union (re.+ (str.to_re "lll")) (re.* (str.to_re "mm"))))) (re.+ (re.union (re.+ (re.+ (str.to_re "nn"))) (re.* (re.union (str.to_re "ooo") (str.to_re "pp")))))) (re.+ (re.+ (re.union (re.union (re.+ (str.to_re "qq")) (re.* (str.to_re "rr"))) (re.* (re.+ (str.to_re "s")))))))))) (re.+ (re.+ (re.union (re.* (re.union (re.union (re.union (re.+ (re.union (str.to_re "ttt") (str.to_re "uuu"))) (re.* (re.* (str.to_re "v")))) (re.* (re.+ (re.union (str.to_re "w") (str.to_re "xx"))))) (re.union (re.union (re.* (re.* (str.to_re "yy"))) (re.+ (re.* (str.to_re "z")))) (re.union (re.union (re.* (str.to_re "A")) (re.union (str.to_re "BB") (str.to_re "CC"))) (re.* (re.union (str.to_re "DDD") (str.to_re "E"))))))) (re.union (re.union (re.+ (re.+ (re.* (re.+ (str.to_re "F"))))) (re.union (re.* (re.* (re.union (str.to_re "GGG") (str.to_re "H")))) (re.+ (re.union (re.* (str.to_re "I")) (re.union (str.to_re "JJ") (str.to_re "KK")))))) (re.* (re.* (re.+ (re.* (re.* (str.to_re "L"))))))))))) (re.+ (re.+ (re.* (re.union (re.* (re.union (re.* (re.union (re.union (re.union (str.to_re "M") (str.to_re "NNN")) (re.union (str.to_re "OO") (str.to_re "PP"))) (re.* (re.+ (str.to_re "QQ"))))) (re.* (re.+ (re.union (re.+ (str.to_re "RR")) (re.+ (str.to_re "S"))))))) (re.+ (re.union (re.union (re.* (re.union (re.* (str.to_re "T")) (re.+ (str.to_re "U")))) (re.+ (re.* (re.* (str.to_re "VV"))))) (re.+ (re.* (re.union (re.* (str.to_re "W")) (re.+ (str.to_re "X"))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
