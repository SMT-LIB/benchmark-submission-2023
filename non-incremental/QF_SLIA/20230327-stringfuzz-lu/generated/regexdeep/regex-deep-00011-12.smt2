(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (re.union (re.* (re.union (re.+ (re.union (re.* (re.union (re.union (re.+ (str.to_re "00")) (re.union (str.to_re "1") (str.to_re "22"))) (re.union (re.+ (str.to_re "3")) (re.+ (str.to_re "444"))))) (re.+ (re.* (re.+ (re.union (str.to_re "555") (str.to_re "666"))))))) (re.union (re.union (re.* (re.+ (re.* (re.+ (str.to_re "7"))))) (re.union (re.* (re.union (re.union (str.to_re "88") (str.to_re "9")) (re.+ (str.to_re "aaa")))) (re.* (re.* (re.union (str.to_re "b") (str.to_re "ccc")))))) (re.union (re.* (re.+ (re.* (re.* (str.to_re "dd"))))) (re.+ (re.+ (re.union (re.* (str.to_re "eee")) (re.+ (str.to_re "ff"))))))))) (re.union (re.union (re.* (re.union (re.union (re.union (re.* (re.union (str.to_re "ggg") (str.to_re "hh"))) (re.union (re.+ (str.to_re "i")) (re.+ (str.to_re "j")))) (re.* (re.union (re.union (str.to_re "kkk") (str.to_re "lll")) (re.+ (str.to_re "m"))))) (re.union (re.union (re.* (re.+ (str.to_re "n"))) (re.* (re.union (str.to_re "oo") (str.to_re "ppp")))) (re.* (re.* (re.* (str.to_re "qqq"))))))) (re.union (re.+ (re.union (re.union (re.* (re.+ (str.to_re "rrr"))) (re.* (re.+ (str.to_re "sss")))) (re.union (re.+ (re.union (str.to_re "ttt") (str.to_re "u"))) (re.union (re.union (str.to_re "vv") (str.to_re "w")) (re.+ (str.to_re "x")))))) (re.* (re.* (re.* (re.+ (re.+ (str.to_re "y")))))))) (re.union (re.union (re.union (re.+ (re.union (re.* (re.union (str.to_re "z") (str.to_re "AAA"))) (re.+ (re.* (str.to_re "BB"))))) (re.* (re.+ (re.* (re.union (str.to_re "CCC") (str.to_re "D")))))) (re.union (re.union (re.* (re.union (re.+ (str.to_re "EE")) (re.+ (str.to_re "FF")))) (re.union (re.+ (re.union (str.to_re "GG") (str.to_re "HHH"))) (re.* (re.* (str.to_re "II"))))) (re.* (re.union (re.+ (re.+ (str.to_re "JJJ"))) (re.+ (re.* (str.to_re "K"))))))) (re.+ (re.+ (re.union (re.* (re.* (re.union (str.to_re "LL") (str.to_re "MM")))) (re.+ (re.* (re.union (str.to_re "N") (str.to_re "O")))))))))) (re.* (re.* (re.* (re.* (re.+ (re.* (re.union (re.* (re.union (str.to_re "PP") (str.to_re "QQ"))) (re.union (re.+ (str.to_re "RR")) (re.* (str.to_re "S")))))))))))) (re.+ (re.union (re.* (re.* (re.union (re.union (re.union (re.union (re.+ (re.* (re.+ (str.to_re "TTT")))) (re.union (re.* (re.* (str.to_re "UUU"))) (re.union (re.* (str.to_re "VVV")) (re.+ (str.to_re "WW"))))) (re.union (re.union (re.union (re.union (str.to_re "XXX") (str.to_re "Y")) (re.+ (str.to_re "ZZZ"))) (re.* (re.* (str.to_re "!!")))) (re.union (re.+ (re.union (str.to_re """""""") (str.to_re "##"))) (re.union (re.union (str.to_re "$$") (str.to_re "%%")) (re.union (str.to_re "&&") (str.to_re "'''")))))) (re.* (re.+ (re.+ (re.* (re.+ (str.to_re "((("))))))) (re.union (re.union (re.+ (re.+ (re.+ (re.+ (str.to_re ")"))))) (re.* (re.* (re.union (re.union (str.to_re "**") (str.to_re "++")) (re.union (str.to_re ",,") (str.to_re "---")))))) (re.union (re.+ (re.union (re.+ (re.+ (str.to_re "..."))) (re.union (re.+ (str.to_re "///")) (re.union (str.to_re "::") (str.to_re ";;"))))) (re.union (re.* (re.+ (re.union (str.to_re "<<") (str.to_re "=")))) (re.union (re.* (re.+ (str.to_re ">>>"))) (re.+ (re.+ (str.to_re "???")))))))))) (re.union (re.+ (re.union (re.* (re.union (re.* (re.union (re.* (re.union (str.to_re "@") (str.to_re "[["))) (re.union (re.* (str.to_re "\\\\\\")) (re.* (str.to_re "]"))))) (re.+ (re.+ (re.+ (re.+ (str.to_re "^^"))))))) (re.+ (re.* (re.+ (re.union (re.* (re.+ (str.to_re "_"))) (re.+ (re.+ (str.to_re "``"))))))))) (re.+ (re.* (re.union (re.union (re.* (re.+ (re.+ (re.+ (str.to_re "{{"))))) (re.* (re.union (re.+ (re.+ (str.to_re "|"))) (re.+ (re.union (str.to_re "}") (str.to_re "~~")))))) (re.* (re.union (re.* (re.* (re.* (str.to_re "000")))) (re.* (re.+ (re.* (str.to_re "11")))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
