(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (re.+ (re.union (re.* (re.* (re.* (re.+ (re.* (re.+ (re.+ (str.to_re "00")))))))) (re.* (re.+ (re.union (re.* (re.+ (re.* (re.+ (str.to_re "11"))))) (re.+ (re.* (re.union (re.+ (str.to_re "2")) (re.* (str.to_re "333")))))))))) (re.* (re.* (re.* (re.+ (re.+ (re.* (re.+ (re.+ (re.union (str.to_re "4") (str.to_re "5")))))))))))) (re.+ (re.union (re.union (re.+ (re.union (re.union (re.union (re.union (re.union (re.+ (re.+ (str.to_re "6"))) (re.* (re.union (str.to_re "777") (str.to_re "888")))) (re.+ (re.+ (re.+ (str.to_re "99"))))) (re.union (re.union (re.* (re.* (str.to_re "aaa"))) (re.union (re.* (str.to_re "bbb")) (re.* (str.to_re "c")))) (re.* (re.+ (re.union (str.to_re "dd") (str.to_re "e")))))) (re.* (re.* (re.+ (re.union (re.* (str.to_re "ff")) (re.union (str.to_re "g") (str.to_re "hh"))))))) (re.* (re.union (re.+ (re.* (re.* (re.union (str.to_re "i") (str.to_re "j"))))) (re.+ (re.* (re.* (re.* (str.to_re "kk"))))))))) (re.* (re.+ (re.* (re.+ (re.union (re.+ (re.union (re.union (str.to_re "ll") (str.to_re "mmm")) (re.union (str.to_re "nnn") (str.to_re "ooo")))) (re.* (re.union (re.union (str.to_re "pp") (str.to_re "qq")) (re.union (str.to_re "r") (str.to_re "ss")))))))))) (re.* (re.union (re.+ (re.* (re.* (re.union (re.union (re.* (re.* (str.to_re "t"))) (re.+ (re.* (str.to_re "uu")))) (re.* (re.* (re.* (str.to_re "vvv")))))))) (re.union (re.* (re.+ (re.* (re.+ (re.union (re.union (str.to_re "ww") (str.to_re "xx")) (re.union (str.to_re "yyy") (str.to_re "zz"))))))) (re.+ (re.union (re.* (re.+ (re.union (re.+ (str.to_re "AAA")) (re.union (str.to_re "BBB") (str.to_re "CCC"))))) (re.* (re.* (re.union (re.union (str.to_re "DD") (str.to_re "E")) (re.* (str.to_re "F")))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
