(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (re.* (re.+ (re.union (re.union (re.union (re.union (re.* (re.* (str.to_re "000"))) (re.+ (re.union (str.to_re "1") (str.to_re "22")))) (re.* (re.+ (re.union (str.to_re "33") (str.to_re "44"))))) (re.+ (re.* (re.+ (re.* (str.to_re "555")))))) (re.union (re.+ (re.union (re.* (re.union (str.to_re "6") (str.to_re "7"))) (re.+ (re.* (str.to_re "8"))))) (re.union (re.union (re.+ (re.union (str.to_re "999") (str.to_re "aaa"))) (re.+ (re.* (str.to_re "b")))) (re.+ (re.+ (re.union (str.to_re "cc") (str.to_re "dd"))))))))) (re.+ (re.union (re.+ (re.* (re.+ (re.union (re.* (re.+ (str.to_re "e"))) (re.union (re.+ (str.to_re "f")) (re.* (str.to_re "ggg"))))))) (re.union (re.union (re.* (re.union (re.* (re.* (str.to_re "hh"))) (re.union (re.* (str.to_re "iii")) (re.+ (str.to_re "j"))))) (re.* (re.union (re.union (re.* (str.to_re "k")) (re.union (str.to_re "lll") (str.to_re "m"))) (re.union (re.* (str.to_re "nn")) (re.* (str.to_re "o")))))) (re.* (re.+ (re.+ (re.+ (re.+ (str.to_re "ppp"))))))))))) (re.+ (re.* (re.union (re.* (re.+ (re.union (re.union (re.+ (re.+ (re.+ (str.to_re "qq")))) (re.union (re.union (re.* (str.to_re "r")) (re.union (str.to_re "ss") (str.to_re "tt"))) (re.+ (re.* (str.to_re "uu"))))) (re.* (re.union (re.union (re.union (str.to_re "v") (str.to_re "ww")) (re.* (str.to_re "xxx"))) (re.* (re.* (str.to_re "yyy")))))))) (re.* (re.union (re.* (re.+ (re.+ (re.* (re.* (str.to_re "zz")))))) (re.* (re.union (re.union (re.* (re.union (str.to_re "AA") (str.to_re "BBB"))) (re.* (re.union (str.to_re "CC") (str.to_re "DD")))) (re.union (re.union (re.union (str.to_re "EEE") (str.to_re "FFF")) (re.* (str.to_re "G"))) (re.union (re.+ (str.to_re "HHH")) (re.union (str.to_re "II") (str.to_re "J"))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
