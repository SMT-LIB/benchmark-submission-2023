(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (re.* (re.union (re.union (re.union (re.union (re.+ (re.+ (re.+ (re.+ (re.+ (re.+ (re.* (str.to_re "000")))))))) (re.union (re.union (re.+ (re.union (re.* (re.+ (re.+ (str.to_re "11")))) (re.union (re.union (re.union (str.to_re "222") (str.to_re "33")) (re.* (str.to_re "444"))) (re.+ (re.* (str.to_re "55")))))) (re.* (re.union (re.* (re.union (re.+ (str.to_re "6")) (re.+ (str.to_re "777")))) (re.+ (re.+ (re.* (str.to_re "8"))))))) (re.union (re.* (re.union (re.+ (re.+ (re.* (str.to_re "9")))) (re.union (re.+ (re.+ (str.to_re "a"))) (re.union (re.union (str.to_re "bb") (str.to_re "ccc")) (re.* (str.to_re "ddd")))))) (re.* (re.+ (re.+ (re.* (re.+ (str.to_re "ee"))))))))) (re.* (re.union (re.+ (re.+ (re.* (re.+ (re.union (re.* (str.to_re "f")) (re.* (str.to_re "g"))))))) (re.union (re.* (re.* (re.union (re.union (re.* (str.to_re "h")) (re.* (str.to_re "i"))) (re.* (re.union (str.to_re "j") (str.to_re "kkk")))))) (re.* (re.+ (re.+ (re.union (re.union (str.to_re "l") (str.to_re "mmm")) (re.+ (str.to_re "nnn")))))))))) (re.union (re.union (re.* (re.+ (re.+ (re.* (re.* (re.+ (re.* (str.to_re "o")))))))) (re.* (re.union (re.+ (re.union (re.* (re.union (re.* (str.to_re "ppp")) (re.union (str.to_re "q") (str.to_re "rr")))) (re.* (re.union (re.+ (str.to_re "ss")) (re.union (str.to_re "ttt") (str.to_re "uuu")))))) (re.+ (re.* (re.+ (re.union (re.* (str.to_re "v")) (re.union (str.to_re "www") (str.to_re "x"))))))))) (re.union (re.+ (re.+ (re.union (re.+ (re.+ (re.union (re.* (str.to_re "yyy")) (re.union (str.to_re "zzz") (str.to_re "AAA"))))) (re.union (re.* (re.* (re.union (str.to_re "B") (str.to_re "CC")))) (re.union (re.union (re.* (str.to_re "D")) (re.+ (str.to_re "E"))) (re.+ (re.union (str.to_re "F") (str.to_re "GGG")))))))) (re.* (re.* (re.union (re.+ (re.+ (re.+ (re.union (str.to_re "H") (str.to_re "II"))))) (re.+ (re.* (re.union (re.* (str.to_re "JJJ")) (re.* (str.to_re "K"))))))))))) (re.* (re.* (re.+ (re.union (re.* (re.* (re.+ (re.* (re.union (re.* (str.to_re "LLL")) (re.+ (str.to_re "MM"))))))) (re.+ (re.+ (re.union (re.union (re.+ (re.* (str.to_re "NN"))) (re.union (re.+ (str.to_re "OOO")) (re.+ (str.to_re "PP")))) (re.* (re.union (re.union (str.to_re "QQQ") (str.to_re "R")) (re.union (str.to_re "SS") (str.to_re "TT"))))))))))))) (re.* (re.+ (re.+ (re.+ (re.union (re.+ (re.union (re.union (re.* (re.* (re.* (re.+ (str.to_re "UUU"))))) (re.union (re.* (re.* (re.* (str.to_re "VVV")))) (re.* (re.union (re.union (str.to_re "WW") (str.to_re "X")) (re.union (str.to_re "YYY") (str.to_re "ZZ")))))) (re.union (re.union (re.+ (re.+ (re.+ (str.to_re "!")))) (re.union (re.* (re.union (str.to_re """""") (str.to_re "##"))) (re.union (re.+ (str.to_re "$$")) (re.+ (str.to_re "%"))))) (re.* (re.+ (re.* (re.union (str.to_re "&") (str.to_re "''")))))))) (re.union (re.* (re.* (re.* (re.union (re.union (re.+ (str.to_re "(")) (re.union (str.to_re "))") (str.to_re "**"))) (re.union (re.+ (str.to_re "+++")) (re.* (str.to_re ","))))))) (re.* (re.union (re.+ (re.* (re.* (re.+ (str.to_re "-"))))) (re.* (re.* (re.union (re.* (str.to_re "...")) (re.union (str.to_re "///") (str.to_re "::"))))))))))))))) (re.+ (re.* (re.* (re.* (re.union (re.* (re.+ (re.+ (re.* (re.* (re.union (re.+ (re.* (re.* (str.to_re ";;")))) (re.* (re.+ (re.* (str.to_re "<<<")))))))))) (re.+ (re.* (re.union (re.* (re.+ (re.+ (re.* (re.* (re.* (str.to_re "==="))))))) (re.* (re.+ (re.union (re.+ (re.+ (re.* (str.to_re ">")))) (re.* (re.union (re.union (str.to_re "?") (str.to_re "@@")) (re.union (str.to_re "[[[") (str.to_re "\\\\\\"))))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
