(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.* (re.union (re.+ (re.union (re.union (re.* (re.* (re.+ (re.union (re.union (re.* (str.to_re "000")) (re.union (str.to_re "1") (str.to_re "222"))) (re.union (re.union (str.to_re "33") (str.to_re "4")) (re.union (str.to_re "55") (str.to_re "666"))))))) (re.union (re.+ (re.* (re.* (re.union (re.+ (str.to_re "7")) (re.+ (str.to_re "888")))))) (re.* (re.union (re.* (re.+ (re.union (str.to_re "999") (str.to_re "aa")))) (re.* (re.union (re.+ (str.to_re "bb")) (re.+ (str.to_re "c")))))))) (re.* (re.+ (re.* (re.union (re.+ (re.* (re.union (str.to_re "d") (str.to_re "e")))) (re.+ (re.+ (re.+ (str.to_re "ff")))))))))) (re.union (re.union (re.+ (re.* (re.* (re.union (re.* (re.* (re.* (str.to_re "g")))) (re.+ (re.+ (re.* (str.to_re "h")))))))) (re.* (re.+ (re.* (re.+ (re.+ (re.union (re.union (str.to_re "i") (str.to_re "jj")) (re.+ (str.to_re "kkk"))))))))) (re.* (re.* (re.union (re.union (re.* (re.* (re.union (re.+ (str.to_re "l")) (re.union (str.to_re "mm") (str.to_re "nn"))))) (re.union (re.union (re.+ (re.union (str.to_re "o") (str.to_re "ppp"))) (re.+ (re.union (str.to_re "qqq") (str.to_re "rr")))) (re.* (re.union (re.+ (str.to_re "s")) (re.* (str.to_re "t")))))) (re.+ (re.union (re.+ (re.* (re.+ (str.to_re "uuu")))) (re.* (re.+ (re.union (str.to_re "v") (str.to_re "w")))))))))))) (re.* (re.+ (re.union (re.union (re.+ (re.union (re.* (re.union (re.union (re.* (re.+ (str.to_re "xxx"))) (re.+ (re.* (str.to_re "yy")))) (re.union (re.+ (re.union (str.to_re "zz") (str.to_re "AAA"))) (re.* (re.+ (str.to_re "B")))))) (re.union (re.union (re.* (re.+ (re.union (str.to_re "CC") (str.to_re "DD")))) (re.+ (re.union (re.+ (str.to_re "EE")) (re.* (str.to_re "F"))))) (re.* (re.* (re.union (re.* (str.to_re "G")) (re.union (str.to_re "H") (str.to_re "II")))))))) (re.+ (re.+ (re.+ (re.+ (re.union (re.+ (re.* (str.to_re "J"))) (re.* (re.* (str.to_re "KK"))))))))) (re.union (re.union (re.* (re.union (re.union (re.union (re.union (re.union (str.to_re "LLL") (str.to_re "MMM")) (re.* (str.to_re "N"))) (re.* (re.union (str.to_re "OOO") (str.to_re "PPP")))) (re.+ (re.* (re.+ (str.to_re "Q"))))) (re.+ (re.+ (re.union (re.union (str.to_re "RRR") (str.to_re "SSS")) (re.union (str.to_re "TT") (str.to_re "UUU"))))))) (re.+ (re.+ (re.* (re.+ (re.* (re.* (str.to_re "V")))))))) (re.union (re.* (re.+ (re.+ (re.union (re.+ (re.* (str.to_re "W"))) (re.union (re.* (str.to_re "X")) (re.union (str.to_re "YYY") (str.to_re "ZZ"))))))) (re.+ (re.* (re.+ (re.* (re.+ (re.union (str.to_re "!!") (str.to_re """"""""))))))))))))) (re.+ (re.union (re.+ (re.* (re.+ (re.* (re.+ (re.union (re.* (re.+ (re.* (re.union (str.to_re "###") (str.to_re "$$"))))) (re.union (re.union (re.* (re.+ (str.to_re "%%%"))) (re.union (re.* (str.to_re "&")) (re.union (str.to_re "'''") (str.to_re "(")))) (re.+ (re.+ (re.* (str.to_re ")"))))))))))) (re.+ (re.union (re.+ (re.+ (re.+ (re.* (re.union (re.* (re.union (re.union (str.to_re "*") (str.to_re "+++")) (re.union (str.to_re ",,,") (str.to_re "-")))) (re.* (re.union (re.* (str.to_re "...")) (re.+ (str.to_re "///"))))))))) (re.union (re.* (re.* (re.* (re.* (re.* (re.* (re.union (str.to_re "::") (str.to_re ";")))))))) (re.union (re.union (re.+ (re.union (re.* (re.* (re.+ (str.to_re "<<")))) (re.+ (re.union (re.union (str.to_re "==") (str.to_re ">")) (re.+ (str.to_re "?")))))) (re.union (re.+ (re.* (re.union (re.union (str.to_re "@@") (str.to_re "[")) (re.union (str.to_re "\\\\") (str.to_re "]]"))))) (re.union (re.* (re.* (re.union (str.to_re "^^") (str.to_re "__")))) (re.union (re.+ (re.* (str.to_re "```"))) (re.+ (re.union (str.to_re "{") (str.to_re "|||"))))))) (re.+ (re.* (re.* (re.union (re.union (re.+ (str.to_re "}}")) (re.* (str.to_re "~~"))) (re.* (re.* (str.to_re "00"))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
