(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (re.union (re.* (re.+ (re.+ (re.union (re.+ (str.to_re "0")) (re.union (str.to_re "1") (str.to_re "22")))))) (re.+ (re.* (re.union (re.union (re.* (str.to_re "333")) (re.union (str.to_re "44") (str.to_re "555"))) (re.* (re.union (str.to_re "666") (str.to_re "77"))))))) (re.* (re.* (re.union (re.+ (re.* (re.+ (str.to_re "888")))) (re.union (re.union (re.* (str.to_re "99")) (re.union (str.to_re "a") (str.to_re "bbb"))) (re.* (re.union (str.to_re "c") (str.to_re "d"))))))))) (re.union (re.union (re.* (re.union (re.* (re.union (re.union (re.union (str.to_re "e") (str.to_re "ff")) (re.union (str.to_re "g") (str.to_re "hh"))) (re.union (re.* (str.to_re "iii")) (re.union (str.to_re "jjj") (str.to_re "kkk"))))) (re.union (re.union (re.union (re.+ (str.to_re "lll")) (re.+ (str.to_re "m"))) (re.+ (re.* (str.to_re "n")))) (re.* (re.* (re.union (str.to_re "ooo") (str.to_re "ppp"))))))) (re.union (re.* (re.* (re.* (re.+ (re.union (str.to_re "qqq") (str.to_re "rrr")))))) (re.union (re.* (re.+ (re.+ (re.* (str.to_re "s"))))) (re.* (re.+ (re.* (re.+ (str.to_re "ttt")))))))) (re.+ (re.+ (re.union (re.union (re.* (re.* (re.union (str.to_re "u") (str.to_re "v")))) (re.+ (re.union (re.union (str.to_re "ww") (str.to_re "xxx")) (re.* (str.to_re "yy"))))) (re.+ (re.+ (re.union (re.+ (str.to_re "zz")) (re.union (str.to_re "AAA") (str.to_re "B"))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
