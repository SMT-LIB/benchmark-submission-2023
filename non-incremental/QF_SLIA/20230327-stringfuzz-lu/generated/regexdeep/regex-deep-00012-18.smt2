(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.union (re.* (re.union (re.+ (re.union (re.* (re.* (re.union (re.union (re.union (re.* (str.to_re "000")) (re.+ (str.to_re "1"))) (re.* (re.* (str.to_re "222")))) (re.+ (re.+ (re.union (str.to_re "33") (str.to_re "4"))))))) (re.+ (re.* (re.union (re.+ (re.+ (re.union (str.to_re "5") (str.to_re "666")))) (re.* (re.+ (re.+ (str.to_re "77"))))))))) (re.union (re.* (re.union (re.* (re.union (re.+ (re.+ (re.+ (str.to_re "8")))) (re.* (re.+ (re.* (str.to_re "9")))))) (re.union (re.* (re.union (re.* (re.+ (str.to_re "a"))) (re.union (re.union (str.to_re "b") (str.to_re "ccc")) (re.* (str.to_re "dd"))))) (re.union (re.* (re.* (re.* (str.to_re "ee")))) (re.* (re.union (re.* (str.to_re "ff")) (re.* (str.to_re "g")))))))) (re.union (re.* (re.+ (re.* (re.* (re.union (re.union (str.to_re "hh") (str.to_re "i")) (re.+ (str.to_re "j"))))))) (re.* (re.* (re.* (re.+ (re.+ (re.+ (str.to_re "k"))))))))))) (re.* (re.+ (re.+ (re.* (re.union (re.+ (re.union (re.union (re.* (re.* (str.to_re "ll"))) (re.* (re.+ (str.to_re "mm")))) (re.* (re.union (re.+ (str.to_re "nn")) (re.+ (str.to_re "ooo")))))) (re.union (re.union (re.+ (re.union (re.+ (str.to_re "ppp")) (re.* (str.to_re "qqq")))) (re.union (re.union (re.union (str.to_re "rr") (str.to_re "ss")) (re.+ (str.to_re "tt"))) (re.union (re.union (str.to_re "u") (str.to_re "vv")) (re.union (str.to_re "www") (str.to_re "xxx"))))) (re.* (re.union (re.union (re.+ (str.to_re "yyy")) (re.union (str.to_re "zzz") (str.to_re "A"))) (re.* (re.* (str.to_re "BB"))))))))))))) (re.+ (re.+ (re.* (re.union (re.* (re.union (re.union (re.* (re.+ (re.* (re.union (re.union (str.to_re "CC") (str.to_re "D")) (re.+ (str.to_re "EEE")))))) (re.union (re.union (re.union (re.union (re.+ (str.to_re "F")) (re.+ (str.to_re "G"))) (re.* (re.union (str.to_re "HH") (str.to_re "II")))) (re.union (re.* (re.+ (str.to_re "JJJ"))) (re.+ (re.+ (str.to_re "KK"))))) (re.* (re.union (re.+ (re.union (str.to_re "L") (str.to_re "MMM"))) (re.union (re.union (str.to_re "NNN") (str.to_re "OO")) (re.* (str.to_re "PPP"))))))) (re.* (re.union (re.+ (re.union (re.union (re.union (str.to_re "QQ") (str.to_re "RR")) (re.* (str.to_re "SSS"))) (re.* (re.union (str.to_re "TT") (str.to_re "U"))))) (re.union (re.+ (re.* (re.+ (str.to_re "V")))) (re.* (re.+ (re.union (str.to_re "WWW") (str.to_re "X"))))))))) (re.* (re.union (re.* (re.* (re.union (re.+ (re.union (re.* (str.to_re "YYY")) (re.* (str.to_re "Z")))) (re.union (re.union (re.+ (str.to_re "!!")) (re.* (str.to_re """"""))) (re.+ (re.+ (str.to_re "#"))))))) (re.union (re.union (re.union (re.+ (re.union (re.* (str.to_re "$$")) (re.union (str.to_re "%%%") (str.to_re "&&&")))) (re.+ (re.union (re.* (str.to_re "'''")) (re.* (str.to_re "(("))))) (re.* (re.+ (re.* (re.+ (str.to_re "))")))))) (re.* (re.union (re.+ (re.* (re.union (str.to_re "**") (str.to_re "++")))) (re.* (re.union (re.union (str.to_re ",,,") (str.to_re "---")) (re.* (str.to_re ".."))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
