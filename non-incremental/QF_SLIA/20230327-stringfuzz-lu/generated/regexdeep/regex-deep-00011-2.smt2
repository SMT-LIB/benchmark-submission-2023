(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (re.* (re.+ (re.+ (re.+ (re.* (re.+ (re.union (re.+ (re.+ (str.to_re "0"))) (re.union (re.union (str.to_re "11") (str.to_re "22")) (re.* (str.to_re "3"))))))))))) (re.* (re.* (re.+ (re.union (re.union (re.* (re.* (re.+ (re.union (re.* (str.to_re "44")) (re.+ (str.to_re "55")))))) (re.+ (re.* (re.union (re.+ (re.+ (str.to_re "66"))) (re.* (re.union (str.to_re "7") (str.to_re "8"))))))) (re.* (re.+ (re.union (re.+ (re.union (re.+ (str.to_re "999")) (re.union (str.to_re "aaa") (str.to_re "bbb")))) (re.+ (re.* (re.union (str.to_re "c") (str.to_re "ddd")))))))))))) (re.+ (re.union (re.union (re.+ (re.union (re.union (re.union (re.+ (re.+ (re.union (re.+ (str.to_re "e")) (re.+ (str.to_re "f"))))) (re.+ (re.* (re.* (re.+ (str.to_re "gg")))))) (re.+ (re.+ (re.+ (re.+ (re.+ (str.to_re "h"))))))) (re.* (re.union (re.union (re.+ (re.* (re.union (str.to_re "ii") (str.to_re "j")))) (re.* (re.+ (re.+ (str.to_re "kkk"))))) (re.union (re.union (re.union (re.union (str.to_re "ll") (str.to_re "mm")) (re.union (str.to_re "nn") (str.to_re "o"))) (re.* (re.+ (str.to_re "p")))) (re.+ (re.union (re.union (str.to_re "qq") (str.to_re "r")) (re.union (str.to_re "s") (str.to_re "ttt"))))))))) (re.union (re.+ (re.+ (re.+ (re.+ (re.union (re.union (re.* (str.to_re "u")) (re.union (str.to_re "vvv") (str.to_re "w"))) (re.+ (re.union (str.to_re "xx") (str.to_re "y")))))))) (re.* (re.* (re.* (re.+ (re.+ (re.union (re.* (str.to_re "zzz")) (re.union (str.to_re "AAA") (str.to_re "B")))))))))) (re.+ (re.union (re.union (re.union (re.union (re.+ (re.* (re.* (re.* (str.to_re "C"))))) (re.union (re.* (re.+ (re.union (str.to_re "DDD") (str.to_re "EE")))) (re.union (re.union (re.* (str.to_re "FFF")) (re.* (str.to_re "GG"))) (re.* (re.+ (str.to_re "HHH")))))) (re.+ (re.+ (re.+ (re.union (re.+ (str.to_re "II")) (re.+ (str.to_re "JJJ"))))))) (re.* (re.union (re.union (re.union (re.+ (re.+ (str.to_re "KKK"))) (re.* (re.union (str.to_re "L") (str.to_re "MM")))) (re.union (re.+ (re.* (str.to_re "NN"))) (re.union (re.* (str.to_re "OOO")) (re.* (str.to_re "PP"))))) (re.union (re.+ (re.+ (re.+ (str.to_re "QQQ")))) (re.union (re.union (re.+ (str.to_re "RRR")) (re.+ (str.to_re "S"))) (re.* (re.* (str.to_re "T")))))))) (re.* (re.* (re.union (re.+ (re.* (re.* (re.* (str.to_re "UUU"))))) (re.+ (re.* (re.* (re.+ (str.to_re "VVV")))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
