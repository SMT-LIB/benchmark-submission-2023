(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.union (re.+ (re.union (re.union (re.+ (re.union (re.+ (re.* (str.to_re "00"))) (re.* (re.union (str.to_re "111") (str.to_re "2"))))) (re.* (re.union (re.* (re.union (str.to_re "33") (str.to_re "444"))) (re.union (re.* (str.to_re "5")) (re.* (str.to_re "666")))))) (re.+ (re.union (re.union (re.+ (re.* (str.to_re "777"))) (re.union (re.union (str.to_re "8") (str.to_re "999")) (re.* (str.to_re "aa")))) (re.union (re.+ (re.* (str.to_re "bb"))) (re.union (re.union (str.to_re "ccc") (str.to_re "dd")) (re.union (str.to_re "e") (str.to_re "fff")))))))) (re.union (re.union (re.* (re.+ (re.union (re.* (re.* (str.to_re "ggg"))) (re.union (re.union (str.to_re "hh") (str.to_re "ii")) (re.union (str.to_re "jj") (str.to_re "kk")))))) (re.union (re.* (re.union (re.* (re.union (str.to_re "l") (str.to_re "mmm"))) (re.+ (re.union (str.to_re "nn") (str.to_re "ooo"))))) (re.+ (re.* (re.union (re.union (str.to_re "p") (str.to_re "q")) (re.* (str.to_re "rr"))))))) (re.+ (re.+ (re.+ (re.+ (re.* (re.+ (str.to_re "sss"))))))))) (re.union (re.* (re.* (re.union (re.* (re.* (re.+ (re.+ (str.to_re "tt"))))) (re.+ (re.+ (re.union (re.* (str.to_re "u")) (re.+ (str.to_re "vvv")))))))) (re.* (re.union (re.+ (re.+ (re.+ (re.* (re.* (str.to_re "w")))))) (re.union (re.union (re.* (re.* (re.union (str.to_re "xx") (str.to_re "yy")))) (re.+ (re.* (re.union (str.to_re "z") (str.to_re "AA"))))) (re.* (re.+ (re.+ (re.* (str.to_re "B")))))))))) (re.+ (re.+ (re.union (re.union (re.* (re.+ (re.+ (re.* (re.* (str.to_re "CC")))))) (re.* (re.union (re.+ (re.+ (re.+ (str.to_re "DDD")))) (re.+ (re.+ (re.union (str.to_re "EEE") (str.to_re "F"))))))) (re.* (re.union (re.* (re.+ (re.+ (re.union (str.to_re "GGG") (str.to_re "H"))))) (re.+ (re.* (re.+ (re.+ (str.to_re "II")))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
