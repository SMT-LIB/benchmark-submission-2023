(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (re.union (re.* (re.union (re.union (re.union (re.union (re.+ (re.+ (re.+ (re.+ (str.to_re "0"))))) (re.* (re.union (re.union (re.+ (str.to_re "1")) (re.+ (str.to_re "222"))) (re.* (re.union (str.to_re "3") (str.to_re "4")))))) (re.union (re.union (re.* (re.* (re.union (str.to_re "555") (str.to_re "666")))) (re.+ (re.union (re.union (str.to_re "7") (str.to_re "88")) (re.union (str.to_re "9") (str.to_re "aa"))))) (re.union (re.* (re.+ (re.* (str.to_re "bbb")))) (re.* (re.* (re.+ (str.to_re "ccc"))))))) (re.* (re.+ (re.* (re.+ (re.+ (re.* (str.to_re "dd")))))))) (re.+ (re.+ (re.+ (re.+ (re.+ (re.union (re.union (str.to_re "eee") (str.to_re "fff")) (re.* (str.to_re "g")))))))))) (re.* (re.* (re.+ (re.union (re.union (re.* (re.* (re.* (re.union (str.to_re "h") (str.to_re "iii"))))) (re.* (re.* (re.+ (re.union (str.to_re "jj") (str.to_re "kkk")))))) (re.+ (re.* (re.* (re.+ (re.+ (str.to_re "l"))))))))))))) (re.* (re.+ (re.union (re.+ (re.* (re.union (re.+ (re.union (re.* (re.+ (re.* (re.* (str.to_re "m"))))) (re.union (re.union (re.union (re.* (str.to_re "n")) (re.+ (str.to_re "o"))) (re.union (re.+ (str.to_re "p")) (re.* (str.to_re "q")))) (re.+ (re.* (re.union (str.to_re "rrr") (str.to_re "s"))))))) (re.union (re.+ (re.+ (re.+ (re.* (re.+ (str.to_re "tt")))))) (re.+ (re.* (re.+ (re.+ (re.* (str.to_re "uu")))))))))) (re.union (re.union (re.* (re.+ (re.+ (re.union (re.* (re.* (re.* (str.to_re "vvv")))) (re.union (re.+ (re.* (str.to_re "ww"))) (re.+ (re.+ (str.to_re "xx")))))))) (re.union (re.union (re.union (re.union (re.union (re.* (re.+ (str.to_re "y"))) (re.+ (re.+ (str.to_re "zzz")))) (re.+ (re.+ (re.union (str.to_re "A") (str.to_re "B"))))) (re.union (re.* (re.* (re.union (str.to_re "CCC") (str.to_re "DDD")))) (re.* (re.+ (re.+ (str.to_re "EE")))))) (re.* (re.+ (re.+ (re.+ (re.union (str.to_re "FFF") (str.to_re "GGG"))))))) (re.* (re.+ (re.+ (re.* (re.union (re.+ (str.to_re "HHH")) (re.union (str.to_re "I") (str.to_re "JJJ"))))))))) (re.+ (re.+ (re.* (re.union (re.union (re.* (re.+ (re.union (str.to_re "KKK") (str.to_re "LLL")))) (re.+ (re.* (re.* (str.to_re "M"))))) (re.union (re.+ (re.union (re.union (str.to_re "NN") (str.to_re "O")) (re.* (str.to_re "P")))) (re.+ (re.+ (re.union (str.to_re "QQQ") (str.to_re "RRR"))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
