(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (re.union (re.union (re.+ (re.* (re.+ (re.+ (re.* (re.* (re.* (re.+ (re.* (str.to_re "0")))))))))) (re.* (re.+ (re.+ (re.* (re.+ (re.+ (re.* (re.+ (re.* (str.to_re "1"))))))))))) (re.union (re.* (re.* (re.+ (re.* (re.union (re.+ (re.* (re.+ (re.union (str.to_re "22") (str.to_re "33"))))) (re.* (re.+ (re.+ (re.union (str.to_re "44") (str.to_re "55")))))))))) (re.union (re.* (re.union (re.* (re.* (re.* (re.* (re.+ (re.union (str.to_re "666") (str.to_re "7"))))))) (re.union (re.+ (re.* (re.union (re.+ (re.union (str.to_re "888") (str.to_re "999"))) (re.* (re.+ (str.to_re "aaa")))))) (re.+ (re.union (re.union (re.+ (re.+ (str.to_re "bbb"))) (re.+ (re.union (str.to_re "c") (str.to_re "d")))) (re.union (re.union (re.union (str.to_re "eee") (str.to_re "f")) (re.+ (str.to_re "gg"))) (re.union (re.union (str.to_re "h") (str.to_re "iii")) (re.* (str.to_re "jjj"))))))))) (re.+ (re.* (re.+ (re.* (re.+ (re.+ (re.+ (re.union (str.to_re "kkk") (str.to_re "l")))))))))))))) (re.union (re.+ (re.* (re.union (re.+ (re.+ (re.* (re.* (re.+ (re.union (re.union (re.* (re.+ (str.to_re "mmm"))) (re.+ (re.* (str.to_re "nnn")))) (re.+ (re.* (re.union (str.to_re "o") (str.to_re "pp")))))))))) (re.union (re.* (re.union (re.+ (re.+ (re.union (re.union (re.union (re.* (str.to_re "qq")) (re.union (str.to_re "rrr") (str.to_re "sss"))) (re.union (re.union (str.to_re "ttt") (str.to_re "uuu")) (re.+ (str.to_re "vvv")))) (re.* (re.* (re.* (str.to_re "w"))))))) (re.* (re.union (re.* (re.union (re.+ (re.+ (str.to_re "xx"))) (re.union (re.* (str.to_re "yyy")) (re.+ (str.to_re "zzz"))))) (re.* (re.* (re.union (re.* (str.to_re "A")) (re.union (str.to_re "BB") (str.to_re "CCC"))))))))) (re.union (re.* (re.union (re.union (re.* (re.+ (re.union (re.+ (str.to_re "DDD")) (re.+ (str.to_re "EE"))))) (re.* (re.* (re.+ (re.* (str.to_re "FF")))))) (re.+ (re.* (re.* (re.union (re.* (str.to_re "GG")) (re.* (str.to_re "HHH")))))))) (re.+ (re.* (re.* (re.union (re.union (re.* (re.union (str.to_re "I") (str.to_re "J"))) (re.* (re.union (str.to_re "K") (str.to_re "LLL")))) (re.union (re.* (re.* (str.to_re "MM"))) (re.union (re.* (str.to_re "NN")) (re.union (str.to_re "OOO") (str.to_re "PPP"))))))))))))) (re.union (re.+ (re.union (re.* (re.+ (re.* (re.+ (re.* (re.+ (re.+ (re.union (re.union (str.to_re "QQQ") (str.to_re "RR")) (re.* (str.to_re "S")))))))))) (re.union (re.union (re.union (re.+ (re.* (re.* (re.* (re.+ (re.+ (str.to_re "TT"))))))) (re.union (re.+ (re.* (re.union (re.* (re.* (str.to_re "U"))) (re.union (re.union (str.to_re "VV") (str.to_re "WW")) (re.union (str.to_re "XXX") (str.to_re "YYY")))))) (re.+ (re.+ (re.+ (re.union (re.* (str.to_re "ZZZ")) (re.* (str.to_re "!!!")))))))) (re.+ (re.union (re.union (re.union (re.+ (re.union (re.union (str.to_re """") (str.to_re "#")) (re.+ (str.to_re "$$$")))) (re.+ (re.union (re.* (str.to_re "%%%")) (re.union (str.to_re "&&&") (str.to_re "'"))))) (re.union (re.union (re.* (re.+ (str.to_re "(("))) (re.* (re.* (str.to_re ")))")))) (re.* (re.* (re.union (str.to_re "*") (str.to_re "+")))))) (re.* (re.+ (re.+ (re.* (re.* (str.to_re ",,,"))))))))) (re.* (re.* (re.union (re.* (re.+ (re.union (re.union (re.union (str.to_re "--") (str.to_re ".")) (re.union (str.to_re "//") (str.to_re ":::"))) (re.* (re.+ (str.to_re ";")))))) (re.union (re.* (re.union (re.+ (re.+ (str.to_re "<<<"))) (re.+ (re.union (str.to_re "==") (str.to_re ">"))))) (re.* (re.union (re.+ (re.union (str.to_re "??") (str.to_re "@"))) (re.union (re.union (str.to_re "[[[") (str.to_re "\\\\\\")) (re.* (str.to_re "]]]")))))))))))) (re.* (re.* (re.+ (re.+ (re.+ (re.+ (re.union (re.union (re.+ (re.+ (re.+ (str.to_re "^^")))) (re.* (re.union (re.* (str.to_re "_")) (re.union (str.to_re "``") (str.to_re "{{{"))))) (re.union (re.+ (re.+ (re.+ (str.to_re "||")))) (re.+ (re.* (re.+ (str.to_re "}")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
