(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (re.* (re.union (re.+ (re.union (re.+ (re.union (re.+ (re.+ (re.* (re.+ (str.to_re "00"))))) (re.* (re.* (re.+ (re.+ (str.to_re "111"))))))) (re.+ (re.union (re.+ (re.+ (re.* (re.union (str.to_re "222") (str.to_re "333"))))) (re.* (re.union (re.* (re.+ (str.to_re "4"))) (re.+ (re.union (str.to_re "5") (str.to_re "6"))))))))) (re.* (re.* (re.+ (re.* (re.+ (re.+ (re.* (re.+ (str.to_re "77")))))))))))) (re.* (re.+ (re.+ (re.union (re.+ (re.union (re.* (re.union (re.+ (re.* (re.* (str.to_re "888")))) (re.* (re.* (re.+ (str.to_re "999")))))) (re.+ (re.union (re.+ (re.+ (re.+ (str.to_re "aa")))) (re.* (re.+ (re.union (str.to_re "b") (str.to_re "c")))))))) (re.+ (re.union (re.+ (re.union (re.* (re.* (re.* (str.to_re "dd")))) (re.union (re.* (re.+ (str.to_re "e"))) (re.union (re.* (str.to_re "ff")) (re.union (str.to_re "gg") (str.to_re "h")))))) (re.* (re.* (re.union (re.+ (re.* (str.to_re "ii"))) (re.union (re.+ (str.to_re "jjj")) (re.* (str.to_re "k"))))))))))))) (re.union (re.union (re.* (re.* (re.union (re.+ (re.+ (re.union (re.+ (re.* (re.+ (re.+ (str.to_re "ll"))))) (re.union (re.union (re.* (re.+ (str.to_re "mmm"))) (re.union (re.+ (str.to_re "nn")) (re.+ (str.to_re "o")))) (re.+ (re.union (re.* (str.to_re "pp")) (re.union (str.to_re "qq") (str.to_re "r")))))))) (re.* (re.+ (re.+ (re.* (re.+ (re.union (re.* (str.to_re "s")) (re.union (str.to_re "ttt") (str.to_re "uu"))))))))))) (re.+ (re.union (re.+ (re.+ (re.+ (re.+ (re.* (re.+ (re.+ (re.* (str.to_re "v"))))))))) (re.union (re.+ (re.+ (re.+ (re.union (re.union (re.union (re.union (str.to_re "www") (str.to_re "xx")) (re.* (str.to_re "yy"))) (re.union (re.* (str.to_re "zz")) (re.* (str.to_re "A")))) (re.+ (re.* (re.* (str.to_re "BB")))))))) (re.* (re.* (re.* (re.* (re.union (re.* (re.union (str.to_re "CC") (str.to_re "D"))) (re.union (re.+ (str.to_re "EEE")) (re.+ (str.to_re "FF")))))))))))) (re.+ (re.+ (re.+ (re.union (re.* (re.+ (re.+ (re.* (re.+ (re.* (re.* (str.to_re "GGG")))))))) (re.union (re.* (re.union (re.+ (re.+ (re.+ (re.* (str.to_re "H"))))) (re.union (re.+ (re.* (re.* (str.to_re "I")))) (re.+ (re.+ (re.union (str.to_re "JJJ") (str.to_re "KKK"))))))) (re.* (re.union (re.union (re.* (re.* (re.+ (str.to_re "LLL")))) (re.+ (re.+ (re.* (str.to_re "MM"))))) (re.union (re.* (re.+ (re.+ (str.to_re "NNN")))) (re.* (re.union (re.union (str.to_re "O") (str.to_re "PP")) (re.union (str.to_re "Q") (str.to_re "RR"))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
