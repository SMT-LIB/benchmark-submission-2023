(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.union (re.+ (re.+ (re.* (re.* (re.union (re.+ (re.+ (re.union (re.union (re.union (re.+ (re.+ (str.to_re "000"))) (re.union (re.union (str.to_re "111") (str.to_re "22")) (re.union (str.to_re "33") (str.to_re "4")))) (re.union (re.+ (re.* (str.to_re "555"))) (re.union (re.union (str.to_re "66") (str.to_re "7")) (re.union (str.to_re "8") (str.to_re "999"))))) (re.* (re.+ (re.union (re.union (str.to_re "aa") (str.to_re "b")) (re.+ (str.to_re "c")))))))) (re.+ (re.* (re.union (re.* (re.* (re.union (re.* (str.to_re "d")) (re.+ (str.to_re "eee"))))) (re.* (re.union (re.* (re.union (str.to_re "ff") (str.to_re "ggg"))) (re.+ (re.union (str.to_re "hh") (str.to_re "i"))))))))))))) (re.union (re.* (re.* (re.* (re.+ (re.* (re.+ (re.union (re.* (re.union (re.* (re.+ (str.to_re "j"))) (re.+ (re.+ (str.to_re "kk"))))) (re.* (re.+ (re.* (re.union (str.to_re "l") (str.to_re "mmm")))))))))))) (re.* (re.* (re.union (re.+ (re.union (re.union (re.* (re.+ (re.* (re.union (re.union (str.to_re "n") (str.to_re "oo")) (re.+ (str.to_re "p")))))) (re.* (re.* (re.* (re.union (re.+ (str.to_re "qq")) (re.* (str.to_re "rrr"))))))) (re.union (re.+ (re.+ (re.+ (re.union (re.* (str.to_re "ss")) (re.+ (str.to_re "t")))))) (re.* (re.* (re.union (re.union (re.+ (str.to_re "uuu")) (re.* (str.to_re "vv"))) (re.* (re.+ (str.to_re "w"))))))))) (re.+ (re.+ (re.union (re.+ (re.* (re.union (re.union (re.+ (str.to_re "xxx")) (re.union (str.to_re "y") (str.to_re "zz"))) (re.union (re.union (str.to_re "AA") (str.to_re "BBB")) (re.+ (str.to_re "C")))))) (re.+ (re.+ (re.union (re.* (re.union (str.to_re "DDD") (str.to_re "EE"))) (re.+ (re.+ (str.to_re "FF")))))))))))))) (re.union (re.union (re.+ (re.union (re.+ (re.* (re.* (re.union (re.* (re.* (re.union (re.union (re.+ (str.to_re "GGG")) (re.+ (str.to_re "H"))) (re.union (re.union (str.to_re "I") (str.to_re "JJ")) (re.+ (str.to_re "K")))))) (re.+ (re.* (re.union (re.union (re.* (str.to_re "LL")) (re.union (str.to_re "M") (str.to_re "NNN"))) (re.+ (re.union (str.to_re "OO") (str.to_re "PPP")))))))))) (re.* (re.union (re.* (re.union (re.union (re.+ (re.union (re.+ (re.+ (str.to_re "QQ"))) (re.union (re.union (str.to_re "R") (str.to_re "S")) (re.union (str.to_re "T") (str.to_re "U"))))) (re.+ (re.+ (re.* (re.+ (str.to_re "VVV")))))) (re.+ (re.+ (re.* (re.+ (re.* (str.to_re "W")))))))) (re.* (re.union (re.union (re.+ (re.+ (re.union (re.union (str.to_re "XX") (str.to_re "YY")) (re.+ (str.to_re "ZZ"))))) (re.+ (re.+ (re.* (re.* (str.to_re "!")))))) (re.+ (re.* (re.* (re.+ (re.+ (str.to_re """""""")))))))))))) (re.+ (re.* (re.+ (re.+ (re.union (re.+ (re.+ (re.union (re.* (re.* (re.+ (str.to_re "#")))) (re.* (re.+ (re.union (str.to_re "$") (str.to_re "%%%"))))))) (re.+ (re.* (re.* (re.* (re.union (re.union (str.to_re "&&&") (str.to_re "'''")) (re.* (str.to_re "("))))))))))))) (re.union (re.+ (re.+ (re.* (re.* (re.union (re.union (re.union (re.union (re.union (re.* (re.union (str.to_re ")))") (str.to_re "*"))) (re.+ (re.* (str.to_re "++")))) (re.+ (re.+ (re.* (str.to_re ",,,"))))) (re.+ (re.union (re.+ (re.+ (str.to_re "-"))) (re.+ (re.+ (str.to_re "...")))))) (re.+ (re.+ (re.union (re.union (re.+ (str.to_re "//")) (re.* (str.to_re ":::"))) (re.union (re.* (str.to_re ";;")) (re.* (str.to_re "<<"))))))) (re.+ (re.* (re.union (re.union (re.+ (re.+ (str.to_re "=="))) (re.union (re.+ (str.to_re ">")) (re.* (str.to_re "?")))) (re.+ (re.+ (re.+ (str.to_re "@")))))))))))) (re.+ (re.* (re.union (re.+ (re.* (re.+ (re.union (re.+ (re.union (re.union (re.+ (str.to_re "[")) (re.union (str.to_re "\\\\\\") (str.to_re "]"))) (re.union (re.union (str.to_re "^^") (str.to_re "___")) (re.+ (str.to_re "`"))))) (re.union (re.union (re.union (re.+ (str.to_re "{{{")) (re.* (str.to_re "|"))) (re.+ (re.+ (str.to_re "}}}")))) (re.union (re.union (re.+ (str.to_re "~~")) (re.+ (str.to_re "00"))) (re.+ (re.union (str.to_re "1") (str.to_re "222"))))))))) (re.* (re.* (re.union (re.+ (re.+ (re.+ (re.union (re.union (str.to_re "33") (str.to_re "4")) (re.union (str.to_re "5") (str.to_re "66")))))) (re.+ (re.union (re.union (re.* (re.* (str.to_re "777"))) (re.union (re.union (str.to_re "88") (str.to_re "9")) (re.* (str.to_re "aaa")))) (re.+ (re.+ (re.+ (str.to_re "b")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
