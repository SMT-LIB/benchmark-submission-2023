(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (re.* (re.union (re.+ (re.* (re.* (re.+ (re.* (re.union (re.union (re.+ (re.union (str.to_re "00") (str.to_re "1"))) (re.* (re.union (str.to_re "22") (str.to_re "333")))) (re.+ (re.union (re.* (str.to_re "4")) (re.+ (str.to_re "55")))))))))) (re.union (re.union (re.+ (re.* (re.+ (re.* (re.* (re.+ (re.* (str.to_re "666")))))))) (re.+ (re.* (re.+ (re.* (re.* (re.* (re.* (str.to_re "77"))))))))) (re.+ (re.+ (re.* (re.* (re.union (re.union (re.* (re.union (str.to_re "88") (str.to_re "999"))) (re.+ (re.+ (str.to_re "a")))) (re.* (re.+ (re.* (str.to_re "bb")))))))))))))) (re.+ (re.union (re.+ (re.union (re.* (re.+ (re.union (re.union (re.+ (re.union (re.* (re.+ (re.union (str.to_re "ccc") (str.to_re "ddd")))) (re.+ (re.* (re.+ (str.to_re "e")))))) (re.+ (re.+ (re.union (re.* (re.* (str.to_re "f"))) (re.+ (re.+ (str.to_re "ggg"))))))) (re.+ (re.union (re.* (re.union (re.+ (re.+ (str.to_re "h"))) (re.+ (re.union (str.to_re "iii") (str.to_re "jj"))))) (re.+ (re.* (re.+ (re.* (str.to_re "kk")))))))))) (re.+ (re.* (re.union (re.* (re.union (re.* (re.* (re.union (re.+ (str.to_re "lll")) (re.+ (str.to_re "mmm"))))) (re.+ (re.+ (re.+ (re.+ (str.to_re "nn"))))))) (re.union (re.* (re.* (re.+ (re.* (re.+ (str.to_re "oo")))))) (re.+ (re.* (re.union (re.union (re.+ (str.to_re "p")) (re.* (str.to_re "qqq"))) (re.* (re.+ (str.to_re "rrr")))))))))))) (re.union (re.* (re.union (re.+ (re.* (re.* (re.* (re.* (re.+ (re.union (re.* (str.to_re "sss")) (re.+ (str.to_re "tt"))))))))) (re.+ (re.* (re.+ (re.union (re.* (re.* (re.+ (re.union (str.to_re "uu") (str.to_re "vvv"))))) (re.+ (re.union (re.* (re.union (str.to_re "www") (str.to_re "x"))) (re.union (re.* (str.to_re "yy")) (re.+ (str.to_re "zz"))))))))))) (re.union (re.* (re.union (re.+ (re.union (re.union (re.+ (re.union (re.+ (re.union (str.to_re "A") (str.to_re "B"))) (re.union (re.* (str.to_re "CC")) (re.* (str.to_re "DD"))))) (re.* (re.union (re.union (re.union (str.to_re "EE") (str.to_re "FFF")) (re.* (str.to_re "GGG"))) (re.* (re.+ (str.to_re "H")))))) (re.* (re.union (re.* (re.+ (re.union (str.to_re "I") (str.to_re "J")))) (re.union (re.+ (re.+ (str.to_re "KKK"))) (re.* (re.+ (str.to_re "LLL")))))))) (re.* (re.union (re.union (re.* (re.+ (re.union (re.* (str.to_re "MMM")) (re.union (str.to_re "NN") (str.to_re "O"))))) (re.+ (re.+ (re.+ (re.* (str.to_re "PP")))))) (re.+ (re.* (re.union (re.union (re.* (str.to_re "QQ")) (re.* (str.to_re "RR"))) (re.+ (re.* (str.to_re "SS")))))))))) (re.* (re.* (re.union (re.union (re.union (re.* (re.* (re.union (re.* (str.to_re "T")) (re.+ (str.to_re "UU"))))) (re.* (re.union (re.+ (re.* (str.to_re "VV"))) (re.* (re.+ (str.to_re "WWW")))))) (re.union (re.+ (re.+ (re.* (re.+ (str.to_re "X"))))) (re.union (re.* (re.* (re.union (str.to_re "YY") (str.to_re "Z")))) (re.+ (re.* (re.union (str.to_re "!!") (str.to_re """"""""))))))) (re.union (re.* (re.* (re.+ (re.+ (re.union (str.to_re "##") (str.to_re "$$$")))))) (re.union (re.* (re.* (re.+ (re.+ (str.to_re "%%"))))) (re.+ (re.union (re.* (re.union (str.to_re "&") (str.to_re "'"))) (re.+ (re.+ (str.to_re "(")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
