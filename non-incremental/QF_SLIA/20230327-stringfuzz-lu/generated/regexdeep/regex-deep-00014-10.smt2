(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (re.* (re.* (re.union (re.union (re.union (re.* (re.* (re.union (re.union (re.union (re.union (re.* (str.to_re "000")) (re.union (str.to_re "1") (str.to_re "222"))) (re.union (re.* (str.to_re "333")) (re.+ (str.to_re "4")))) (re.union (re.* (re.union (str.to_re "555") (str.to_re "6"))) (re.* (re.+ (str.to_re "777"))))) (re.+ (re.* (re.+ (re.* (str.to_re "888")))))))) (re.* (re.union (re.union (re.+ (re.+ (re.union (re.union (str.to_re "999") (str.to_re "aaa")) (re.union (str.to_re "b") (str.to_re "cc"))))) (re.+ (re.union (re.* (re.* (str.to_re "d"))) (re.union (re.union (str.to_re "eee") (str.to_re "ff")) (re.+ (str.to_re "ggg")))))) (re.union (re.union (re.union (re.+ (re.* (str.to_re "hhh"))) (re.* (re.+ (str.to_re "i")))) (re.* (re.union (re.union (str.to_re "jj") (str.to_re "k")) (re.+ (str.to_re "ll"))))) (re.union (re.+ (re.+ (re.union (str.to_re "mm") (str.to_re "nnn")))) (re.+ (re.* (re.* (str.to_re "oo"))))))))) (re.* (re.+ (re.union (re.+ (re.* (re.union (re.union (re.+ (str.to_re "ppp")) (re.* (str.to_re "qq"))) (re.* (re.union (str.to_re "rr") (str.to_re "s")))))) (re.* (re.+ (re.+ (re.* (re.union (str.to_re "tt") (str.to_re "uuu")))))))))) (re.union (re.union (re.union (re.* (re.* (re.* (re.union (re.+ (re.union (str.to_re "v") (str.to_re "w"))) (re.+ (re.union (str.to_re "xx") (str.to_re "y"))))))) (re.union (re.* (re.* (re.+ (re.* (re.* (str.to_re "z")))))) (re.* (re.union (re.+ (re.union (re.+ (str.to_re "AA")) (re.union (str.to_re "BB") (str.to_re "C")))) (re.+ (re.union (re.* (str.to_re "D")) (re.* (str.to_re "E")))))))) (re.* (re.+ (re.* (re.* (re.+ (re.+ (re.union (str.to_re "F") (str.to_re "GG"))))))))) (re.union (re.union (re.+ (re.union (re.+ (re.union (re.+ (re.union (str.to_re "HH") (str.to_re "III"))) (re.union (re.* (str.to_re "J")) (re.* (str.to_re "KK"))))) (re.+ (re.union (re.+ (re.+ (str.to_re "LLL"))) (re.union (re.+ (str.to_re "M")) (re.* (str.to_re "N"))))))) (re.union (re.union (re.+ (re.* (re.union (re.* (str.to_re "OO")) (re.union (str.to_re "PP") (str.to_re "Q"))))) (re.union (re.+ (re.union (re.+ (str.to_re "RRR")) (re.union (str.to_re "SSS") (str.to_re "T")))) (re.+ (re.* (re.+ (str.to_re "UUU")))))) (re.* (re.* (re.* (re.+ (re.+ (str.to_re "V")))))))) (re.union (re.* (re.* (re.+ (re.+ (re.* (re.+ (str.to_re "WW"))))))) (re.+ (re.+ (re.* (re.* (re.+ (re.+ (str.to_re "XX"))))))))))))) (re.* (re.union (re.+ (re.union (re.+ (re.+ (re.* (re.union (re.* (re.+ (re.union (re.union (str.to_re "YY") (str.to_re "ZZZ")) (re.union (str.to_re "!") (str.to_re """"""))))) (re.+ (re.* (re.union (re.union (str.to_re "###") (str.to_re "$$")) (re.union (str.to_re "%%") (str.to_re "&&"))))))))) (re.* (re.union (re.* (re.+ (re.+ (re.+ (re.union (re.+ (str.to_re "''")) (re.+ (str.to_re "(("))))))) (re.union (re.+ (re.* (re.* (re.+ (re.+ (str.to_re "))")))))) (re.+ (re.union (re.* (re.+ (re.* (str.to_re "***")))) (re.* (re.+ (re.* (str.to_re "+"))))))))))) (re.union (re.* (re.union (re.+ (re.* (re.+ (re.* (re.+ (re.* (re.+ (str.to_re ",,")))))))) (re.+ (re.* (re.* (re.union (re.+ (re.+ (re.union (str.to_re "--") (str.to_re "..")))) (re.* (re.* (re.* (str.to_re "//")))))))))) (re.* (re.* (re.* (re.+ (re.* (re.union (re.union (re.union (re.+ (str.to_re "::")) (re.+ (str.to_re ";;;"))) (re.* (re.* (str.to_re "<<")))) (re.+ (re.union (re.+ (str.to_re "===")) (re.* (str.to_re ">>"))))))))))))))) (re.* (re.+ (re.union (re.* (re.union (re.union (re.* (re.+ (re.+ (re.+ (re.+ (re.+ (re.* (re.* (str.to_re "?"))))))))) (re.+ (re.* (re.+ (re.* (re.+ (re.* (re.* (re.* (str.to_re "@")))))))))) (re.+ (re.+ (re.* (re.union (re.* (re.+ (re.* (re.union (re.+ (str.to_re "[")) (re.* (str.to_re "\\\\\\")))))) (re.union (re.* (re.+ (re.+ (re.union (str.to_re "]]]") (str.to_re "^"))))) (re.union (re.+ (re.+ (re.* (str.to_re "__")))) (re.union (re.+ (re.+ (str.to_re "``"))) (re.* (re.* (str.to_re "{{")))))))))))) (re.* (re.+ (re.union (re.union (re.+ (re.+ (re.union (re.* (re.union (re.* (re.* (str.to_re "||"))) (re.* (re.* (str.to_re "}"))))) (re.union (re.+ (re.* (re.+ (str.to_re "~~")))) (re.* (re.+ (re.union (str.to_re "0") (str.to_re "11")))))))) (re.+ (re.union (re.* (re.union (re.+ (re.+ (re.union (str.to_re "2") (str.to_re "333")))) (re.union (re.union (re.union (str.to_re "44") (str.to_re "555")) (re.+ (str.to_re "6"))) (re.union (re.union (str.to_re "77") (str.to_re "88")) (re.union (str.to_re "999") (str.to_re "a")))))) (re.union (re.+ (re.union (re.* (re.+ (str.to_re "bb"))) (re.+ (re.union (str.to_re "c") (str.to_re "d"))))) (re.union (re.union (re.* (re.union (str.to_re "eee") (str.to_re "ff"))) (re.+ (re.+ (str.to_re "ggg")))) (re.union (re.union (re.+ (str.to_re "hhh")) (re.+ (str.to_re "iii"))) (re.union (re.union (str.to_re "j") (str.to_re "kkk")) (re.* (str.to_re "lll"))))))))) (re.union (re.* (re.union (re.+ (re.union (re.+ (re.* (re.+ (str.to_re "mmm")))) (re.union (re.* (re.* (str.to_re "nn"))) (re.+ (re.+ (str.to_re "o")))))) (re.+ (re.union (re.* (re.union (re.* (str.to_re "p")) (re.union (str.to_re "qqq") (str.to_re "rrr")))) (re.* (re.union (re.+ (str.to_re "s")) (re.+ (str.to_re "tt")))))))) (re.union (re.* (re.union (re.+ (re.* (re.union (re.* (str.to_re "u")) (re.* (str.to_re "vvv"))))) (re.union (re.+ (re.union (re.+ (str.to_re "www")) (re.+ (str.to_re "x")))) (re.* (re.union (re.* (str.to_re "yyy")) (re.+ (str.to_re "zz"))))))) (re.+ (re.union (re.+ (re.union (re.* (re.+ (str.to_re "AA"))) (re.+ (re.+ (str.to_re "B"))))) (re.+ (re.* (re.union (re.* (str.to_re "C")) (re.+ (str.to_re "DDD"))))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
