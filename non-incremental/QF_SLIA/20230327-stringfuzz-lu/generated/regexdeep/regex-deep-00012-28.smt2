(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.+ (re.union (re.union (re.* (re.* (re.union (re.* (re.union (re.* (re.union (re.* (str.to_re "00")) (re.union (str.to_re "11") (str.to_re "222")))) (re.union (re.union (re.+ (str.to_re "33")) (re.+ (str.to_re "444"))) (re.+ (re.+ (str.to_re "5")))))) (re.* (re.+ (re.+ (re.union (re.union (str.to_re "66") (str.to_re "77")) (re.+ (str.to_re "88"))))))))) (re.* (re.* (re.* (re.+ (re.* (re.+ (re.* (re.+ (str.to_re "9")))))))))) (re.* (re.* (re.+ (re.* (re.+ (re.union (re.* (re.+ (re.union (str.to_re "aaa") (str.to_re "bb")))) (re.+ (re.union (re.* (str.to_re "c")) (re.+ (str.to_re "d"))))))))))))) (re.* (re.+ (re.+ (re.union (re.union (re.* (re.+ (re.* (re.+ (re.+ (re.+ (re.union (str.to_re "ee") (str.to_re "f")))))))) (re.union (re.+ (re.* (re.+ (re.union (re.* (re.union (str.to_re "gg") (str.to_re "hh"))) (re.+ (re.union (str.to_re "iii") (str.to_re "j"))))))) (re.union (re.+ (re.+ (re.* (re.union (re.union (str.to_re "k") (str.to_re "l")) (re.* (str.to_re "mm")))))) (re.union (re.union (re.+ (re.* (re.+ (str.to_re "nnn")))) (re.+ (re.* (re.+ (str.to_re "o"))))) (re.+ (re.union (re.* (re.union (str.to_re "p") (str.to_re "qq"))) (re.* (re.* (str.to_re "rrr"))))))))) (re.* (re.union (re.union (re.+ (re.union (re.+ (re.+ (re.+ (str.to_re "ss")))) (re.+ (re.* (re.union (str.to_re "ttt") (str.to_re "uu")))))) (re.union (re.* (re.+ (re.+ (re.union (str.to_re "vv") (str.to_re "ww"))))) (re.* (re.* (re.+ (re.+ (str.to_re "xx"))))))) (re.union (re.* (re.+ (re.* (re.+ (re.* (str.to_re "y")))))) (re.union (re.* (re.+ (re.+ (re.union (str.to_re "zz") (str.to_re "AA"))))) (re.union (re.* (re.union (re.* (str.to_re "B")) (re.union (str.to_re "C") (str.to_re "DDD")))) (re.+ (re.union (re.union (str.to_re "E") (str.to_re "F")) (re.+ (str.to_re "GGG"))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
