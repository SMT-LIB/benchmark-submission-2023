(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.+ (re.union (re.union (re.union (re.+ (re.+ (re.+ (re.union (re.union (re.+ (re.* (re.* (re.union (str.to_re "00") (str.to_re "1"))))) (re.union (re.* (re.union (re.+ (str.to_re "222")) (re.+ (str.to_re "333")))) (re.union (re.union (re.union (str.to_re "4") (str.to_re "555")) (re.* (str.to_re "666"))) (re.+ (re.union (str.to_re "7") (str.to_re "88")))))) (re.+ (re.* (re.union (re.union (re.+ (str.to_re "999")) (re.+ (str.to_re "aaa"))) (re.union (re.+ (str.to_re "b")) (re.union (str.to_re "c") (str.to_re "d")))))))))) (re.union (re.union (re.union (re.union (re.* (re.+ (re.union (re.* (re.+ (str.to_re "ee"))) (re.union (re.+ (str.to_re "f")) (re.* (str.to_re "ggg")))))) (re.+ (re.* (re.+ (re.* (re.union (str.to_re "hh") (str.to_re "i"))))))) (re.union (re.+ (re.* (re.* (re.+ (re.* (str.to_re "jjj")))))) (re.+ (re.+ (re.union (re.* (re.* (str.to_re "kk"))) (re.* (re.union (str.to_re "lll") (str.to_re "mm")))))))) (re.union (re.+ (re.* (re.union (re.* (re.* (re.+ (str.to_re "nn")))) (re.+ (re.+ (re.union (str.to_re "ooo") (str.to_re "ppp"))))))) (re.union (re.* (re.* (re.+ (re.+ (re.* (str.to_re "qqq")))))) (re.+ (re.+ (re.union (re.union (re.+ (str.to_re "rrr")) (re.union (str.to_re "sss") (str.to_re "t"))) (re.* (re.* (str.to_re "uu"))))))))) (re.* (re.+ (re.* (re.+ (re.* (re.* (re.union (re.union (str.to_re "v") (str.to_re "ww")) (re.+ (str.to_re "xxx"))))))))))) (re.union (re.+ (re.+ (re.* (re.* (re.+ (re.union (re.+ (re.* (re.* (str.to_re "yy")))) (re.* (re.+ (re.+ (str.to_re "z")))))))))) (re.* (re.+ (re.* (re.union (re.+ (re.* (re.+ (re.+ (re.* (str.to_re "AA")))))) (re.union (re.* (re.* (re.+ (re.union (str.to_re "BBB") (str.to_re "CC"))))) (re.union (re.union (re.* (re.* (str.to_re "DD"))) (re.union (re.* (str.to_re "E")) (re.* (str.to_re "FF")))) (re.* (re.* (re.* (str.to_re "GG")))))))))))) (re.union (re.+ (re.union (re.+ (re.+ (re.union (re.* (re.union (re.union (re.* (re.+ (str.to_re "HH"))) (re.* (re.union (str.to_re "I") (str.to_re "JJ")))) (re.+ (re.* (re.* (str.to_re "KK")))))) (re.+ (re.* (re.* (re.+ (re.+ (str.to_re "LL"))))))))) (re.* (re.union (re.+ (re.* (re.+ (re.union (re.* (re.* (str.to_re "M"))) (re.* (re.* (str.to_re "NNN"))))))) (re.union (re.union (re.* (re.union (re.* (re.+ (str.to_re "OO"))) (re.* (re.+ (str.to_re "P"))))) (re.union (re.union (re.union (re.+ (str.to_re "QQ")) (re.union (str.to_re "R") (str.to_re "SSS"))) (re.* (re.+ (str.to_re "TTT")))) (re.+ (re.* (re.* (str.to_re "UU")))))) (re.* (re.* (re.+ (re.union (re.union (str.to_re "V") (str.to_re "WWW")) (re.+ (str.to_re "XXX"))))))))))) (re.+ (re.+ (re.union (re.+ (re.+ (re.* (re.+ (re.+ (re.* (re.* (str.to_re "YYY")))))))) (re.union (re.* (re.union (re.union (re.* (re.* (re.union (str.to_re "ZZZ") (str.to_re "!!!")))) (re.* (re.* (re.* (str.to_re """"""""))))) (re.* (re.* (re.* (re.+ (str.to_re "###"))))))) (re.union (re.+ (re.union (re.* (re.union (re.+ (str.to_re "$")) (re.+ (str.to_re "%%")))) (re.+ (re.+ (re.+ (str.to_re "&&&")))))) (re.+ (re.+ (re.* (re.* (re.union (str.to_re "'") (str.to_re "(")))))))))))))) (re.+ (re.+ (re.+ (re.+ (re.* (re.union (re.+ (re.union (re.union (re.union (re.* (re.+ (re.+ (str.to_re "))")))) (re.union (re.union (re.union (str.to_re "**") (str.to_re "+")) (re.* (str.to_re ","))) (re.+ (re.union (str.to_re "--") (str.to_re "..."))))) (re.* (re.union (re.union (re.* (str.to_re "//")) (re.union (str.to_re ":") (str.to_re ";;"))) (re.* (re.+ (str.to_re "<<")))))) (re.* (re.* (re.union (re.* (re.union (str.to_re "=") (str.to_re ">>>"))) (re.+ (re.union (str.to_re "??") (str.to_re "@")))))))) (re.union (re.+ (re.+ (re.+ (re.+ (re.union (re.* (str.to_re "[")) (re.+ (str.to_re "\\\\\\"))))))) (re.+ (re.union (re.* (re.union (re.* (re.union (str.to_re "]]") (str.to_re "^"))) (re.* (re.+ (str.to_re "___"))))) (re.* (re.* (re.+ (re.union (str.to_re "`") (str.to_re "{")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
