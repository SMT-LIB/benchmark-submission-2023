(set-info :smt-lib-version 2.6)
(set-logic QF_SLIA)
(set-info :source |
Generated by: Dmitry Blotsky1, Federico Mora, Murphy Berzish, Yunhui Zheng, Ifaz Kabir, Vijay Ganesh, Zhengyang Lu
Generated on: 2018-01-24
Generator: StringFuzz
Application: Evaluate string solvers
Description: new instance generated by StringFuzz, a modular string and regex fuzzer
Target solver: Z3str3, CVC4, Z3str2, Norn
Publications: Blotsky, D., Mora, F., Berzish, M., Zheng, Y., Kabir, I., & Ganesh, V. (2018). Stringfuzz: A fuzzer for string solvers. In CAV 2018.
|)
(set-info :license "https://creativecommons.org/licenses/by/4.0/")
(set-info :category "random")
(set-info :status unknown)

(declare-fun var0 () String)
(assert (str.in_re var0 (re.++ (re.* (re.* (re.+ (re.union (re.+ (re.union (re.union (re.* (re.* (re.+ (re.+ (re.+ (re.union (str.to_re "000") (str.to_re "1"))))))) (re.+ (re.+ (re.+ (re.* (re.union (re.* (str.to_re "22")) (re.+ (str.to_re "33")))))))) (re.union (re.* (re.+ (re.* (re.+ (re.+ (re.* (str.to_re "44"))))))) (re.* (re.* (re.+ (re.union (re.+ (re.union (str.to_re "5") (str.to_re "6"))) (re.* (re.* (str.to_re "7")))))))))) (re.* (re.* (re.+ (re.union (re.union (re.union (re.+ (re.* (re.union (str.to_re "888") (str.to_re "999")))) (re.+ (re.* (re.union (str.to_re "aaa") (str.to_re "bbb"))))) (re.union (re.union (re.union (re.union (str.to_re "c") (str.to_re "dd")) (re.+ (str.to_re "e"))) (re.+ (re.* (str.to_re "f")))) (re.+ (re.+ (re.* (str.to_re "gg")))))) (re.+ (re.+ (re.union (re.+ (re.union (str.to_re "h") (str.to_re "iii"))) (re.* (re.+ (str.to_re "jjj")))))))))))))) (re.+ (re.+ (re.+ (re.+ (re.union (re.+ (re.union (re.* (re.* (re.* (re.* (re.union (re.+ (str.to_re "kk")) (re.union (str.to_re "l") (str.to_re "mmm"))))))) (re.union (re.* (re.union (re.union (re.+ (re.* (str.to_re "n"))) (re.union (re.+ (str.to_re "oo")) (re.union (str.to_re "pp") (str.to_re "qq")))) (re.* (re.* (re.+ (str.to_re "r")))))) (re.* (re.* (re.+ (re.+ (re.* (str.to_re "s"))))))))) (re.* (re.union (re.union (re.* (re.+ (re.union (re.+ (re.+ (str.to_re "tt"))) (re.union (re.union (str.to_re "u") (str.to_re "v")) (re.* (str.to_re "ww")))))) (re.union (re.* (re.+ (re.* (re.union (str.to_re "xxx") (str.to_re "y"))))) (re.* (re.+ (re.* (re.+ (str.to_re "zzz"))))))) (re.union (re.union (re.+ (re.* (re.+ (re.union (str.to_re "AA") (str.to_re "BBB"))))) (re.* (re.union (re.* (re.+ (str.to_re "C"))) (re.+ (re.union (str.to_re "D") (str.to_re "E")))))) (re.* (re.* (re.+ (re.union (re.+ (str.to_re "F")) (re.+ (str.to_re "GG")))))))))))))))))
(assert (<= 15 (str.len var0)))
(check-sat)
(exit)
